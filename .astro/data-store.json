[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.5","content-config-digest","26d4b4d61fdc9edb","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://johnbwoodruff.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"monokai\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,46,47,85,86,111,112,136,137,181,182,215,216,259,260,295,296,354,355,385,386,422,423,459,460,498,499,543,544,578,579,612,613,643,644,675,676],"cheesy-alfredo",{"id":11,"data":13,"body":22,"filePath":23,"digest":24,"rendered":25,"legacyId":45},{"title":14,"description":15,"date":16,"published":17,"tags":18,"cover_image":21},"Kraft Cheesy Alfredo Copycat Recipe","I used to love Kraft's Mac & Cheese Cheesy Alfredo but sadly they discontinued it. After a lot of trial and error, I figured out a recipe to replicate it.",["Date","2023-12-02T00:00:00.000Z"],true,[19,20],"cooking","recipes","/img/cheesy-alfredo.png","It's been 7 years since Kraft in their infinite wisdom (read: foolishness) discontinued their Mac & Cheese Cheesy Alfredo. This is not to be confused with their Alfredo Mac & Cheese or any of their other variations on alfredo, this is the \"Cheesy Alfredo with Pasta Twists\". It was my favorite boxed mac & cheese during the years they sold it. I've been wishing for it to be sold again ever since that devastating day I realized the stores weren't just out of stock, the product was discontinued. To this day, I still check the mac & cheese section every time I go to the grocery store. Well, I finally decided to try to replicate it. I've tried a few different recipes and this is the closest I've gotten to the original. It's not perfect, but I feel like it's 99% of the way there and I've eaten it enough times that my memory of the original flavor is now blending together with this recipe. I'm sure there are some tweaks that could be made to get it even closer, but I'm happy with it as is.\n\nI always hate when recipes have the author's life story a long explanation about the origins of food and humanity and you have to scroll for a year before you find the recipe, so I'll get right to it. The recipe consists of a few key parts: The pasta, the cheese powder, and the milk & butter. The pasta was easy to determine, but funnily enough super hard to get. Kraft used [Gemelli](https://www.barilla.com/en-us/products/pasta/classic-blue-box/gemelli) pasta, which is a spiral shaped pasta. Weirdly I couldn't find any gemelli pasta in any store near me, so I had to order it online. I highly recommend using gemelli pasta because in my opinion the texture of the noodle is a huge part of what I remember from the original.\n\nThe cheese powder was obviously the hardest part to figure out. I was able to, after many hours of thinking back to the days where I had it regularly, figure out a blend of ingredients that comes as close to it as I believe is possible. The base of the powder actually utilizes a white cheddar powder, which works great to give it that cheese flavor without it being too overpowering. The other ingredients are a blend of spices and other powders that I believe are close to what Kraft used in their original recipe. One of the key ingredients is actually a salt, MSG, and sugar blend that I use in a lot of recipes in the place of salt. You mix salt, MSG, and sugar in a **4:2:1** ratio. Usually I make a larger amount and put it in a dedicated shaker, so you could do, for example, 4 tbsp table salt, 2 tbsp MSG powder, and 1 tbsp granulated sugar and then shake it up thoroughly to mix. I use this blend in a lot of recipes, so it's worth making a larger amount and keeping it around. The other aspect is that instead of 4 tbsp of butter like mac and cheese usually uses, I use 6 tbsp because the original recipe had a slightly heavier butter flavor than most mac and cheese. I also recommend the butter be softened, but not melted, before adding it to the pasta. This makes for a great sauce consistency.\n\n## Ingredients\n\n- 2 cups gemelli pasta\n- 3 tbsp white cheddar powder\n- 1/2 tsp salt, MSG, sugar blend\n- 1/4 tsp garlic powder\n- 1/4 tsp onion powder\n- 6 tbsp salted butter softened\n- 1/4 cup milk\n\n## Instructions\n\n1. Cook the pasta according to the instructions on the box. I recommend cooking it to al dente, which is usually 8-10 minutes.\n2. While the pasta is cooking, prepare your cheese powder. Thoroughly mix the white cheddar powder, MSG blend, garlic powder, and onion powder in a small bowl until combined.\n3. Once the pasta is cooked, strain it and return it to the pot. Add the butter and milk and stir until melted and creamy.\n4. Add the cheese powder and stir until combined. Serve immediately.\n\n## Notes\n\nFor the white cheddar powder I used the [Hoosier Hill Farm White Cheddar Cheese Powder](https://a.co/d/6wTHHcC). It comes in a large container so you'll have plenty left over for future batches. I also recommend using a small whisk to mix the cheese powder together. It helps to get it evenly distributed and prevents clumping. As for the ingredients you can obviously change any ratios you'd like to suit your preferences, however I experimented with increasing and decreasing most of these ingredients across many attempts and found this one to be the closest to the original. On the first attempt I did way too much garlic powder and had attrocious breath the rest of the night. I also validated my recipe with my siblings who loved the original just as much as me and they were very pleased with the results.\n\nWhile this recipe is not perfect, I'm quite pleased with it. I have never found another person who has attempted to make a copycat recipe of the Kraft Cheesy Alfredo, so I was very pleased with how my own humble attempts turned out. I hope this brings some joy to others who loved the original as much as I did. While this is super different content from my typical tech-focused blog posts, I want to use my blog as a place to share things I'm passionate about, and cooking is one of those things. I hope you enjoyed this recipe and if you try it out, let me know what you think by [chatting with me on BlueSky](https://bsky.app/profile/johnbwoodruff.com)!","src/content/blog/cheesy-alfredo.md","388ae90bcf69f166",{"html":26,"metadata":27},"\u003Cp>It’s been 7 years since Kraft in their infinite wisdom (read: foolishness) discontinued their Mac &#x26; Cheese Cheesy Alfredo. This is not to be confused with their Alfredo Mac &#x26; Cheese or any of their other variations on alfredo, this is the “Cheesy Alfredo with Pasta Twists”. It was my favorite boxed mac &#x26; cheese during the years they sold it. I’ve been wishing for it to be sold again ever since that devastating day I realized the stores weren’t just out of stock, the product was discontinued. To this day, I still check the mac &#x26; cheese section every time I go to the grocery store. Well, I finally decided to try to replicate it. I’ve tried a few different recipes and this is the closest I’ve gotten to the original. It’s not perfect, but I feel like it’s 99% of the way there and I’ve eaten it enough times that my memory of the original flavor is now blending together with this recipe. I’m sure there are some tweaks that could be made to get it even closer, but I’m happy with it as is.\u003C/p>\n\u003Cp>I always hate when recipes have the author’s life story a long explanation about the origins of food and humanity and you have to scroll for a year before you find the recipe, so I’ll get right to it. The recipe consists of a few key parts: The pasta, the cheese powder, and the milk &#x26; butter. The pasta was easy to determine, but funnily enough super hard to get. Kraft used \u003Ca href=\"https://www.barilla.com/en-us/products/pasta/classic-blue-box/gemelli\">Gemelli\u003C/a> pasta, which is a spiral shaped pasta. Weirdly I couldn’t find any gemelli pasta in any store near me, so I had to order it online. I highly recommend using gemelli pasta because in my opinion the texture of the noodle is a huge part of what I remember from the original.\u003C/p>\n\u003Cp>The cheese powder was obviously the hardest part to figure out. I was able to, after many hours of thinking back to the days where I had it regularly, figure out a blend of ingredients that comes as close to it as I believe is possible. The base of the powder actually utilizes a white cheddar powder, which works great to give it that cheese flavor without it being too overpowering. The other ingredients are a blend of spices and other powders that I believe are close to what Kraft used in their original recipe. One of the key ingredients is actually a salt, MSG, and sugar blend that I use in a lot of recipes in the place of salt. You mix salt, MSG, and sugar in a \u003Cstrong>4:2:1\u003C/strong> ratio. Usually I make a larger amount and put it in a dedicated shaker, so you could do, for example, 4 tbsp table salt, 2 tbsp MSG powder, and 1 tbsp granulated sugar and then shake it up thoroughly to mix. I use this blend in a lot of recipes, so it’s worth making a larger amount and keeping it around. The other aspect is that instead of 4 tbsp of butter like mac and cheese usually uses, I use 6 tbsp because the original recipe had a slightly heavier butter flavor than most mac and cheese. I also recommend the butter be softened, but not melted, before adding it to the pasta. This makes for a great sauce consistency.\u003C/p>\n\u003Ch2 id=\"ingredients\">Ingredients\u003C/h2>\n\u003Cul>\n\u003Cli>2 cups gemelli pasta\u003C/li>\n\u003Cli>3 tbsp white cheddar powder\u003C/li>\n\u003Cli>1/2 tsp salt, MSG, sugar blend\u003C/li>\n\u003Cli>1/4 tsp garlic powder\u003C/li>\n\u003Cli>1/4 tsp onion powder\u003C/li>\n\u003Cli>6 tbsp salted butter softened\u003C/li>\n\u003Cli>1/4 cup milk\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"instructions\">Instructions\u003C/h2>\n\u003Col>\n\u003Cli>Cook the pasta according to the instructions on the box. I recommend cooking it to al dente, which is usually 8-10 minutes.\u003C/li>\n\u003Cli>While the pasta is cooking, prepare your cheese powder. Thoroughly mix the white cheddar powder, MSG blend, garlic powder, and onion powder in a small bowl until combined.\u003C/li>\n\u003Cli>Once the pasta is cooked, strain it and return it to the pot. Add the butter and milk and stir until melted and creamy.\u003C/li>\n\u003Cli>Add the cheese powder and stir until combined. Serve immediately.\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"notes\">Notes\u003C/h2>\n\u003Cp>For the white cheddar powder I used the \u003Ca href=\"https://a.co/d/6wTHHcC\">Hoosier Hill Farm White Cheddar Cheese Powder\u003C/a>. It comes in a large container so you’ll have plenty left over for future batches. I also recommend using a small whisk to mix the cheese powder together. It helps to get it evenly distributed and prevents clumping. As for the ingredients you can obviously change any ratios you’d like to suit your preferences, however I experimented with increasing and decreasing most of these ingredients across many attempts and found this one to be the closest to the original. On the first attempt I did way too much garlic powder and had attrocious breath the rest of the night. I also validated my recipe with my siblings who loved the original just as much as me and they were very pleased with the results.\u003C/p>\n\u003Cp>While this recipe is not perfect, I’m quite pleased with it. I have never found another person who has attempted to make a copycat recipe of the Kraft Cheesy Alfredo, so I was very pleased with how my own humble attempts turned out. I hope this brings some joy to others who loved the original as much as I did. While this is super different content from my typical tech-focused blog posts, I want to use my blog as a place to share things I’m passionate about, and cooking is one of those things. I hope you enjoyed this recipe and if you try it out, let me know what you think by \u003Ca href=\"https://bsky.app/profile/johnbwoodruff.com\">chatting with me on BlueSky\u003C/a>!\u003C/p>",{"headings":28,"localImagePaths":39,"remoteImagePaths":40,"frontmatter":41,"imagePaths":44},[29,33,36],{"depth":30,"slug":31,"text":32},2,"ingredients","Ingredients",{"depth":30,"slug":34,"text":35},"instructions","Instructions",{"depth":30,"slug":37,"text":38},"notes","Notes",[],[],{"title":14,"published":17,"description":15,"date":42,"tags":43,"cover_image":21},["Date","2023-12-02T00:00:00.000Z"],[19,20],[],"cheesy-alfredo.md","combatting-covid-burnout",{"id":46,"data":48,"body":58,"filePath":59,"digest":60,"rendered":61,"legacyId":84},{"title":49,"description":50,"date":51,"published":17,"tags":52,"cover_image":56,"cover_image_alt":57,"ogImage":56},"Combatting Burnout During COVID","Sharing the things I do to help fight off burnout due to the global pandemic.",["Date","2020-10-04T00:00:00.000Z"],[53,54,55],"career","mentalhealth","burnout","/img/burnout.png","Image of a developer at a laptop wearing a facemask","I'll be completely honest, I'm feeling tired just thinking about writing this post. But that's not surprising, given the topic I'm writing about. Burnout. I've written about burnout before, whether it be comments on posts, or the chapter I wrote for [Your First Year in Code](https://leanpub.com/firstyearincode). I'm writing about it again because I'm currently feeling quite burned out. This, however, is a different kind of burnout than I've felt before. I've been burned out by too much coding, too little vacation, and other typical burnout reasons. This time there's no work-related reason for my burnout. This time, it's 2020 that is taking its toll on me, as I'm sure it's doing the same to many of you.\n\nCOVID-19 has been bigger, longer, and crazier than I think most of us ever thought it would be. In the early days of COVID many thought it was a quick solution. Stay home for a few weeks, maybe a month or two, and it would fizzle out. Well, as history has shown us, it hasn't fizzled, it has exploded. Most tech companies have said they'll be full remote until January at least, at which point they'll \"reevaluate\", which likely means set another arbitrary date because there won't yet be a vaccine widely available. Many of us have been stuck inside without much social interaction since March. Even for the staunchest of introverts, that can be exceptionally taxing on one's mental health. I'm an extrovert and I feel exhausted not being able to fully charge that social battery.\n\nIn short, I'm burned out. Not just from work, but from 2020. I also recognize that I have it better than many people. I've got a fantastic [home office setup](/posts/home-office-setup) which I feel productive in, and I've got a wonderful supportive wife and son, and work for a company that was very well prepared for remote work. Many people are in a far worse situation than me, so I recognize that my burnout may be nothing compared to what others are feeling. Nevertheless it's very real for me and I wanted to write about what I'm doing to attempt to combat it.\n\n## Hobbies\n\nI'm of the opinion that it's important to have hobbies outside of work. That being said I completely understand that many people enjoy programming as a hobby. (I'm definitely one of those people, and I've got a [side project graveyard](/posts/my-github-graveyard) to prove it) I have, in recent years, tried to find hobbies that aren't programming that I could indulge in. That has been super helpful during times of burnout, because when I get burned out it affects my hobby coding in addition to my professional coding.\n\nFor myself personally I've had a variety of hobbies over the years. In addition to some of the typical ones (such as video games) I've enjoyed other hobbies that were less technical and more physical. One of my favorites is woodworking. My wife and I have built a variety of pieces I am proud of. My favorite was a dining table.\n\n![Handmade Dining Room Table](/img/posts/combatting-covid-burnout/table.jpeg)\n\nWe had many family dinners around that table, and I felt very accomplished and greatly enjoyed working hard on this beautiful piece. It contributed greatly to me feeling fulfilled and definitely helped to hold off periods of burnout. There is something about working with physical objects and tools that breaks up the constant mental stress of working on a screen and with software. Perhaps something like that that would work for you to help fight off burnout.\n\n## Exercise\n\nThis is one of the most commonly recommended things to help with burnout. (among many other ailments) I'm sure you, like me, are tired of hearing that exercise is good. It's one of those things where we all know it's something we're supposed to do, but despite that I personally tend to brush it off as something _other_ people need to do. It is, however, a very important part of keeping your mind and body healthy, something that directly affects your burnout.\n\nI've lately been in a better habit of exercise. Part of it is that I got a new puppy about 2 months ago! She's adorable, but she requires a lot of exercise to keep her healthy and happy, which means a lot of exercise for me. I take her on multiple walks every day to help her expend some energy, and she usually loves to run during the long stretches of grass, which I run with her.\n\n![Puppy outside in the backyard](/img/posts/combatting-covid-burnout/puppy.jpeg)\n\nAnother easy way to start getting into exercising is through VR if you're able to own something like an [Oculus Quest](https://www.oculus.com/quest-2/). While most games you don't move around much, there are plenty of games that can actually get your heart rate going decently well such as [Beat Saber](https://beatsaber.com/). On the Oculus Quest specifically there is a game called [Supernatural](https://www.oculus.com/experiences/quest/1830168170427369) that is a fitness game. You pay for a membership and you get new workouts daily that tailor themselves to your fitness level. I tried it on a friend's headset before I got the Quest and it was a great workout. So there are plenty of ways to get exercise without needing to go to a gym or have lots of equipment at home.\n\n## Video Games\n\nI really enjoy video games as I'm sure many of you reading this article do as well. On the one hand playing video games keeps you staring at screens, so for some people it might not help with burnout. Also playing video games for huge periods of time can lend itself to not feeling great mentally. However I really enjoy playing video games for reasonable periods of time, especially with friends and family.\n\nDue to COVID most of us can't do close contact with friends and loved ones at the moment. I'm particularly close with my siblings, and pre-COVID we would get together regularly to hang out and enjoy each others' company. Since we can't do that right now, we decided to do a once-a-week video game night where we all play a video game together over voice chat. Our favorite to do is Age of Empires II, since that was one we played together frequently while growing up. It's really fun because we get to chat while playing, and we usually do a Zoom call afterwards to chat and reminisce.\n\n![Age of Empires 2](/img/posts/combatting-covid-burnout/aoe.jpeg)\n\nI also enjoy [streaming on Twitch](https://www.twitch.tv/jorgnaan) while I play video games. I'm by no means a streamer like many of you might be. I mostly stream just because it's fun when the occasional person hops on the stream and interacts with me. I only stream twice a week, usually to play Sea of Thieves on Tuesdays, and Rocket League on Fridays, with a variety of friends. Those are really fun to do. We play a couple hours and just have a fun time together, whether anybody watches or not. I definitely don't stream to do anything other than just have a good time.\n\n### Keep in Touch with Friends & Family\n\nIt's hard being apart from those you care about. That really starts to wear on you. So while we can't do much right now in terms of being together with groups of loved ones, we can find alternative ways to be together and enjoy each others' company. My family, for example, does a scheduled Zoom call once a week to stay updated with each others' lives. We share memories, talk about our week, and just have a nice time together.\n\nAnother thing my family has started doing is sending weekly emails to each other on Sunday with photos and details of our lives and goings on during the week. It's been incredibly fun reading through what people are doing despite being restricted in what they normally do, and it's always enjoyable seeing photos of nieces and nephews and pets. In fact I've started saving those emails, and I'd love one day to compile a book of them for our family to look back on this crazy time and remember.\n\nIf you live near family you can also do socially distanced visits. My parents live about 10 minutes from me so we like to go over every now and again and hang out in their backyard. We let our puppy run around and play, my son jumps on their trampoline, and my wife and I sit and chat with my parents, about 10 feet apart, on their back patio. While we can't give hugs or be physically closer than across the patio, it's really nice being able to be in somewhat close proximity with loved ones. I recognize that many people don't have the same luxury as I do of living close to family, but for those that do this can be incredibly helpful in trying to push away the burnout of being alone and separated from people, and we can still do it safely.\n\n---\n\nThose are just a few of the things I've been doing to try to fend off the burnout that's been persistent during all the shutdown and restrictions of COVID. As with everything else in life this is by no means a one size fit all kind of thing. Obviously what works for me isn't necessarily going to work for you. I do hope, however, that by detailing some of the things that work for me, you'll at least find some ideas that work for you too. COVID has been rough for all of us in a million different ways, but frankly it's good to talk about when we're not feeling great. I'd love to hear what all of you are doing to combat the burnout many of us are feeling during COVID, maybe some of your ideas could work for me too.","src/content/blog/combatting-covid-burnout.md","afaa709a7547667c",{"html":62,"metadata":63},"\u003Cp>I’ll be completely honest, I’m feeling tired just thinking about writing this post. But that’s not surprising, given the topic I’m writing about. Burnout. I’ve written about burnout before, whether it be comments on posts, or the chapter I wrote for \u003Ca href=\"https://leanpub.com/firstyearincode\">Your First Year in Code\u003C/a>. I’m writing about it again because I’m currently feeling quite burned out. This, however, is a different kind of burnout than I’ve felt before. I’ve been burned out by too much coding, too little vacation, and other typical burnout reasons. This time there’s no work-related reason for my burnout. This time, it’s 2020 that is taking its toll on me, as I’m sure it’s doing the same to many of you.\u003C/p>\n\u003Cp>COVID-19 has been bigger, longer, and crazier than I think most of us ever thought it would be. In the early days of COVID many thought it was a quick solution. Stay home for a few weeks, maybe a month or two, and it would fizzle out. Well, as history has shown us, it hasn’t fizzled, it has exploded. Most tech companies have said they’ll be full remote until January at least, at which point they’ll “reevaluate”, which likely means set another arbitrary date because there won’t yet be a vaccine widely available. Many of us have been stuck inside without much social interaction since March. Even for the staunchest of introverts, that can be exceptionally taxing on one’s mental health. I’m an extrovert and I feel exhausted not being able to fully charge that social battery.\u003C/p>\n\u003Cp>In short, I’m burned out. Not just from work, but from 2020. I also recognize that I have it better than many people. I’ve got a fantastic \u003Ca href=\"/posts/home-office-setup\">home office setup\u003C/a> which I feel productive in, and I’ve got a wonderful supportive wife and son, and work for a company that was very well prepared for remote work. Many people are in a far worse situation than me, so I recognize that my burnout may be nothing compared to what others are feeling. Nevertheless it’s very real for me and I wanted to write about what I’m doing to attempt to combat it.\u003C/p>\n\u003Ch2 id=\"hobbies\">Hobbies\u003C/h2>\n\u003Cp>I’m of the opinion that it’s important to have hobbies outside of work. That being said I completely understand that many people enjoy programming as a hobby. (I’m definitely one of those people, and I’ve got a \u003Ca href=\"/posts/my-github-graveyard\">side project graveyard\u003C/a> to prove it) I have, in recent years, tried to find hobbies that aren’t programming that I could indulge in. That has been super helpful during times of burnout, because when I get burned out it affects my hobby coding in addition to my professional coding.\u003C/p>\n\u003Cp>For myself personally I’ve had a variety of hobbies over the years. In addition to some of the typical ones (such as video games) I’ve enjoyed other hobbies that were less technical and more physical. One of my favorites is woodworking. My wife and I have built a variety of pieces I am proud of. My favorite was a dining table.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/combatting-covid-burnout/table.jpeg\" alt=\"Handmade Dining Room Table\">\u003C/p>\n\u003Cp>We had many family dinners around that table, and I felt very accomplished and greatly enjoyed working hard on this beautiful piece. It contributed greatly to me feeling fulfilled and definitely helped to hold off periods of burnout. There is something about working with physical objects and tools that breaks up the constant mental stress of working on a screen and with software. Perhaps something like that that would work for you to help fight off burnout.\u003C/p>\n\u003Ch2 id=\"exercise\">Exercise\u003C/h2>\n\u003Cp>This is one of the most commonly recommended things to help with burnout. (among many other ailments) I’m sure you, like me, are tired of hearing that exercise is good. It’s one of those things where we all know it’s something we’re supposed to do, but despite that I personally tend to brush it off as something \u003Cem>other\u003C/em> people need to do. It is, however, a very important part of keeping your mind and body healthy, something that directly affects your burnout.\u003C/p>\n\u003Cp>I’ve lately been in a better habit of exercise. Part of it is that I got a new puppy about 2 months ago! She’s adorable, but she requires a lot of exercise to keep her healthy and happy, which means a lot of exercise for me. I take her on multiple walks every day to help her expend some energy, and she usually loves to run during the long stretches of grass, which I run with her.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/combatting-covid-burnout/puppy.jpeg\" alt=\"Puppy outside in the backyard\">\u003C/p>\n\u003Cp>Another easy way to start getting into exercising is through VR if you’re able to own something like an \u003Ca href=\"https://www.oculus.com/quest-2/\">Oculus Quest\u003C/a>. While most games you don’t move around much, there are plenty of games that can actually get your heart rate going decently well such as \u003Ca href=\"https://beatsaber.com/\">Beat Saber\u003C/a>. On the Oculus Quest specifically there is a game called \u003Ca href=\"https://www.oculus.com/experiences/quest/1830168170427369\">Supernatural\u003C/a> that is a fitness game. You pay for a membership and you get new workouts daily that tailor themselves to your fitness level. I tried it on a friend’s headset before I got the Quest and it was a great workout. So there are plenty of ways to get exercise without needing to go to a gym or have lots of equipment at home.\u003C/p>\n\u003Ch2 id=\"video-games\">Video Games\u003C/h2>\n\u003Cp>I really enjoy video games as I’m sure many of you reading this article do as well. On the one hand playing video games keeps you staring at screens, so for some people it might not help with burnout. Also playing video games for huge periods of time can lend itself to not feeling great mentally. However I really enjoy playing video games for reasonable periods of time, especially with friends and family.\u003C/p>\n\u003Cp>Due to COVID most of us can’t do close contact with friends and loved ones at the moment. I’m particularly close with my siblings, and pre-COVID we would get together regularly to hang out and enjoy each others’ company. Since we can’t do that right now, we decided to do a once-a-week video game night where we all play a video game together over voice chat. Our favorite to do is Age of Empires II, since that was one we played together frequently while growing up. It’s really fun because we get to chat while playing, and we usually do a Zoom call afterwards to chat and reminisce.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/combatting-covid-burnout/aoe.jpeg\" alt=\"Age of Empires 2\">\u003C/p>\n\u003Cp>I also enjoy \u003Ca href=\"https://www.twitch.tv/jorgnaan\">streaming on Twitch\u003C/a> while I play video games. I’m by no means a streamer like many of you might be. I mostly stream just because it’s fun when the occasional person hops on the stream and interacts with me. I only stream twice a week, usually to play Sea of Thieves on Tuesdays, and Rocket League on Fridays, with a variety of friends. Those are really fun to do. We play a couple hours and just have a fun time together, whether anybody watches or not. I definitely don’t stream to do anything other than just have a good time.\u003C/p>\n\u003Ch3 id=\"keep-in-touch-with-friends--family\">Keep in Touch with Friends &#x26; Family\u003C/h3>\n\u003Cp>It’s hard being apart from those you care about. That really starts to wear on you. So while we can’t do much right now in terms of being together with groups of loved ones, we can find alternative ways to be together and enjoy each others’ company. My family, for example, does a scheduled Zoom call once a week to stay updated with each others’ lives. We share memories, talk about our week, and just have a nice time together.\u003C/p>\n\u003Cp>Another thing my family has started doing is sending weekly emails to each other on Sunday with photos and details of our lives and goings on during the week. It’s been incredibly fun reading through what people are doing despite being restricted in what they normally do, and it’s always enjoyable seeing photos of nieces and nephews and pets. In fact I’ve started saving those emails, and I’d love one day to compile a book of them for our family to look back on this crazy time and remember.\u003C/p>\n\u003Cp>If you live near family you can also do socially distanced visits. My parents live about 10 minutes from me so we like to go over every now and again and hang out in their backyard. We let our puppy run around and play, my son jumps on their trampoline, and my wife and I sit and chat with my parents, about 10 feet apart, on their back patio. While we can’t give hugs or be physically closer than across the patio, it’s really nice being able to be in somewhat close proximity with loved ones. I recognize that many people don’t have the same luxury as I do of living close to family, but for those that do this can be incredibly helpful in trying to push away the burnout of being alone and separated from people, and we can still do it safely.\u003C/p>\n\u003Chr>\n\u003Cp>Those are just a few of the things I’ve been doing to try to fend off the burnout that’s been persistent during all the shutdown and restrictions of COVID. As with everything else in life this is by no means a one size fit all kind of thing. Obviously what works for me isn’t necessarily going to work for you. I do hope, however, that by detailing some of the things that work for me, you’ll at least find some ideas that work for you too. COVID has been rough for all of us in a million different ways, but frankly it’s good to talk about when we’re not feeling great. I’d love to hear what all of you are doing to combat the burnout many of us are feeling during COVID, maybe some of your ideas could work for me too.\u003C/p>",{"headings":64,"localImagePaths":78,"remoteImagePaths":79,"frontmatter":80,"imagePaths":83},[65,68,71,74],{"depth":30,"slug":66,"text":67},"hobbies","Hobbies",{"depth":30,"slug":69,"text":70},"exercise","Exercise",{"depth":30,"slug":72,"text":73},"video-games","Video Games",{"depth":75,"slug":76,"text":77},3,"keep-in-touch-with-friends--family","Keep in Touch with Friends & Family",[],[],{"title":49,"published":17,"description":50,"date":81,"tags":82,"cover_image":56,"cover_image_alt":57,"ogImage":56},["Date","2020-10-04T00:00:00.000Z"],[53,54,55],[],"combatting-covid-burnout.md","digitalocean-js-released",{"id":85,"data":87,"body":97,"filePath":98,"digest":99,"rendered":100,"legacyId":110},{"title":88,"description":89,"date":90,"published":91,"tags":92,"cover_image":96},"DigitalOcean JS 1.0 Released!","A library for the DigitalOcean API written in TypeScript. For use in Node or the browser!",["Date","2018-08-26T00:00:00.000Z"],false,[93,94,95],"showdev","opensource","node","/img/digitalocean-js-v1.png","I've been writing a library, DigitalOcean JS, for the last year in my spare time. I started it because I was building a DigitalOcean mobile app using Ionic for use in managing your DigitalOcean resources from your phone. In looking at the various libraries available for my use, I disliked them for a few reasons, including use of callback functions instead of Promises, only being able to use some in Node and not the browser, among other things. Due to those issues, I decided to build my own that was structured how I would like to use it, with some key goals in mind:\n\n- Be able to use in a Node or Browser environment with no difference in usage.\n- Use Promises instead of callbacks so clients can make use of `async`/`await`.\n- Be built in TypeScript so consumers of the library can benefit from excellent intellisense with the TypeScript definitions.\n- Provide solid documentation including examples for usage.\n\nTo that end I started development on DigitalOcean JS. Instead of building it all out quickly I decided to build it out as I needed it for the app I was building. As is usual with my side projects, (see [my previous post](/posts/my-github-graveyard)) it languished to the side for a while. After writing that blog post, I decided that I wouldn't let this project die. I literally had one set of endpoints left to implement.\n\nIt is with great pleasure that I finally get to announce the official v1.0 release of DigitalOcean JS. Check it out at the repo below, and keep fighting to keep your side projects alive!\n\n[digitalocean-js](https://github.com/johnbwoodruff/digitalocean-js)","src/content/blog/digitalocean-js-released.md","b93ca1f6530989b0",{"html":101,"metadata":102},"\u003Cp>I’ve been writing a library, DigitalOcean JS, for the last year in my spare time. I started it because I was building a DigitalOcean mobile app using Ionic for use in managing your DigitalOcean resources from your phone. In looking at the various libraries available for my use, I disliked them for a few reasons, including use of callback functions instead of Promises, only being able to use some in Node and not the browser, among other things. Due to those issues, I decided to build my own that was structured how I would like to use it, with some key goals in mind:\u003C/p>\n\u003Cul>\n\u003Cli>Be able to use in a Node or Browser environment with no difference in usage.\u003C/li>\n\u003Cli>Use Promises instead of callbacks so clients can make use of \u003Ccode>async\u003C/code>/\u003Ccode>await\u003C/code>.\u003C/li>\n\u003Cli>Be built in TypeScript so consumers of the library can benefit from excellent intellisense with the TypeScript definitions.\u003C/li>\n\u003Cli>Provide solid documentation including examples for usage.\u003C/li>\n\u003C/ul>\n\u003Cp>To that end I started development on DigitalOcean JS. Instead of building it all out quickly I decided to build it out as I needed it for the app I was building. As is usual with my side projects, (see \u003Ca href=\"/posts/my-github-graveyard\">my previous post\u003C/a>) it languished to the side for a while. After writing that blog post, I decided that I wouldn’t let this project die. I literally had one set of endpoints left to implement.\u003C/p>\n\u003Cp>It is with great pleasure that I finally get to announce the official v1.0 release of DigitalOcean JS. Check it out at the repo below, and keep fighting to keep your side projects alive!\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/johnbwoodruff/digitalocean-js\">digitalocean-js\u003C/a>\u003C/p>",{"headings":103,"localImagePaths":104,"remoteImagePaths":105,"frontmatter":106,"imagePaths":109},[],[],[],{"title":88,"published":91,"description":89,"date":107,"tags":108,"cover_image":96},["Date","2018-08-26T00:00:00.000Z"],[93,94,95],[],"digitalocean-js-released.md","home-office-setup",{"id":111,"data":113,"body":122,"filePath":123,"digest":124,"rendered":125,"legacyId":135},{"title":114,"description":115,"date":116,"published":17,"tags":117,"cover_image":121},"My Home Office & Workstation","I transitioned last year to being fully remote. Here is my home office workspace!",["Date","2019-10-04T00:00:00.000Z"],[118,119,120],"workstations","remote","productivity","/img/workspace.png","This year I got a new job at a place called [GoReact](https://get.goreact.com/careers/) that allows me to work remote if I wish. I currently am enjoying working remote 3 times a week, and going in to the office on the other 2 days. As such, I needed a comfortable, ergonomic, productive workspace for myself at home. I have the fortune of living in an apartment that has an extra bedroom we don't use, so I use that as my home office. It's taken me close to a year to acquire all the pieces I wanted in a dream office, but I finally have a space put together that helps me feel inspired and productive while working. So, without further ado, here it is:\n\n![Side view of my workstation setup](/img/posts/home-office-setup/side.png)\n\nHere's another view of it from straight on.\n\n![Front view of my workstation setup](/img/posts/home-office-setup/front.png)\n\nI'm very proud of this workspace. Sure, it could use some help in the cable management department, among other places, but I love it. A lot of this I owned before setting up this home office, and some of it I bought when getting my space set up.\n\nHere is a list of the things you'll see that make up my workspace:\n\n- [Autonomous SmartDesk Business Edition](https://www.autonomous.ai/standing-desks/smartdesk-2-business) with Cable Tray (to help with cord management)\n- [Autonomous ErgoChair 2](https://www.autonomous.ai/office-chairs/ergonomic-chair)\n- [Anti-Fatigue Mat](https://www.autonomous.ai/office-accessories/anti-fatigue-mat)\n- [15\" MacBook Pro](https://www.apple.com/macbook-pro/) (work issued)\n- [Samsung CHG90](https://www.amazon.com/gp/product/B072C7TNC5/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1) Series Curved 49\" monitor\n- [Logitech BRIO Ultra HD Webcam](https://www.amazon.com/gp/product/B01N5UOYC4/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1)\n- [CODE Mechanical Keyboard](https://codekeyboards.com/) with Cherry MX Clear switches\n- [Apple Magic Mouse 2](https://www.apple.com/shop/product/MLA02LL/A/magic-mouse-2-silver)\n- [Apple Magic Trackpad 2](https://www.apple.com/shop/product/MRMF2/magic-trackpad-2-space-gray?fnode=4c)\n- [Bose QuietComfort 25](https://www.amazon.com/Bose-QuietComfort-Acoustic-Cancelling-Headphones/dp/B00M1NEUKK) Noise Cancelling Headphones\n- [Anker Soundcore](https://www.amazon.com/gp/product/B07BHP4W36/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1) Bluetooth Speaker\n- [Anker Wireless Charger](https://www.amazon.com/gp/product/B0756Z8X82/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1)\n- [Pictostone Notebook](https://www.amazon.com/gp/product/B07238CZ2H/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1) - Stone Paper Notebook\n- [ORICO USB 3.0 Hub](https://www.amazon.com/gp/product/B0711ZWHDV/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1)\n- [Brainwavz Hengja](https://www.amazon.com/gp/product/B012VIWG28/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1) - Desk Headphone Hanger Mount\n- Various dongles because USB-C 😅\n\nMiscellaneous non-work related items:\n\n- Dwight Schrute Bobblehead\n- Dundie Award\n- Korbanth Graflex 2.5 Lightsaber (empty hilt kit, self-assembled)\n- DJI Ronin S\n- Breath of the Wild Divine Beasts desk light from [VividDelights](https://www.etsy.com/shop/VividDelights)\n\nWell, that's it. That's my workspace. It's got two windows so I get plenty of natural light. (they were closed so the photos wouldn't be backlit like crazy) It has a door I can close and lock so I don't need to worry about my sweet 5 year old walking in while I'm in an important meeting. It works perfectly for me.\n\nI'm quite satisfied with the current state of my office. I am, however, saving up for a custom build gaming PC. My MacBook Pro is work-issued, can't play most of my video games, and definitely can't do VR. (I have an Oculus Rift S) So it may be close to a year before I can get that, but that's next on my list of what to add once I've saved up a bit more.\n\nLet me know what you think! I'd also love to see some other workstations from the rest of y'all!","src/content/blog/home-office-setup.md","5e0c34ecb0b44885",{"html":126,"metadata":127},"\u003Cp>This year I got a new job at a place called \u003Ca href=\"https://get.goreact.com/careers/\">GoReact\u003C/a> that allows me to work remote if I wish. I currently am enjoying working remote 3 times a week, and going in to the office on the other 2 days. As such, I needed a comfortable, ergonomic, productive workspace for myself at home. I have the fortune of living in an apartment that has an extra bedroom we don’t use, so I use that as my home office. It’s taken me close to a year to acquire all the pieces I wanted in a dream office, but I finally have a space put together that helps me feel inspired and productive while working. So, without further ado, here it is:\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/home-office-setup/side.png\" alt=\"Side view of my workstation setup\">\u003C/p>\n\u003Cp>Here’s another view of it from straight on.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/home-office-setup/front.png\" alt=\"Front view of my workstation setup\">\u003C/p>\n\u003Cp>I’m very proud of this workspace. Sure, it could use some help in the cable management department, among other places, but I love it. A lot of this I owned before setting up this home office, and some of it I bought when getting my space set up.\u003C/p>\n\u003Cp>Here is a list of the things you’ll see that make up my workspace:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.autonomous.ai/standing-desks/smartdesk-2-business\">Autonomous SmartDesk Business Edition\u003C/a> with Cable Tray (to help with cord management)\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.autonomous.ai/office-chairs/ergonomic-chair\">Autonomous ErgoChair 2\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.autonomous.ai/office-accessories/anti-fatigue-mat\">Anti-Fatigue Mat\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.apple.com/macbook-pro/\">15” MacBook Pro\u003C/a> (work issued)\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.amazon.com/gp/product/B072C7TNC5/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&#x26;psc=1\">Samsung CHG90\u003C/a> Series Curved 49” monitor\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.amazon.com/gp/product/B01N5UOYC4/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&#x26;psc=1\">Logitech BRIO Ultra HD Webcam\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://codekeyboards.com/\">CODE Mechanical Keyboard\u003C/a> with Cherry MX Clear switches\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.apple.com/shop/product/MLA02LL/A/magic-mouse-2-silver\">Apple Magic Mouse 2\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.apple.com/shop/product/MRMF2/magic-trackpad-2-space-gray?fnode=4c\">Apple Magic Trackpad 2\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.amazon.com/Bose-QuietComfort-Acoustic-Cancelling-Headphones/dp/B00M1NEUKK\">Bose QuietComfort 25\u003C/a> Noise Cancelling Headphones\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.amazon.com/gp/product/B07BHP4W36/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&#x26;psc=1\">Anker Soundcore\u003C/a> Bluetooth Speaker\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.amazon.com/gp/product/B0756Z8X82/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&#x26;psc=1\">Anker Wireless Charger\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.amazon.com/gp/product/B07238CZ2H/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&#x26;psc=1\">Pictostone Notebook\u003C/a> - Stone Paper Notebook\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.amazon.com/gp/product/B0711ZWHDV/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&#x26;psc=1\">ORICO USB 3.0 Hub\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.amazon.com/gp/product/B012VIWG28/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&#x26;psc=1\">Brainwavz Hengja\u003C/a> - Desk Headphone Hanger Mount\u003C/li>\n\u003Cli>Various dongles because USB-C 😅\u003C/li>\n\u003C/ul>\n\u003Cp>Miscellaneous non-work related items:\u003C/p>\n\u003Cul>\n\u003Cli>Dwight Schrute Bobblehead\u003C/li>\n\u003Cli>Dundie Award\u003C/li>\n\u003Cli>Korbanth Graflex 2.5 Lightsaber (empty hilt kit, self-assembled)\u003C/li>\n\u003Cli>DJI Ronin S\u003C/li>\n\u003Cli>Breath of the Wild Divine Beasts desk light from \u003Ca href=\"https://www.etsy.com/shop/VividDelights\">VividDelights\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>Well, that’s it. That’s my workspace. It’s got two windows so I get plenty of natural light. (they were closed so the photos wouldn’t be backlit like crazy) It has a door I can close and lock so I don’t need to worry about my sweet 5 year old walking in while I’m in an important meeting. It works perfectly for me.\u003C/p>\n\u003Cp>I’m quite satisfied with the current state of my office. I am, however, saving up for a custom build gaming PC. My MacBook Pro is work-issued, can’t play most of my video games, and definitely can’t do VR. (I have an Oculus Rift S) So it may be close to a year before I can get that, but that’s next on my list of what to add once I’ve saved up a bit more.\u003C/p>\n\u003Cp>Let me know what you think! I’d also love to see some other workstations from the rest of y’all!\u003C/p>",{"headings":128,"localImagePaths":129,"remoteImagePaths":130,"frontmatter":131,"imagePaths":134},[],[],[],{"title":114,"published":17,"description":115,"date":132,"tags":133,"cover_image":121},["Date","2019-10-04T00:00:00.000Z"],[118,119,120],[],"home-office-setup.md","homelab",{"id":136,"data":138,"body":146,"filePath":147,"digest":148,"rendered":149,"legacyId":180},{"title":139,"description":140,"date":141,"published":17,"tags":142,"cover_image":145},"My Homelab","Homelabs are a fantastic way to learn about various tools and technologies but in a safe and non-production environment. This is my homelab in 2023.",["Date","2023-01-21T00:00:00.000Z"],[136,143,144],"networking","automation","/img/homelab.png","I have a variety of hobbies, but the most obvious one is playing around with fun technologies. This applies not only to software, which I obviously write for a living and for enjoyment, but also to hardware. Ever since I took apart my parents' VHS player to see how it worked (RIP that VHS player 🪦) I have loved tinkering with hardware, and have since then built multiple PCs, wired my home for ethernet, installed security cameras, and more. The hardware projects I've most recently spent my time doing has been assembling my homelab in my basement, and that's what this post is about.\n\n## What is a homelab?\n\nBefore we dive into my specific homelab, we should cover what a homelab is for those who have never heard the term. It's a very broad inclusive term that refers to some sort of setup in your house that you can use to tinker, mess around with software or hardware, and generally experiment in the safe confines of your own home and network. This homelab can be as tiny as a single [Raspberry Pi](https://www.raspberrypi.com/products/) or old laptop, to something as big as a [Home Data Center](https://www.reddit.com/r/HomeDataCenter/). The foundational concept is the same, however, it's some place at home to be able to mess around with tools and technologies for the purposes of learning and fun. The great thing is that you don't have to have a lot of money to build a lot of infrastructure, you can easily use an old machine you have lying around.\n\n## What can I do with a homelab?\n\nYou can do a lot with a homelab. Anything you want that your hardware can handle, which is actually probably more than you think. Raspberry Pi's are surprisingly capable little devices, and even really old hardware can run a lot of open source software on Linux. There are so many common homelab projects and ideas you can find on the internet. A few include:\n\n- Setting up [Pi-hole](https://pi-hole.net/) for network-wide adblocking\n- Running a [Plex](https://www.plex.tv/) media server to host your own media\n- Set up a Raspberry Pi with [RetroPie](https://retropie.org.uk/) for retro gaming\n- Home automation with [Home Assistant](https://www.home-assistant.io/) or [Homebridge](https://homebridge.io/)\n- Custom code you write yourself to do whatever you'd like!\n\nThere are so many other things you can do, that list barely scratches the surface of the possibilities. Just find something that sounds cool and get started. There are likely even tutorials that walk you through it!\n\n## My homelab hardware\n\n![My homelab](/img/posts/homelab/rack.jpg)\n\nThis is my current homelab. I've been working on my homelab for a while, and this is by no means what I started out with. If you're interested in having a homelab, make sure you try your best to not constantly compare yours to others, because it's a slippery slope of feeling like you \"need\" more. (trust me, browsing [r/homelab](https://www.reddit.com/r/homelab) often leaves me wanting to buy way more hardware, so I'm constantly needing to resist that urge) So with that out of the way, here's the hardware I have in my homelab server rack from top to bottom:\n\n1. StarTech 25U Open Frame Rack\n2. 1U Brush Panel (makes things look nice with cables coming from the back)\n3. Ubiquiti Dream Machine Pro\n4. Ubiquiti Network Video Recorder\n5. 24 Port Patch Panel\n6. Ubiquiti Switch 24 Port with Power over Ethernet\n7. 24 Port Patch Panel\n8. Raspberry Pi 1U Rackmount with a Pi 3B+ and a Pi 4B+\n9. A few blanking panels & shelf holding my cable modem\n10. Dell PowerEdge R720 2U Rackmount server\n11. Synology DS920+ NAS\n12. StarTech Rackmount Power Strip\n13. Tripp Lite 300W 1U UPS\n14. Tripp Lite 900W 2U UPS\n\nLet's go through the above.\n\n### Ubiquiti Networking\n\n![Ubiquiti](/img/posts/homelab/ubiquiti.jpg)\n\nAll of the Ubiquiti gear is the backbone of my home network. The UDM Pro is my router that provides firewall, VLANs, and more. I love this device and it was actually the first thing that started getting me interested in homelabbing. My Switch then connects all the rest of my hardwired devices such as the server, NAS, and my wireless access points and security cameras. That's why I have a PoE (power over ethernet) switch, because that's required for powering my APs and cameras. My Ubiquiti security cameras throughout my house record to the UNVR so I have all my recordings and data locally in my basement rather than in the cloud.\n\n### Computing Hardware\n\n![Computing Hardware](/img/posts/homelab/compute.jpg)\n\nFirst I have my two Raspberry Pi devices. They're not currently plugged in since I moved their workloads onto my server recently, but once I have another need for them I'll plug them back in. I don't use their power cords because they each have a PoE \"hat\" which is a little add-on board that makes the Pi able to be powered over ethernet. Previously one was running Pi-hole, and the other was running Hoobs, a HomeBridge platform.\n\nI also have my Synology NAS (network attached storage) which has two 4 TB hard drives in it currently. (I'll be adding to it when I am getting close to the storage limit) This NAS hosts my media for my Plex server as well as a lot of backups of PCs and my server virtual machines.\n\nFinally I've got my Dell R720 server. I love this server, I bought it used on Ebay, and have loved using it ever since. It has 192 GB of RAM and a Xeon E5-2630 v2 CPU, and it's running Proxmox for virtualizing. It's got more than enough power to host the many services I've put on it so far, and there's plenty of room for more. I also have eight used 2 TB hard drives I bought on Ebay in this server which are used as the server local storage.\n\nThese devices are definitely more than enough compute power for what I use currently. Eventually as I add more services I may outgrow my current hardware, and then I may acquire a little more hardware. The nice thing is the used market for these devices is thriving and can be a very affordable way to acquire this hardware.\n\n## Services\n\n![Shipping Containers](/img/posts/homelab/containers.jpg)\n\nI run a variety of services in my homelab, almost all of it on my Dell server. Some I run as dedicated VMs, and others I run as docker containers in a Docker VM. There are so many ways to host these services, so I enjoy messing around with many of those methods. Here's a list in no particular order of the services I'm running in my homelab and a short description of what it's for.\n\n- [Pi-hole](https://pi-hole.net/): Whole home adblocking\n- [Hoobs](https://hoobs.com/): HomeBridge which allows me to use non-HomeKit devices with Apple's HomeKit\n- [GitHub Actions Self-Hosted Runner](https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners): I use this to build and deploy my custom homelab code with GitHub Actions\n- [Uptime Kuma](https://github.com/louislam/uptime-kuma): A status page to monitor my homelab services\n- [Heimdall](https://github.com/linuxserver/Heimdall): A homelab dashboard linking to all my services\n- [Plex](https://www.plex.tv/): A self hosted media server\n- [Portainer](https://github.com/portainer/portainer): A nice UI to monitor and manage my docker containers\n- [Traefik](https://github.com/traefik/traefik): Local reverse proxy which allows me to have SSL certificates for my self-hosted services\n- [Pterodactyl](https://pterodactyl.io/): A game server panel which allows me to spin up game servers for any game like Minecraft or Valheim\n- [Grafana](https://grafana.com/): A tool to build dashboards with metrics and for searching logs across all my services\n- Custom Code: I have a bunch of custom code I've written in the form of Slack bots, scripts, and other things that do whatever I want.\n\nThe fun thing about homelabs is you can run whatever you want to experiment with. While I currently run most of my stuff as Docker containers on a single Docker VM, I am planning to spin up a Kubernetes cluster and migrate my services to that so I can distribute the load across multiple nodes as opposed to throwing everything on one big Docker VM. That's just one item on my list, there are so many cool open source projects and technologies to mess around with, and it's as simple as just spinning up a VM or container for it and playing around. That's where the true fun of a homelab lies.\n\n## Conclusion\n\nThis is the state of my homelab at the beginning of 2023. Honestly I'm super excited to see where it'll be in a year or two. Maybe there's enough changes that I end up making this a yearly blog post to go over where my homelab is currently. I highly recommend that everyone who likes technology and messing around with software or hardware should start their own homelab. As I stated before, you can absolutely do a ton without spending a lot of money. Just use an old laptop or Raspberry Pi that's gathering dust. Use resources like [Reddit](https://www.reddit.com/r/homelab/) or YouTube channels like [TechnoTim](https://www.youtube.com/@TechnoTim) or [Jeff Geerling](https://www.youtube.com/@JeffGeerling) to get ideas, follow tutorials, or just enjoy their content. Or you can just mess around yourself and make a bunch of mistakes. It's a safe place to do that. And most of all just have a great time.","src/content/blog/homelab.md","7949b4fbc04c7a9c",{"html":150,"metadata":151},"\u003Cp>I have a variety of hobbies, but the most obvious one is playing around with fun technologies. This applies not only to software, which I obviously write for a living and for enjoyment, but also to hardware. Ever since I took apart my parents’ VHS player to see how it worked (RIP that VHS player 🪦) I have loved tinkering with hardware, and have since then built multiple PCs, wired my home for ethernet, installed security cameras, and more. The hardware projects I’ve most recently spent my time doing has been assembling my homelab in my basement, and that’s what this post is about.\u003C/p>\n\u003Ch2 id=\"what-is-a-homelab\">What is a homelab?\u003C/h2>\n\u003Cp>Before we dive into my specific homelab, we should cover what a homelab is for those who have never heard the term. It’s a very broad inclusive term that refers to some sort of setup in your house that you can use to tinker, mess around with software or hardware, and generally experiment in the safe confines of your own home and network. This homelab can be as tiny as a single \u003Ca href=\"https://www.raspberrypi.com/products/\">Raspberry Pi\u003C/a> or old laptop, to something as big as a \u003Ca href=\"https://www.reddit.com/r/HomeDataCenter/\">Home Data Center\u003C/a>. The foundational concept is the same, however, it’s some place at home to be able to mess around with tools and technologies for the purposes of learning and fun. The great thing is that you don’t have to have a lot of money to build a lot of infrastructure, you can easily use an old machine you have lying around.\u003C/p>\n\u003Ch2 id=\"what-can-i-do-with-a-homelab\">What can I do with a homelab?\u003C/h2>\n\u003Cp>You can do a lot with a homelab. Anything you want that your hardware can handle, which is actually probably more than you think. Raspberry Pi’s are surprisingly capable little devices, and even really old hardware can run a lot of open source software on Linux. There are so many common homelab projects and ideas you can find on the internet. A few include:\u003C/p>\n\u003Cul>\n\u003Cli>Setting up \u003Ca href=\"https://pi-hole.net/\">Pi-hole\u003C/a> for network-wide adblocking\u003C/li>\n\u003Cli>Running a \u003Ca href=\"https://www.plex.tv/\">Plex\u003C/a> media server to host your own media\u003C/li>\n\u003Cli>Set up a Raspberry Pi with \u003Ca href=\"https://retropie.org.uk/\">RetroPie\u003C/a> for retro gaming\u003C/li>\n\u003Cli>Home automation with \u003Ca href=\"https://www.home-assistant.io/\">Home Assistant\u003C/a> or \u003Ca href=\"https://homebridge.io/\">Homebridge\u003C/a>\u003C/li>\n\u003Cli>Custom code you write yourself to do whatever you’d like!\u003C/li>\n\u003C/ul>\n\u003Cp>There are so many other things you can do, that list barely scratches the surface of the possibilities. Just find something that sounds cool and get started. There are likely even tutorials that walk you through it!\u003C/p>\n\u003Ch2 id=\"my-homelab-hardware\">My homelab hardware\u003C/h2>\n\u003Cp>\u003Cimg src=\"/img/posts/homelab/rack.jpg\" alt=\"My homelab\">\u003C/p>\n\u003Cp>This is my current homelab. I’ve been working on my homelab for a while, and this is by no means what I started out with. If you’re interested in having a homelab, make sure you try your best to not constantly compare yours to others, because it’s a slippery slope of feeling like you “need” more. (trust me, browsing \u003Ca href=\"https://www.reddit.com/r/homelab\">r/homelab\u003C/a> often leaves me wanting to buy way more hardware, so I’m constantly needing to resist that urge) So with that out of the way, here’s the hardware I have in my homelab server rack from top to bottom:\u003C/p>\n\u003Col>\n\u003Cli>StarTech 25U Open Frame Rack\u003C/li>\n\u003Cli>1U Brush Panel (makes things look nice with cables coming from the back)\u003C/li>\n\u003Cli>Ubiquiti Dream Machine Pro\u003C/li>\n\u003Cli>Ubiquiti Network Video Recorder\u003C/li>\n\u003Cli>24 Port Patch Panel\u003C/li>\n\u003Cli>Ubiquiti Switch 24 Port with Power over Ethernet\u003C/li>\n\u003Cli>24 Port Patch Panel\u003C/li>\n\u003Cli>Raspberry Pi 1U Rackmount with a Pi 3B+ and a Pi 4B+\u003C/li>\n\u003Cli>A few blanking panels &#x26; shelf holding my cable modem\u003C/li>\n\u003Cli>Dell PowerEdge R720 2U Rackmount server\u003C/li>\n\u003Cli>Synology DS920+ NAS\u003C/li>\n\u003Cli>StarTech Rackmount Power Strip\u003C/li>\n\u003Cli>Tripp Lite 300W 1U UPS\u003C/li>\n\u003Cli>Tripp Lite 900W 2U UPS\u003C/li>\n\u003C/ol>\n\u003Cp>Let’s go through the above.\u003C/p>\n\u003Ch3 id=\"ubiquiti-networking\">Ubiquiti Networking\u003C/h3>\n\u003Cp>\u003Cimg src=\"/img/posts/homelab/ubiquiti.jpg\" alt=\"Ubiquiti\">\u003C/p>\n\u003Cp>All of the Ubiquiti gear is the backbone of my home network. The UDM Pro is my router that provides firewall, VLANs, and more. I love this device and it was actually the first thing that started getting me interested in homelabbing. My Switch then connects all the rest of my hardwired devices such as the server, NAS, and my wireless access points and security cameras. That’s why I have a PoE (power over ethernet) switch, because that’s required for powering my APs and cameras. My Ubiquiti security cameras throughout my house record to the UNVR so I have all my recordings and data locally in my basement rather than in the cloud.\u003C/p>\n\u003Ch3 id=\"computing-hardware\">Computing Hardware\u003C/h3>\n\u003Cp>\u003Cimg src=\"/img/posts/homelab/compute.jpg\" alt=\"Computing Hardware\">\u003C/p>\n\u003Cp>First I have my two Raspberry Pi devices. They’re not currently plugged in since I moved their workloads onto my server recently, but once I have another need for them I’ll plug them back in. I don’t use their power cords because they each have a PoE “hat” which is a little add-on board that makes the Pi able to be powered over ethernet. Previously one was running Pi-hole, and the other was running Hoobs, a HomeBridge platform.\u003C/p>\n\u003Cp>I also have my Synology NAS (network attached storage) which has two 4 TB hard drives in it currently. (I’ll be adding to it when I am getting close to the storage limit) This NAS hosts my media for my Plex server as well as a lot of backups of PCs and my server virtual machines.\u003C/p>\n\u003Cp>Finally I’ve got my Dell R720 server. I love this server, I bought it used on Ebay, and have loved using it ever since. It has 192 GB of RAM and a Xeon E5-2630 v2 CPU, and it’s running Proxmox for virtualizing. It’s got more than enough power to host the many services I’ve put on it so far, and there’s plenty of room for more. I also have eight used 2 TB hard drives I bought on Ebay in this server which are used as the server local storage.\u003C/p>\n\u003Cp>These devices are definitely more than enough compute power for what I use currently. Eventually as I add more services I may outgrow my current hardware, and then I may acquire a little more hardware. The nice thing is the used market for these devices is thriving and can be a very affordable way to acquire this hardware.\u003C/p>\n\u003Ch2 id=\"services\">Services\u003C/h2>\n\u003Cp>\u003Cimg src=\"/img/posts/homelab/containers.jpg\" alt=\"Shipping Containers\">\u003C/p>\n\u003Cp>I run a variety of services in my homelab, almost all of it on my Dell server. Some I run as dedicated VMs, and others I run as docker containers in a Docker VM. There are so many ways to host these services, so I enjoy messing around with many of those methods. Here’s a list in no particular order of the services I’m running in my homelab and a short description of what it’s for.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://pi-hole.net/\">Pi-hole\u003C/a>: Whole home adblocking\u003C/li>\n\u003Cli>\u003Ca href=\"https://hoobs.com/\">Hoobs\u003C/a>: HomeBridge which allows me to use non-HomeKit devices with Apple’s HomeKit\u003C/li>\n\u003Cli>\u003Ca href=\"https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners\">GitHub Actions Self-Hosted Runner\u003C/a>: I use this to build and deploy my custom homelab code with GitHub Actions\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/louislam/uptime-kuma\">Uptime Kuma\u003C/a>: A status page to monitor my homelab services\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/linuxserver/Heimdall\">Heimdall\u003C/a>: A homelab dashboard linking to all my services\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.plex.tv/\">Plex\u003C/a>: A self hosted media server\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/portainer/portainer\">Portainer\u003C/a>: A nice UI to monitor and manage my docker containers\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/traefik/traefik\">Traefik\u003C/a>: Local reverse proxy which allows me to have SSL certificates for my self-hosted services\u003C/li>\n\u003Cli>\u003Ca href=\"https://pterodactyl.io/\">Pterodactyl\u003C/a>: A game server panel which allows me to spin up game servers for any game like Minecraft or Valheim\u003C/li>\n\u003Cli>\u003Ca href=\"https://grafana.com/\">Grafana\u003C/a>: A tool to build dashboards with metrics and for searching logs across all my services\u003C/li>\n\u003Cli>Custom Code: I have a bunch of custom code I’ve written in the form of Slack bots, scripts, and other things that do whatever I want.\u003C/li>\n\u003C/ul>\n\u003Cp>The fun thing about homelabs is you can run whatever you want to experiment with. While I currently run most of my stuff as Docker containers on a single Docker VM, I am planning to spin up a Kubernetes cluster and migrate my services to that so I can distribute the load across multiple nodes as opposed to throwing everything on one big Docker VM. That’s just one item on my list, there are so many cool open source projects and technologies to mess around with, and it’s as simple as just spinning up a VM or container for it and playing around. That’s where the true fun of a homelab lies.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>This is the state of my homelab at the beginning of 2023. Honestly I’m super excited to see where it’ll be in a year or two. Maybe there’s enough changes that I end up making this a yearly blog post to go over where my homelab is currently. I highly recommend that everyone who likes technology and messing around with software or hardware should start their own homelab. As I stated before, you can absolutely do a ton without spending a lot of money. Just use an old laptop or Raspberry Pi that’s gathering dust. Use resources like \u003Ca href=\"https://www.reddit.com/r/homelab/\">Reddit\u003C/a> or YouTube channels like \u003Ca href=\"https://www.youtube.com/@TechnoTim\">TechnoTim\u003C/a> or \u003Ca href=\"https://www.youtube.com/@JeffGeerling\">Jeff Geerling\u003C/a> to get ideas, follow tutorials, or just enjoy their content. Or you can just mess around yourself and make a bunch of mistakes. It’s a safe place to do that. And most of all just have a great time.\u003C/p>",{"headings":152,"localImagePaths":174,"remoteImagePaths":175,"frontmatter":176,"imagePaths":179},[153,156,159,162,165,168,171],{"depth":30,"slug":154,"text":155},"what-is-a-homelab","What is a homelab?",{"depth":30,"slug":157,"text":158},"what-can-i-do-with-a-homelab","What can I do with a homelab?",{"depth":30,"slug":160,"text":161},"my-homelab-hardware","My homelab hardware",{"depth":75,"slug":163,"text":164},"ubiquiti-networking","Ubiquiti Networking",{"depth":75,"slug":166,"text":167},"computing-hardware","Computing Hardware",{"depth":30,"slug":169,"text":170},"services","Services",{"depth":30,"slug":172,"text":173},"conclusion","Conclusion",[],[],{"title":139,"published":17,"description":140,"date":177,"tags":178,"cover_image":145},["Date","2023-01-21T00:00:00.000Z"],[136,143,144],[],"homelab.md","javascript-framework-war",{"id":181,"data":183,"body":192,"filePath":193,"digest":194,"rendered":195,"legacyId":214},{"title":184,"description":185,"date":186,"published":17,"tags":187,"cover_image":191},"Stop Fighting About JavaScript Frameworks","The world of JavaScript in the last few years has devolved into a battleground over which framework/lib is the winner",["Date","2018-11-20T00:00:00.000Z"],[188,189,190],"javascript","frameworks","stateofjs","/img/stateofjs.png","The [State of JS](https://stateofjs.com/) survey is live, and with it comes the usual tweets about this or that framework \"dominating\" others, one or another \"has been destroyed\", it goes on and on. Even the [survey itself says](https://2018.stateofjs.com/front-end-frameworks/overview/):\n\n> The front-end remains the key battleground for JavaScript. But now that the dust has cleared, it's starting to look like only two combatants are left standing...\n\nIt's disappointing to say the least that the JavaScript community that I love so much has turned into one giant argument about who's better, cooler, in other words, the \"winner\".\n\n---\n\n![React vs Angular vs Vue](/img/posts/javascript-framework-war/frameworks.png)\n\n## React vs Angular vs Vue vs...\n\nThis is the tale as old as time. I can't tell you how many articles I've seen and read about why React is better, Angular is better, Vue is better, Vanilla JS is better, etc. There is the full spectrum of these posts. From being very fair and open minded by addressing the best and worst of each framework and inviting the user to decide what works for them, to being downright biased and essentially saying Framework X sucks and Framework Y is the best, with little offered for reasoning.\n\nAll this serves to do is foster a culture of superiority and gatekeeping. You're not a real developer because you use the inferior framework. Unless you're using the hottest framework, you're not worth hiring at my hip and happening startup.\n\n---\n\n![Developers](/img/posts/javascript-framework-war/devs.png)\n\n## It Hurts Everyone\n\nSaying and promoting ideas like this is damaging to the community as a whole. Take the State of JS survey for example: The number of respondents was approximately 20,000 developers. That's very small representation compared to the industry. Stack Overflow's survey had over 100,000 respondents.\n\nThere is also something to be said about the fact that the makers of the survey are React library authors with heavy React developer followings. So naturally simply due to the audience they cater to, there will be a hefty amount of React developers responding to and sharing the survey amongst themselves.\n\nThe problem with this is that this survey is being presented as a definitive view of JavaScript in 2018. With such a limited and focused sample size, the results are likely skewed towards certain groups. This is problematic for developers who take those results and show them to their boss saying \"look at these results, Angular is dead, we need to migrate all of our code to React or Vue\". I've literally had discussions with people to that effect. It's not based on what the _best_ option is, but rather the most popular according to one small survey or blog claiming to be the definitive view of the JavaScript world.\n\nThis is harmful to everyone, because companies and developers will spend a lot of time doing what someone views as the most popular thing to do rather than the option that might be best for the company. For example, rewriting an app from Angular.js to React despite the fact that an Angular.js to Angular transition may be faster and easier due to the concepts and fundamentals being similar. I've also heard of a developer being hired at a startup and telling them that Angular is the best framework and they need to rewrite their entire React app in Angular, costing months in time and money.\n\n---\n\n![Holding Hands](/img/posts/javascript-framework-war/hands.png)\n\n## Stop the Hot Takes\n\nI'm personally over all the pundits proclaiming why one framework is better than another, or declaring a winner of the \"framework war\". It is, in my opinion, a form of gatekeeping that we as a community don't need. Why does there have to be a war? I would argue that there's not, or at least shouldn't be, a war. Especially in 2018, when React, Angular, Vue, Aurelia, etc. are all excellent modern frameworks with amazing reasons to use each.\n\nUse what makes you happy. If it's React, Angular, Vue, something completely different, if it is enjoyable and helps you to be more productive, then it's a good thing. Let's please stop using these surveys and articles to try to convince everyone else that your choice is right and theirs is wrong. Let's love each other and love our own choice.","src/content/blog/javascript-framework-war.md","e074f2bfbebd48f8",{"html":196,"metadata":197},"\u003Cp>The \u003Ca href=\"https://stateofjs.com/\">State of JS\u003C/a> survey is live, and with it comes the usual tweets about this or that framework “dominating” others, one or another “has been destroyed”, it goes on and on. Even the \u003Ca href=\"https://2018.stateofjs.com/front-end-frameworks/overview/\">survey itself says\u003C/a>:\u003C/p>\n\u003Cblockquote>\n\u003Cp>The front-end remains the key battleground for JavaScript. But now that the dust has cleared, it’s starting to look like only two combatants are left standing…\u003C/p>\n\u003C/blockquote>\n\u003Cp>It’s disappointing to say the least that the JavaScript community that I love so much has turned into one giant argument about who’s better, cooler, in other words, the “winner”.\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cimg src=\"/img/posts/javascript-framework-war/frameworks.png\" alt=\"React vs Angular vs Vue\">\u003C/p>\n\u003Ch2 id=\"react-vs-angular-vs-vue-vs\">React vs Angular vs Vue vs…\u003C/h2>\n\u003Cp>This is the tale as old as time. I can’t tell you how many articles I’ve seen and read about why React is better, Angular is better, Vue is better, Vanilla JS is better, etc. There is the full spectrum of these posts. From being very fair and open minded by addressing the best and worst of each framework and inviting the user to decide what works for them, to being downright biased and essentially saying Framework X sucks and Framework Y is the best, with little offered for reasoning.\u003C/p>\n\u003Cp>All this serves to do is foster a culture of superiority and gatekeeping. You’re not a real developer because you use the inferior framework. Unless you’re using the hottest framework, you’re not worth hiring at my hip and happening startup.\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cimg src=\"/img/posts/javascript-framework-war/devs.png\" alt=\"Developers\">\u003C/p>\n\u003Ch2 id=\"it-hurts-everyone\">It Hurts Everyone\u003C/h2>\n\u003Cp>Saying and promoting ideas like this is damaging to the community as a whole. Take the State of JS survey for example: The number of respondents was approximately 20,000 developers. That’s very small representation compared to the industry. Stack Overflow’s survey had over 100,000 respondents.\u003C/p>\n\u003Cp>There is also something to be said about the fact that the makers of the survey are React library authors with heavy React developer followings. So naturally simply due to the audience they cater to, there will be a hefty amount of React developers responding to and sharing the survey amongst themselves.\u003C/p>\n\u003Cp>The problem with this is that this survey is being presented as a definitive view of JavaScript in 2018. With such a limited and focused sample size, the results are likely skewed towards certain groups. This is problematic for developers who take those results and show them to their boss saying “look at these results, Angular is dead, we need to migrate all of our code to React or Vue”. I’ve literally had discussions with people to that effect. It’s not based on what the \u003Cem>best\u003C/em> option is, but rather the most popular according to one small survey or blog claiming to be the definitive view of the JavaScript world.\u003C/p>\n\u003Cp>This is harmful to everyone, because companies and developers will spend a lot of time doing what someone views as the most popular thing to do rather than the option that might be best for the company. For example, rewriting an app from Angular.js to React despite the fact that an Angular.js to Angular transition may be faster and easier due to the concepts and fundamentals being similar. I’ve also heard of a developer being hired at a startup and telling them that Angular is the best framework and they need to rewrite their entire React app in Angular, costing months in time and money.\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cimg src=\"/img/posts/javascript-framework-war/hands.png\" alt=\"Holding Hands\">\u003C/p>\n\u003Ch2 id=\"stop-the-hot-takes\">Stop the Hot Takes\u003C/h2>\n\u003Cp>I’m personally over all the pundits proclaiming why one framework is better than another, or declaring a winner of the “framework war”. It is, in my opinion, a form of gatekeeping that we as a community don’t need. Why does there have to be a war? I would argue that there’s not, or at least shouldn’t be, a war. Especially in 2018, when React, Angular, Vue, Aurelia, etc. are all excellent modern frameworks with amazing reasons to use each.\u003C/p>\n\u003Cp>Use what makes you happy. If it’s React, Angular, Vue, something completely different, if it is enjoyable and helps you to be more productive, then it’s a good thing. Let’s please stop using these surveys and articles to try to convince everyone else that your choice is right and theirs is wrong. Let’s love each other and love our own choice.\u003C/p>",{"headings":198,"localImagePaths":208,"remoteImagePaths":209,"frontmatter":210,"imagePaths":213},[199,202,205],{"depth":30,"slug":200,"text":201},"react-vs-angular-vs-vue-vs","React vs Angular vs Vue vs…",{"depth":30,"slug":203,"text":204},"it-hurts-everyone","It Hurts Everyone",{"depth":30,"slug":206,"text":207},"stop-the-hot-takes","Stop the Hot Takes",[],[],{"title":184,"published":17,"description":185,"date":211,"tags":212,"cover_image":191},["Date","2018-11-20T00:00:00.000Z"],[188,189,190],[],"javascript-framework-war.md","my-github-graveyard",{"id":215,"data":217,"body":224,"filePath":225,"digest":226,"rendered":227,"legacyId":258},{"title":218,"description":219,"date":220,"published":91,"tags":221,"cover_image":223},"RIP Side Projects","Here lies my dead side projects. They lived quickly, taught excellently, and died quietly. This is my GitHub Graveyard.",["Date","2018-08-14T00:00:00.000Z"],[222,53,94],"graveyard","/img/graveyard.png","In my previous post, [Epic Development Environment using Windows Subsystem for Linux](/posts/epic-dev-environment-wsl), I opened with my reasoning for buying a new laptop: the many side projects I had going on. Unfortunately, over the years, many of those side projects languished into obscurity and were never looked at again. Recently the venerable [Isaac Lyman](https://twitter.com/isaacandsuch) published the blog post [GitHub Graveyards: I'll show you mine...](https://dev.to/isaacandsuch/github-graveyards-ill-show-you-mine-49lh) and went through all the side projects that fizzled and died for various reasons, why he built them/what he learned from them.\n\nI loved the idea, and it felt like a great way to memorialize those dead projects that benefitted me in so many ways. With that in mind, I present to you my GitHub Graveyard.\n\n### [Default Stylesheet](https://github.com/jbw91/default-stylesheet)\n\n_A beautifully simple default CSS stylesheet_\n\nThis was one of my first ever repositories on GitHub. I wanted to make a design system myself, ala Bootstrap at the time, but have it be simply providing default styles to standard HTML controls and elements as opposed to applying classes to everything. I created an incredibly simple design to the basic elements (buttons, inputs, selects, etc.) and created a stylesheet that one could simply link to on their unstyled site and get immediate benefit.\n\nI used the stylesheet myself on a couple of small things before I stopped using it in favor of the many obviously superior CSS libraries.\n\n**What I Learned:**\n\n- I learned a great deal about styling from scratch with CSS, as I hadn't done much with that before then. Most of my experience was using stuff others had built.\n- This was my first real open source thing I built that I wanted others to be able to use, even though I highly doubt anyone other than myself ever even saw it.\n\n### [Barebones Grid](https://github.com/jbw91/barebones-grid)\n\n_A simple responsive grid-based CSS framework_\n\nComing off of the high of building my first open source project, I quickly moved into once again building something Bootstrap and others had already built: A grid system. On this project, in fact, I shamelessly walked through the Bootstrap code itself and followed its example to essentially rebuild the same type of grid as a standalone library.\n\nAt the end I had a working responsive grid (practically identical in functionality to Bootstrap) and even wrote documentation on how to use it, and released it to [Bower](https://bower.io/). It died because I never used it, even in my own projects. I did, however, get a couple of stars on GitHub, which was another first for me!\n\n**What I Learned:**\n\n- I learned a great deal about [Less](http://lesscss.org/), and used that knowledge quite a bit in my job where we used Less extensively.\n- Releasing the library on Bower was the first time I had ever released anything I wrote on a package manager, which I was stoked about.\n- One other thing I learned was that there's no shame in creating a clone of something else that someone else wrote in order to learn something new.\n\n### [Project Tracker](https://github.com/jbw91/project-tracker)\n\n_A hybrid app built on Ionic for the purpose of tracking and managing projects_\n\nAh, my first [Ionic](https://ionicframework.com/) application. This was back on Ionic v1. It was love at first sight, a love that continues to this day. I was building a project at work to track department priorities and project timelines, and thought it would be fun to make a slimmed down version of the project as a mobile app. I had just attended [ng-conf](https://www.ng-conf.org/) in 2015 and learned a bunch about Ionic, so I was stoked to be able to build native apps with the web technologies I already knew.\n\nThis project fizzled out quickly because the design I was attempting was complicated enough that I quickly got frustrated and wanted to try something a little more simple.\n\n**What I Learned:**\n\n- This was my first time building an Ionic app from scratch, as well as working with Cordova.\n- I learned a great deal about [SQLite](https://www.sqlite.org/index.html), and how different it was, being an embedded database instead of a hosted database which was all I had used at that point.\n\n### [Cash Tracker](https://github.com/jbw91/cash-tracker)\n\n_A simple cash income/expense tracker hybrid Ionic app_\n\nThis was the project I jumped on to after losing steam on Project Tracker. A much more simple design using mostly basic Ionic components. I also used [Chart.js](https://www.chartjs.org/) for the first time, which was quite fun and a good learning experience. I completed most of what I wanted to accomplish in the app before moving on to other projects.\n\n**What I Learned:**\n\n- I learned a great deal more about Ionic on this project, due to the fact that I worked on it longer and used more features of the framework.\n- Using Chart.js was a great learning experience with regards to visualizations on the web.\n- I actually packaged this app and sideloaded it onto my device to learn how to do that as well as show people how cool Ionic was.\n\n### [Simple LMS API](https://github.com/jbw91/simple-lms-api)\n\n_A Node.js and Express API for the Simple LMS project_\n\nI was still in school at BYU during 2015, and they had an in-house Learning Management System (LMS) they built called Learning Suite. It was an atrocious experience. Slow, incredibly buggy, and everyone hated it when it came out. (it got vastly better over time, and I'm sure it's totally fine now) Due to this annoyance, however, I pledged to build a better LMS! As you can see from this project, I worked on the backend of the project for about a month before abandoning it.\n\nThis project was one of my better graveyard projects due to the sheer number of things I learned in the process. First, it was my first major foray into Node.js with [Express](https://expressjs.com/) as an API. Second, I used [Docker](https://www.docker.com/) with [Docker Compose](https://docs.docker.com/compose/) to spin up containers with the API linked to my local code with live reload and a MySQL database. I loved how I didn't have to install that whole environment locally, but could simply spin up and destroy containers as I wanted.\n\nOn the other hand, I also made tons of rookie mistakes. For example, I used simple string concatenation from params passed in by the user to build SQL queries instead of utilizing [parameterized SQL](https://blog.codinghorror.com/give-me-parameterized-sql-or-give-me-death/). Yep. I did that. It's [immortalized for all to see](https://github.com/jbw91/simple-lms-api/blob/development/app/api/user/controller.js). Look upon it and weep for my n00b idiocy. :)\n\n**What I Learned:**\n\n- This was my start into using Docker, something I now use frequently in my various projects.\n- I gained a great love for Node.js, and have continued using it throughout the years for various projects.\n- I learned later on that I committed egregious sins against my name as a developer. (SQL Injection vulnerabilities)\n\n### [ChatHub](https://github.com/jbw91/chathub)\n\nThis was an incredibly fun project. I loved using web technologies for creating mobile apps, and got super excited at the prospect of doing that for desktop apps too. Enter [Electron](https://electronjs.org/). This has become one of my favorite technologies, something that I use to this day. I wanted to build a desktop application, so I decided to build a [Firebase](https://firebase.google.com/) chat app. (something that most web devs have done at some point in their career)\n\nI used Angular.js's [Material Design library](https://material.angularjs.org/latest/) and had a ton of fun building a chat app hosted in Electron. I ended up using very little of Electron itself ironically in this project, I simply loaded up my app in an Electron window, but I thought I was a full-on Electron developer! Since then, I've gotten _substantially_ more knowledgeable about Electron and have been working with Electron professionally for the last year and a half.\n\n**What I Learned:**\n\n- I worked with Firebase and their realtime database product, which was a really fun experience. Firebase had been recently acquired by Google, so it was a fairly big thing at the time.\n- I learned how cool Electron was, even though I didn't necessarily do very much at all with the platform itself during that project.\n\n### Scheduling Hero [API](https://github.com/jbw91/scheduling-hero-api) & [Web](https://github.com/jbw91/scheduling-hero-web)\n\nAfter doing many projects on my own, I wanted to host a little \"Hack Night\" once a month at my house with some friends. I started \"Scheduling Hero\" (the name was temporary but we never thought of anything better) which was a project to help manage availability between multiple people, and help schedule a time to get together, including sending out calendar appointments to the attendees.\n\nThis project lasted longer than most of my side projects, because I had a couple people working on it with me, and it was a fun social gathering where we would work together. Sadly I never ended up finishing it, as we all got busy with work and stopped doing those regular hack nights. It was a fun project, however, and I learned a lot from it.\n\n**What I Learned:**\n\n- I used [nodemailer](https://nodemailer.com/about/) with [mailgun](https://www.mailgun.com/), a great service that is free for up to 10,000 emails per month, which is way more than I needed for development.\n- For authentication, I used Google's OAuth2 authentication service. I had lots of experience with OAuth2 on the client side, but this was my first time implementing Google's OAuth2 services on the backend.\n- I used [MongoDB](https://www.mongodb.com/) with [Mongoose](http://mongoosejs.com/) for the database. I had had lots of experience with MongoDB, but this was my first time using Mongoose, which I rather enjoyed.\n\n---\n\nThere are a few other projects currently that have been sitting in my GitHub account for a bit, but I'm not ready to call time of death yet because I still think I'm going to go back and continue them. Hopefully I do continue working on them, but I may end up writing a part 2 of this post a year from now. As for these projects, I appreciate all I learned from having done them, even if I haven't touched them in years. May they Rest in Peace.","src/content/blog/my-github-graveyard.md","3c3289d729eae116",{"html":228,"metadata":229},"\u003Cp>In my previous post, \u003Ca href=\"/posts/epic-dev-environment-wsl\">Epic Development Environment using Windows Subsystem for Linux\u003C/a>, I opened with my reasoning for buying a new laptop: the many side projects I had going on. Unfortunately, over the years, many of those side projects languished into obscurity and were never looked at again. Recently the venerable \u003Ca href=\"https://twitter.com/isaacandsuch\">Isaac Lyman\u003C/a> published the blog post \u003Ca href=\"https://dev.to/isaacandsuch/github-graveyards-ill-show-you-mine-49lh\">GitHub Graveyards: I’ll show you mine…\u003C/a> and went through all the side projects that fizzled and died for various reasons, why he built them/what he learned from them.\u003C/p>\n\u003Cp>I loved the idea, and it felt like a great way to memorialize those dead projects that benefitted me in so many ways. With that in mind, I present to you my GitHub Graveyard.\u003C/p>\n\u003Ch3 id=\"default-stylesheet\">\u003Ca href=\"https://github.com/jbw91/default-stylesheet\">Default Stylesheet\u003C/a>\u003C/h3>\n\u003Cp>\u003Cem>A beautifully simple default CSS stylesheet\u003C/em>\u003C/p>\n\u003Cp>This was one of my first ever repositories on GitHub. I wanted to make a design system myself, ala Bootstrap at the time, but have it be simply providing default styles to standard HTML controls and elements as opposed to applying classes to everything. I created an incredibly simple design to the basic elements (buttons, inputs, selects, etc.) and created a stylesheet that one could simply link to on their unstyled site and get immediate benefit.\u003C/p>\n\u003Cp>I used the stylesheet myself on a couple of small things before I stopped using it in favor of the many obviously superior CSS libraries.\u003C/p>\n\u003Cp>\u003Cstrong>What I Learned:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>I learned a great deal about styling from scratch with CSS, as I hadn’t done much with that before then. Most of my experience was using stuff others had built.\u003C/li>\n\u003Cli>This was my first real open source thing I built that I wanted others to be able to use, even though I highly doubt anyone other than myself ever even saw it.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"barebones-grid\">\u003Ca href=\"https://github.com/jbw91/barebones-grid\">Barebones Grid\u003C/a>\u003C/h3>\n\u003Cp>\u003Cem>A simple responsive grid-based CSS framework\u003C/em>\u003C/p>\n\u003Cp>Coming off of the high of building my first open source project, I quickly moved into once again building something Bootstrap and others had already built: A grid system. On this project, in fact, I shamelessly walked through the Bootstrap code itself and followed its example to essentially rebuild the same type of grid as a standalone library.\u003C/p>\n\u003Cp>At the end I had a working responsive grid (practically identical in functionality to Bootstrap) and even wrote documentation on how to use it, and released it to \u003Ca href=\"https://bower.io/\">Bower\u003C/a>. It died because I never used it, even in my own projects. I did, however, get a couple of stars on GitHub, which was another first for me!\u003C/p>\n\u003Cp>\u003Cstrong>What I Learned:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>I learned a great deal about \u003Ca href=\"http://lesscss.org/\">Less\u003C/a>, and used that knowledge quite a bit in my job where we used Less extensively.\u003C/li>\n\u003Cli>Releasing the library on Bower was the first time I had ever released anything I wrote on a package manager, which I was stoked about.\u003C/li>\n\u003Cli>One other thing I learned was that there’s no shame in creating a clone of something else that someone else wrote in order to learn something new.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"project-tracker\">\u003Ca href=\"https://github.com/jbw91/project-tracker\">Project Tracker\u003C/a>\u003C/h3>\n\u003Cp>\u003Cem>A hybrid app built on Ionic for the purpose of tracking and managing projects\u003C/em>\u003C/p>\n\u003Cp>Ah, my first \u003Ca href=\"https://ionicframework.com/\">Ionic\u003C/a> application. This was back on Ionic v1. It was love at first sight, a love that continues to this day. I was building a project at work to track department priorities and project timelines, and thought it would be fun to make a slimmed down version of the project as a mobile app. I had just attended \u003Ca href=\"https://www.ng-conf.org/\">ng-conf\u003C/a> in 2015 and learned a bunch about Ionic, so I was stoked to be able to build native apps with the web technologies I already knew.\u003C/p>\n\u003Cp>This project fizzled out quickly because the design I was attempting was complicated enough that I quickly got frustrated and wanted to try something a little more simple.\u003C/p>\n\u003Cp>\u003Cstrong>What I Learned:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>This was my first time building an Ionic app from scratch, as well as working with Cordova.\u003C/li>\n\u003Cli>I learned a great deal about \u003Ca href=\"https://www.sqlite.org/index.html\">SQLite\u003C/a>, and how different it was, being an embedded database instead of a hosted database which was all I had used at that point.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"cash-tracker\">\u003Ca href=\"https://github.com/jbw91/cash-tracker\">Cash Tracker\u003C/a>\u003C/h3>\n\u003Cp>\u003Cem>A simple cash income/expense tracker hybrid Ionic app\u003C/em>\u003C/p>\n\u003Cp>This was the project I jumped on to after losing steam on Project Tracker. A much more simple design using mostly basic Ionic components. I also used \u003Ca href=\"https://www.chartjs.org/\">Chart.js\u003C/a> for the first time, which was quite fun and a good learning experience. I completed most of what I wanted to accomplish in the app before moving on to other projects.\u003C/p>\n\u003Cp>\u003Cstrong>What I Learned:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>I learned a great deal more about Ionic on this project, due to the fact that I worked on it longer and used more features of the framework.\u003C/li>\n\u003Cli>Using Chart.js was a great learning experience with regards to visualizations on the web.\u003C/li>\n\u003Cli>I actually packaged this app and sideloaded it onto my device to learn how to do that as well as show people how cool Ionic was.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"simple-lms-api\">\u003Ca href=\"https://github.com/jbw91/simple-lms-api\">Simple LMS API\u003C/a>\u003C/h3>\n\u003Cp>\u003Cem>A Node.js and Express API for the Simple LMS project\u003C/em>\u003C/p>\n\u003Cp>I was still in school at BYU during 2015, and they had an in-house Learning Management System (LMS) they built called Learning Suite. It was an atrocious experience. Slow, incredibly buggy, and everyone hated it when it came out. (it got vastly better over time, and I’m sure it’s totally fine now) Due to this annoyance, however, I pledged to build a better LMS! As you can see from this project, I worked on the backend of the project for about a month before abandoning it.\u003C/p>\n\u003Cp>This project was one of my better graveyard projects due to the sheer number of things I learned in the process. First, it was my first major foray into Node.js with \u003Ca href=\"https://expressjs.com/\">Express\u003C/a> as an API. Second, I used \u003Ca href=\"https://www.docker.com/\">Docker\u003C/a> with \u003Ca href=\"https://docs.docker.com/compose/\">Docker Compose\u003C/a> to spin up containers with the API linked to my local code with live reload and a MySQL database. I loved how I didn’t have to install that whole environment locally, but could simply spin up and destroy containers as I wanted.\u003C/p>\n\u003Cp>On the other hand, I also made tons of rookie mistakes. For example, I used simple string concatenation from params passed in by the user to build SQL queries instead of utilizing \u003Ca href=\"https://blog.codinghorror.com/give-me-parameterized-sql-or-give-me-death/\">parameterized SQL\u003C/a>. Yep. I did that. It’s \u003Ca href=\"https://github.com/jbw91/simple-lms-api/blob/development/app/api/user/controller.js\">immortalized for all to see\u003C/a>. Look upon it and weep for my n00b idiocy. :)\u003C/p>\n\u003Cp>\u003Cstrong>What I Learned:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>This was my start into using Docker, something I now use frequently in my various projects.\u003C/li>\n\u003Cli>I gained a great love for Node.js, and have continued using it throughout the years for various projects.\u003C/li>\n\u003Cli>I learned later on that I committed egregious sins against my name as a developer. (SQL Injection vulnerabilities)\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"chathub\">\u003Ca href=\"https://github.com/jbw91/chathub\">ChatHub\u003C/a>\u003C/h3>\n\u003Cp>This was an incredibly fun project. I loved using web technologies for creating mobile apps, and got super excited at the prospect of doing that for desktop apps too. Enter \u003Ca href=\"https://electronjs.org/\">Electron\u003C/a>. This has become one of my favorite technologies, something that I use to this day. I wanted to build a desktop application, so I decided to build a \u003Ca href=\"https://firebase.google.com/\">Firebase\u003C/a> chat app. (something that most web devs have done at some point in their career)\u003C/p>\n\u003Cp>I used Angular.js’s \u003Ca href=\"https://material.angularjs.org/latest/\">Material Design library\u003C/a> and had a ton of fun building a chat app hosted in Electron. I ended up using very little of Electron itself ironically in this project, I simply loaded up my app in an Electron window, but I thought I was a full-on Electron developer! Since then, I’ve gotten \u003Cem>substantially\u003C/em> more knowledgeable about Electron and have been working with Electron professionally for the last year and a half.\u003C/p>\n\u003Cp>\u003Cstrong>What I Learned:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>I worked with Firebase and their realtime database product, which was a really fun experience. Firebase had been recently acquired by Google, so it was a fairly big thing at the time.\u003C/li>\n\u003Cli>I learned how cool Electron was, even though I didn’t necessarily do very much at all with the platform itself during that project.\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"scheduling-hero-api--web\">Scheduling Hero \u003Ca href=\"https://github.com/jbw91/scheduling-hero-api\">API\u003C/a> &#x26; \u003Ca href=\"https://github.com/jbw91/scheduling-hero-web\">Web\u003C/a>\u003C/h3>\n\u003Cp>After doing many projects on my own, I wanted to host a little “Hack Night” once a month at my house with some friends. I started “Scheduling Hero” (the name was temporary but we never thought of anything better) which was a project to help manage availability between multiple people, and help schedule a time to get together, including sending out calendar appointments to the attendees.\u003C/p>\n\u003Cp>This project lasted longer than most of my side projects, because I had a couple people working on it with me, and it was a fun social gathering where we would work together. Sadly I never ended up finishing it, as we all got busy with work and stopped doing those regular hack nights. It was a fun project, however, and I learned a lot from it.\u003C/p>\n\u003Cp>\u003Cstrong>What I Learned:\u003C/strong>\u003C/p>\n\u003Cul>\n\u003Cli>I used \u003Ca href=\"https://nodemailer.com/about/\">nodemailer\u003C/a> with \u003Ca href=\"https://www.mailgun.com/\">mailgun\u003C/a>, a great service that is free for up to 10,000 emails per month, which is way more than I needed for development.\u003C/li>\n\u003Cli>For authentication, I used Google’s OAuth2 authentication service. I had lots of experience with OAuth2 on the client side, but this was my first time implementing Google’s OAuth2 services on the backend.\u003C/li>\n\u003Cli>I used \u003Ca href=\"https://www.mongodb.com/\">MongoDB\u003C/a> with \u003Ca href=\"http://mongoosejs.com/\">Mongoose\u003C/a> for the database. I had had lots of experience with MongoDB, but this was my first time using Mongoose, which I rather enjoyed.\u003C/li>\n\u003C/ul>\n\u003Chr>\n\u003Cp>There are a few other projects currently that have been sitting in my GitHub account for a bit, but I’m not ready to call time of death yet because I still think I’m going to go back and continue them. Hopefully I do continue working on them, but I may end up writing a part 2 of this post a year from now. As for these projects, I appreciate all I learned from having done them, even if I haven’t touched them in years. May they Rest in Peace.\u003C/p>",{"headings":230,"localImagePaths":252,"remoteImagePaths":253,"frontmatter":254,"imagePaths":257},[231,234,237,240,243,246,249],{"depth":75,"slug":232,"text":233},"default-stylesheet","Default Stylesheet",{"depth":75,"slug":235,"text":236},"barebones-grid","Barebones Grid",{"depth":75,"slug":238,"text":239},"project-tracker","Project Tracker",{"depth":75,"slug":241,"text":242},"cash-tracker","Cash Tracker",{"depth":75,"slug":244,"text":245},"simple-lms-api","Simple LMS API",{"depth":75,"slug":247,"text":248},"chathub","ChatHub",{"depth":75,"slug":250,"text":251},"scheduling-hero-api--web","Scheduling Hero API & Web",[],[],{"title":218,"published":91,"description":219,"date":255,"tags":256,"cover_image":223},["Date","2018-08-14T00:00:00.000Z"],[222,53,94],[],"my-github-graveyard.md","novella",{"id":259,"data":261,"body":269,"filePath":270,"digest":271,"rendered":272,"legacyId":294},{"title":262,"description":263,"date":264,"published":17,"tags":265,"cover_image":268},"Novella","A quick look at my passion project for the last 6 years. A retrospective of my learnings. The good and the bad.",["Date","2025-08-10T00:00:00.000Z"],[266,95,267],"electron","angular","/img/posts/novella/banner.png","I have been looking forward to this post for a long time, but I can finally post it! I've finished my passion project that I've been working on for the last 6 years. Introducing [**Novella**](https://novella.app), the modern, distraction-free writing application.\n\n![Novella](/img/posts/novella/novella.png)\n\n## Why build this?\n\nHonestly, there were a lot of reasons. My initial reason was purely technical, I wanted to try out Electron in a personal project after having spent quite a bit of time working on an Electron app at work that didn't end up going anywhere. Often I start side projects due to reasons like that, such as not being able to use a specific technology I want to at work, or even just using a technology \"how I want to\" rather than how the business wants to. The difference is most of my side projects end up falling by the side of the road once I get my enjoyment out of it.\n\nNovella is the exception. As I said, I've been working on this since 2019. That's longer than any side project I've ever worked on, so what's the difference this time? Passion and excitement and, even better, desire to use it myself. I've always enjoyed writing, which is why I have done blogging many times over the years. (I've had a variety of blogs before this current one) One of my goals has been to write a book at some point. Before I started Novella I was looking at options for writing software. I didn't love the options I saw at the time. So, in traditional developer fashion, I decided that I may as well build my own! The funny thing is that I've spent far more time writing this software than actually writing. But honestly, when it comes down to it, I've been having so much fun building this that I don't mind.\n\n## The Fun Parts\n\nI have loved this project. It involves a lot of my favorite technologies, as well as some that I have had very little opportunity to use. There are obviously many things I'm using, but the following are a few of the biggest ones.\n\n**Electron:** I have always been fascinated with [Electron](https://www.electronjs.org/). I used it when I worked at Domo to build a desktop version of their product ala-Tableau Desktop. That never saw the light of day but it was a ton of fun to build, and Electron was a big part of the reason I loved it so much. I know there are other great options out there, but I love Electron and am productive with it, which is the best praise I can give it.\n\n**Angular:** If you know anything about me, it's that I'm a huge [Angular](https://angular.dev/) fan. I've used many frontend frameworks over the years but I always keep coming back to Angular because I love its opinionated nature and developer ergonomics. TypeScript is where it is today because of Angular choosing to use it exclusively. It's also had a major renaissance over the last couple years in terms of the tooling and build experience, so I've been having more fun than ever!\n\n**SQLite:** I have loved the idea of using [SQLite](https://sqlite.org/) in an application somehow, and was excited to finally have a good usecase for it. Embedded databases are so cool to mess around with, and it's been a pleasure to work with during the last few years.\n\n**Prosemirror:** Rich text editors are kind of a four-letter word in the web dev community. They're notoriously complex, heavy, and opinionated. Not to mention not always open source. I was originally using [Quill.js](https://quilljs.com/) for my editor but I didn't end up liking the developer experience of it. So I moved to [Prosemirror](https://prosemirror.net/), an absolutely fantastic building-blocks-style library where you can craft your own editor experience as simple or complex as you want. I've been extremely happy with it so far.\n\n**Azure Trusted Signing:** I'll go over Windows Code Signing in the next section and the nightmare it was, but thankfully I finally found [Azure Trusted Signing](https://azure.microsoft.com/en-us/products/trusted-signing), a great service by Microsoft. It's a monthly service you can pay for to provide code signing for Windows apps. It's massively easier to use (my opinion) and MASSIVELY cheaper (not an opinion) than most of the alternatives. Once I got it set up, it was super easy to automate.\n\n## The Not So Fun Parts\n\nAs with all projects, there were plenty of moments where I was slogging through nasty issues that made me question whether I even wanted to do this project or not. Thankfully I pushed through each one, and I'm sure there will be more in the future as well, but here are some of the biggest pain points I dealt with.\n\n**Windows Code Signing:** This was the biggest nightmare of my time working on Novella, and it caused me to take huge breaks of time due to the frustration of it. Apple makes it so easy, certificates are included with your Developer Account, and you can very simply code sign and notarize your app. With Windows, you are required to get a Code Signing certificate from a third party company with a huge range of prices and quality of documentation on how to get it working. Then you have to deal with deciding between OV certificates vs EV certificates, paying the massive yearly cost, and even then some offerings end up only being able to be used via the company's special online sign tool that comes with its own cost. It's an absolute nightmare and nearly caused me to give up on releasing Novella on Windows. Thankfully I found Azure Trusted Signing as I mentioned above, and now it's smooth (and cheap) sailing.\n\n**CJS to ESM:** During the course of my time working on Novella, I did many dependency upgrades and tooling changes. One of the biggest ones I decided to undertake was converting all my code from CommonJS to ES Modules. While I'm very happy with my decision now that it's done, it was quite the effort. Lots of dependencies needed to be updated to the versions that support ESM, I had to update my build tooling, and some dependencies were simply not compatible so I had to find alternatives. It was honestly a good learning experience, but not one I necessarily \"enjoyed\" doing.\n\n**TypeORM:** I originally used [TypeORM](https://typeorm.io/) for database querying. Obviously there are many pros and cons to using an ORM vs raw SQL, but this section is not about that at all. I was generally happy with TypeORM for much of development. When I was in progress with my ESM migration, I realized that TypeORM bundles their CLI into the main package along with all of its dependencies. Some of these dependencies are CommonJS dependencies that don't support being loaded in an ESM environment. No matter what I tried, I could never get it to work with ESM, so I had to drop TypeORM. After evaluating a lot of options, the easiest path forward was move to [mikro-orm](https://mikro-orm.io/), which has a very similar API to TypeORM, but it's much more modern and was compatible with ESM. Whether I stay with that long term or not, I don't know, but I'm liking it at the moment.\n\n**Perfection:** The phrase \"Perfection is the enemy of good\" applies so much to me and my history with Novella. This is the true reason it took me 6 years to release it. For most of that time I kept adding feature after feature to my backlog of things I \"needed\" before I could release it publicly. If I had stuck to that original plan, I would have never been able to release Novella, because it would never feel \"done\". I definitely felt like it had to essentially be perfect before releasing it, whereas that's simply not the case. So I finally was able to come to terms with the fact that I had to draw a line in the sand, which I did, and that allowed me to come to terms with Novella not being perfect before releasing it.\n\n## Looking Ahead\n\nIn some ways releasing Novella publicly feels like I finally \"finished\", but obviously that's not actually the case, and I'm really just getting started. I have a ton of really exciting features I want to implement, and I feel like I can now. Even better, I can release them as they're done, rather than waiting for one grand release to the public. This will definitely help with the motivation to keep working on it.\n\nDespite that, will there be periods where I feel stuck or unmotivated? Almost certainly. Releasing Novella doesn't suddenly free me from those moments. It's a nice moment of extra motivation and a really good feeling at having accomplished something I've had a goal to do for years. I'm really proud of the work I did, and am proud of sticking to over the years. If you're interested in checking it out, go learn about it at the [Novella Website](https://novella.app) and download it. I hope you like it!","src/content/blog/novella.md","ddf2d36f5540f7c8",{"html":273,"metadata":274},"\u003Cp>I have been looking forward to this post for a long time, but I can finally post it! I’ve finished my passion project that I’ve been working on for the last 6 years. Introducing \u003Ca href=\"https://novella.app\">\u003Cstrong>Novella\u003C/strong>\u003C/a>, the modern, distraction-free writing application.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/novella/novella.png\" alt=\"Novella\">\u003C/p>\n\u003Ch2 id=\"why-build-this\">Why build this?\u003C/h2>\n\u003Cp>Honestly, there were a lot of reasons. My initial reason was purely technical, I wanted to try out Electron in a personal project after having spent quite a bit of time working on an Electron app at work that didn’t end up going anywhere. Often I start side projects due to reasons like that, such as not being able to use a specific technology I want to at work, or even just using a technology “how I want to” rather than how the business wants to. The difference is most of my side projects end up falling by the side of the road once I get my enjoyment out of it.\u003C/p>\n\u003Cp>Novella is the exception. As I said, I’ve been working on this since 2019. That’s longer than any side project I’ve ever worked on, so what’s the difference this time? Passion and excitement and, even better, desire to use it myself. I’ve always enjoyed writing, which is why I have done blogging many times over the years. (I’ve had a variety of blogs before this current one) One of my goals has been to write a book at some point. Before I started Novella I was looking at options for writing software. I didn’t love the options I saw at the time. So, in traditional developer fashion, I decided that I may as well build my own! The funny thing is that I’ve spent far more time writing this software than actually writing. But honestly, when it comes down to it, I’ve been having so much fun building this that I don’t mind.\u003C/p>\n\u003Ch2 id=\"the-fun-parts\">The Fun Parts\u003C/h2>\n\u003Cp>I have loved this project. It involves a lot of my favorite technologies, as well as some that I have had very little opportunity to use. There are obviously many things I’m using, but the following are a few of the biggest ones.\u003C/p>\n\u003Cp>\u003Cstrong>Electron:\u003C/strong> I have always been fascinated with \u003Ca href=\"https://www.electronjs.org/\">Electron\u003C/a>. I used it when I worked at Domo to build a desktop version of their product ala-Tableau Desktop. That never saw the light of day but it was a ton of fun to build, and Electron was a big part of the reason I loved it so much. I know there are other great options out there, but I love Electron and am productive with it, which is the best praise I can give it.\u003C/p>\n\u003Cp>\u003Cstrong>Angular:\u003C/strong> If you know anything about me, it’s that I’m a huge \u003Ca href=\"https://angular.dev/\">Angular\u003C/a> fan. I’ve used many frontend frameworks over the years but I always keep coming back to Angular because I love its opinionated nature and developer ergonomics. TypeScript is where it is today because of Angular choosing to use it exclusively. It’s also had a major renaissance over the last couple years in terms of the tooling and build experience, so I’ve been having more fun than ever!\u003C/p>\n\u003Cp>\u003Cstrong>SQLite:\u003C/strong> I have loved the idea of using \u003Ca href=\"https://sqlite.org/\">SQLite\u003C/a> in an application somehow, and was excited to finally have a good usecase for it. Embedded databases are so cool to mess around with, and it’s been a pleasure to work with during the last few years.\u003C/p>\n\u003Cp>\u003Cstrong>Prosemirror:\u003C/strong> Rich text editors are kind of a four-letter word in the web dev community. They’re notoriously complex, heavy, and opinionated. Not to mention not always open source. I was originally using \u003Ca href=\"https://quilljs.com/\">Quill.js\u003C/a> for my editor but I didn’t end up liking the developer experience of it. So I moved to \u003Ca href=\"https://prosemirror.net/\">Prosemirror\u003C/a>, an absolutely fantastic building-blocks-style library where you can craft your own editor experience as simple or complex as you want. I’ve been extremely happy with it so far.\u003C/p>\n\u003Cp>\u003Cstrong>Azure Trusted Signing:\u003C/strong> I’ll go over Windows Code Signing in the next section and the nightmare it was, but thankfully I finally found \u003Ca href=\"https://azure.microsoft.com/en-us/products/trusted-signing\">Azure Trusted Signing\u003C/a>, a great service by Microsoft. It’s a monthly service you can pay for to provide code signing for Windows apps. It’s massively easier to use (my opinion) and MASSIVELY cheaper (not an opinion) than most of the alternatives. Once I got it set up, it was super easy to automate.\u003C/p>\n\u003Ch2 id=\"the-not-so-fun-parts\">The Not So Fun Parts\u003C/h2>\n\u003Cp>As with all projects, there were plenty of moments where I was slogging through nasty issues that made me question whether I even wanted to do this project or not. Thankfully I pushed through each one, and I’m sure there will be more in the future as well, but here are some of the biggest pain points I dealt with.\u003C/p>\n\u003Cp>\u003Cstrong>Windows Code Signing:\u003C/strong> This was the biggest nightmare of my time working on Novella, and it caused me to take huge breaks of time due to the frustration of it. Apple makes it so easy, certificates are included with your Developer Account, and you can very simply code sign and notarize your app. With Windows, you are required to get a Code Signing certificate from a third party company with a huge range of prices and quality of documentation on how to get it working. Then you have to deal with deciding between OV certificates vs EV certificates, paying the massive yearly cost, and even then some offerings end up only being able to be used via the company’s special online sign tool that comes with its own cost. It’s an absolute nightmare and nearly caused me to give up on releasing Novella on Windows. Thankfully I found Azure Trusted Signing as I mentioned above, and now it’s smooth (and cheap) sailing.\u003C/p>\n\u003Cp>\u003Cstrong>CJS to ESM:\u003C/strong> During the course of my time working on Novella, I did many dependency upgrades and tooling changes. One of the biggest ones I decided to undertake was converting all my code from CommonJS to ES Modules. While I’m very happy with my decision now that it’s done, it was quite the effort. Lots of dependencies needed to be updated to the versions that support ESM, I had to update my build tooling, and some dependencies were simply not compatible so I had to find alternatives. It was honestly a good learning experience, but not one I necessarily “enjoyed” doing.\u003C/p>\n\u003Cp>\u003Cstrong>TypeORM:\u003C/strong> I originally used \u003Ca href=\"https://typeorm.io/\">TypeORM\u003C/a> for database querying. Obviously there are many pros and cons to using an ORM vs raw SQL, but this section is not about that at all. I was generally happy with TypeORM for much of development. When I was in progress with my ESM migration, I realized that TypeORM bundles their CLI into the main package along with all of its dependencies. Some of these dependencies are CommonJS dependencies that don’t support being loaded in an ESM environment. No matter what I tried, I could never get it to work with ESM, so I had to drop TypeORM. After evaluating a lot of options, the easiest path forward was move to \u003Ca href=\"https://mikro-orm.io/\">mikro-orm\u003C/a>, which has a very similar API to TypeORM, but it’s much more modern and was compatible with ESM. Whether I stay with that long term or not, I don’t know, but I’m liking it at the moment.\u003C/p>\n\u003Cp>\u003Cstrong>Perfection:\u003C/strong> The phrase “Perfection is the enemy of good” applies so much to me and my history with Novella. This is the true reason it took me 6 years to release it. For most of that time I kept adding feature after feature to my backlog of things I “needed” before I could release it publicly. If I had stuck to that original plan, I would have never been able to release Novella, because it would never feel “done”. I definitely felt like it had to essentially be perfect before releasing it, whereas that’s simply not the case. So I finally was able to come to terms with the fact that I had to draw a line in the sand, which I did, and that allowed me to come to terms with Novella not being perfect before releasing it.\u003C/p>\n\u003Ch2 id=\"looking-ahead\">Looking Ahead\u003C/h2>\n\u003Cp>In some ways releasing Novella publicly feels like I finally “finished”, but obviously that’s not actually the case, and I’m really just getting started. I have a ton of really exciting features I want to implement, and I feel like I can now. Even better, I can release them as they’re done, rather than waiting for one grand release to the public. This will definitely help with the motivation to keep working on it.\u003C/p>\n\u003Cp>Despite that, will there be periods where I feel stuck or unmotivated? Almost certainly. Releasing Novella doesn’t suddenly free me from those moments. It’s a nice moment of extra motivation and a really good feeling at having accomplished something I’ve had a goal to do for years. I’m really proud of the work I did, and am proud of sticking to over the years. If you’re interested in checking it out, go learn about it at the \u003Ca href=\"https://novella.app\">Novella Website\u003C/a> and download it. I hope you like it!\u003C/p>",{"headings":275,"localImagePaths":288,"remoteImagePaths":289,"frontmatter":290,"imagePaths":293},[276,279,282,285],{"depth":30,"slug":277,"text":278},"why-build-this","Why build this?",{"depth":30,"slug":280,"text":281},"the-fun-parts","The Fun Parts",{"depth":30,"slug":283,"text":284},"the-not-so-fun-parts","The Not So Fun Parts",{"depth":30,"slug":286,"text":287},"looking-ahead","Looking Ahead",[],[],{"title":262,"published":17,"description":263,"date":291,"tags":292,"cover_image":268},["Date","2025-08-10T00:00:00.000Z"],[266,95,267],[],"novella.md","epic-dev-environment-wsl",{"id":295,"data":297,"body":307,"filePath":308,"digest":309,"rendered":310,"legacyId":353},{"title":298,"description":299,"date":300,"published":17,"tags":301,"cover_image":306},"Epic Development Environment using Windows Subsystem for Linux","Web and OSS Development on Windows doesn’t suck anymore!",["Date","2018-04-13T00:00:00.000Z"],[302,303,304,305],"webdev","wsl","setup","windows","/img/wsl.png","Like many other developers, I have a handful of side projects I am working on at all times. My work is also my hobby. Whenever a new side project appears, I immediately pursue it because of the excitement of working on something new and shiny! I often feel like the developer in this comic by the excellent [CommitStrip](http://www.commitstrip.com) was written about me.\n\n![West Side-project Story](/img/posts/epic-dev-environment-wsl/comic.jpeg)\n\n\u003Ccenter>\u003Csmall>\u003Ca href=\"http://www.commitstrip.com/en/2014/11/25/west-side-project-story/\" target=\"_blank\">West Side-project Story\u003C/a> - \u003Ca href=\"http://www.commitstrip.com\" target=\"_blank\">CommitStrip\u003C/a> - Nov 25, 2014\u003C/small>\u003C/center>\n\nTo support all these side projects, I obviously need an awesome machine to do this work on. I wanted to separate my work laptop and code from my personal projects. So, I decided recently that I’d purchase myself a new laptop on Black Friday. For what I wanted, however, I couldn’t convince myself to shell out that much money for a Mac. I could, however, buy a Windows laptop with all the specs I wanted (and more) for a much cheaper price. With that in mind, I researched for days, and found what I believed to be the perfect laptop! Come Black Friday, I snapped it up.\n\nI finally had my perfect laptop and was ready to go. The last obstacle? Setting up a legit development environment. I was initially worried due to having used Linux and macOS for development the last few years. Lucky for me, Windows 10 with the latest Creators Update has fantastic improvements to the Windows developer environment. At the center of it all? Windows Subsystem for Linux, or WSL.\n\nYep. You can run multiple Linux distros, on your Windows PC, without virtualbox, dual booting, etc. This is native. And this is awesome.\n\n![WSL Distros](/img/posts/epic-dev-environment-wsl/distros.png)\n\n\u003Ccenter>\u003Csmall>Image from \u003Ca href=\"https://blogs.msdn.microsoft.com/commandline/2017/05/11/new-distros-coming-to-bashwsl-via-windows-store/\" target=\"_blank\">New distros coming to Bash/WSL via Windows Store\u003C/a>\u003C/small>\u003C/center>\n\nI’m still in the early days of using it for my personal development, but it’s been a wonderful experience thus far! Vastly easier and better (IMHO) than trying to wrangle cygwin, git for windows with the bash emulation, and the many other solutions that attempt to bridge the gap to a \\*NIX experience. So, let’s dig in to how you can get this epic dev environment on your Windows machine.\n\n## Prerequisites\n\nIn order to use these instructions, you must be running Windows 10, updated to at least the Fall 2017 Creator’s Update. For the section on Docker, you must also have a machine that can use Hyper-V and hardware virtualization, something that requires Windows 10 Pro.\n\n## Install Ubuntu with WSL\n\n![Enable WSL](/img/posts/epic-dev-environment-wsl/windows-features.png)\n\nThe first thing you need to do is enable WSL. Open “Turn Windows features on or off”, then in the dialog that appears, scroll down and check the box “Windows Subsystem for Linux” then select Ok. This will apply the changes, and reboot your machine when required.\n\nOnce you have WSL enabled, open the Windows Store and search for “Linux”. You’ll see a large banner prompting you to check out the Linux distros. At the time of writing, those were Ubuntu, openSUSE, and SUSE Linux Enterprise Server.\n\nI chose Ubuntu as I am far more experienced with it. This article uses Ubuntu commands. Once you’ve installed the Ubuntu app from the Windows Store, open it and run `lsb_release -a` to see that yes, you are indeed running Ubuntu itself on your Windows machine.\n\n## Git\n\nMany of the installations further on in this article require git. I decided to install and run git through WSL. To install, simply run `sudo apt update && sudo apt install git`. Upon installing git, I also generated an SSH key, as I would need to use that for pulling from and pushing to all my repos later. This is very simply accomplished by running: `ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"`.\n\n## ZSH (Optional)\n\nThis next step is completely optional. I love bash, and I love zsh, so either one works fine. **If you prefer bash, skip this section.**\n\nIt’s fairly straightforward to install zsh. After making sure you’ve run `sudo apt update` then install it with `sudo apt install zsh`. You can test to make sure it’s working by running `zsh` which should bring you into a zsh terminal!\n\nI also love [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh), which provides lots of beautiful themes and excellent plugins. I used the `curl` command under the [Basic Installation](https://github.com/robbyrussell/oh-my-zsh#basic-installation) instructions, and I was good to go! You can then select the theme you want by editing your `~/.zshrc` file and adding the theme name to the `ZSH_THEME` environment variable. Personally, I’m using [Pure](https://github.com/sindresorhus/pure), a beautiful minimalist theme.\n\n![Pure Theme](/img/posts/epic-dev-environment-wsl/pure-theme.png)\n\n\u003Ccenter>\u003Csmall>Featured image from the \u003Ca href=\"https://github.com/sindresorhus/pure\" target=\"_blank\">Pure\u003C/a> repository\u003C/small>\u003C/center>\n\n**NOTE:** Personally, when trying to use Pure and zsh with the Ubuntu terminal app, it had some styling and unicode issues. This is not a problem for me, however, as I use Hyper, which I go over below!\n\n## Hyper\n\n[Hyper](https://hyper.is/) by [Zeit](https://zeit.co/) is one of my favorite things I love having on all my machines. It’s a beautiful terminal emulator with plugin and theme support. It was one of the first things I installed after installing WSL and Ubuntu. To get it working, simply open up your `.hyper.js` file and change the shell property to `shell: 'wsl.exe'` then save and close the file. Once you get back into Hyper, it should load up your zsh (or bash) terminal! From here on out, I exclusively use Hyper for all my terminal needs.\n\n**NOTE:** Make sure there are no arguments in the `shellArgs` property. WSL by default uses the login shell.\n\n### Hyper Plugins\n\nIn case anyone out there hasn’t used Hyper, there are some good plugins I use that I recommend adding to your `.hyper.js` plugins array. They include [hyperterm-material-dark](https://www.npmjs.com/package/hyperterm-material-dark), (disclosure: that’s my theme) [hypercwd](https://www.npmjs.com/package/hypercwd), [hyper-tabs-enhanced](https://www.npmjs.com/package/hyper-tabs-enhanced), and for those moments of awesomeness, [hyperpower](https://www.npmjs.com/package/hyperpower)!\n\n## Visual Studio Code\n\nEven more than Hyper, [Visual Studio Code](https://code.visualstudio.com/) is possibly my favorite piece of software ever. I’ve used IDEs, Sublime Text, Atom, Notepad++, I’ve tried almost all of the most used ones. VS Code is by far my favorite editor. It’s beautiful, incredibly lightweight, super fast, has tons of amazing extensions, built in debugger support, and is as close to full IDE functionality as any text editor I’ve ever used. I installed this as quickly as I could and brought down all [my settings](https://gist.github.com/jbw91/e77025c1fc4fe1d5137ac525398f2227) using the [Settings Sync extension](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync). (which I highly recommend using to sync settings across devices)\n\nI bring this up because I have the integrated terminal in VS Code also set to use my WSL shell. To do this, I set the following setting: `\"terminal.integrated.shell.windows\":\"C:\\\\WINDOWS\\\\System32\\\\wsl.exe\"`. Once you open the integrated terminal, you should be good to go!\n\n## Node.js/NPM\n\nPersonally I decided to take the approach of doing as much as absolutely possible inside of the WSL environment. Also, I am obsessed with NVM for managing my Node installs, which doesn’t work on Windows. So, instead of downloading the installer for Node.js for Windows, I installed nvm through Ubuntu’s repositories! You can follow the directions on [NVM’s Installation Instructions](https://github.com/creationix/nvm#install-script). I used `curl` to download the install script, which I installed by running `sudo apt install curl`.\n\nIf you did everything right, you should have nvm installed correctly. I then installed the Long Term Support version of node by running `nvm install --lts` and then `nvm use --lts` to set it as the version I’m currently using. I also set it to my default node version by running `nvm alias default {VERSION}` where VERSION is the version number you just installed.\n\n**NOTE:** I initially had some struggles where when I opened my Ubuntu terminal, it would give the error: `N/A: version \"N/A\" is not yet installed` After a bit of searching, I found that when I ran `nvm ls` it would list the installed versions of node. Under the lts versions, several had “N/A” because they were not installed. I installed those versions, and it stopped giving me the error.\n\n![Npm](/img/posts/epic-dev-environment-wsl/npm.png)\n\n\u003Ccenter>\u003Csmall>A global npm install of the \u003Ca href=\"https://cli.angular.io/\" target=\"_blank\">Angular CLI\u003C/a> repository\u003C/small>\u003C/center>\n\n### Yarn\n\nAs an aside to installing Node, I thought I’d bring up that I also installed [Yarn](https://yarnpkg.com/), because I love Yarn. You can install it through Windows, but again, I’m trying to do everything I need through WSL, so I followed the [Linux Installation Instructions](https://yarnpkg.com/en/docs/install#linux-tab). Specifically the Ubuntu/Debian instructions, of course. This went without a hitch, and I had yarn working!\n\n![Yarn](/img/posts/epic-dev-environment-wsl/yarn.png)\n\n\u003Ccenter>\u003Csmall>A yarn install working beautifully\u003C/small>\u003C/center>\n\n## Docker\n\nFirst off, before we get into this, it is important to note that in order to run Docker for Windows, which makes use of Hyper-V virtualization, you must be running Windows 10 Pro. The Home edition does not have support for Hyper-V. This does not mean you can’t run Docker. You can still run Docker Toolbox, which uses VirtualBox. These instructions, however, only apply to Docker for Windows.\n\nThis is the one thing that I didn’t install through WSL. I installed [Docker for Windows](https://www.docker.com/docker-windows), due to its tight integration with the operating system. The experience with the Windows version is perfect for me, so I didn’t feel the need to install this using WSL. Perhaps down the road I’ll experiment with this.\n\nI did, however, make it accessible from my WSL environment. After installing Docker for Windows (I had to go into the BIOS on startup and enable hardware virtualization as an extra step) and it was successfully running, I simply aliased it so it would be invoked the same way as on Linux/Mac. To my `.zsh_aliases` file, I added the following lines:\n\n```shell\nalias docker='docker.exe'\nalias docker-compose='docker-compose.exe'\n```\n\nUpon restarting my terminal, I could invoke docker and docker-compose commands just like normal!\n\n![Docker](/img/posts/epic-dev-environment-wsl/docker.png)\n\n\u003Ccenter>\u003Csmall>Docker for Windows being run through my zsh shell using the alias\u003C/small>\u003C/center>\n\n## Last Words\n\nFirst, massive props to [Rich Turner](https://twitter.com/richturn_ms) and the rest of the team working on Windows Subsystem for Linux. They’re doing insane things to make life on Windows for the regular developers like me vastly easier and more enjoyable. Not all heroes wear capes, and these guys are definitely my heroes!\n\nFinally, there will definitely be much more down the road in terms of tools and software that I’ll end up needing. Like I said previously, it’s still early days for me in terms of my usage of this development environment. I’m sure I’ll come across some annoyance I hadn’t run into previously. Every environment has those annoyances, however, and thus far I’ve been loving developing on Windows. I’ll be honest, that’s something I never thought I would say!","src/content/blog/epic-dev-environment-wsl.md","d975db0c947f3606",{"html":311,"metadata":312},"\u003Cp>Like many other developers, I have a handful of side projects I am working on at all times. My work is also my hobby. Whenever a new side project appears, I immediately pursue it because of the excitement of working on something new and shiny! I often feel like the developer in this comic by the excellent \u003Ca href=\"http://www.commitstrip.com\">CommitStrip\u003C/a> was written about me.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/epic-dev-environment-wsl/comic.jpeg\" alt=\"West Side-project Story\">\u003C/p>\n\u003Ccenter>\u003Csmall>\u003Ca href=\"http://www.commitstrip.com/en/2014/11/25/west-side-project-story/\" target=\"_blank\">West Side-project Story\u003C/a> - \u003Ca href=\"http://www.commitstrip.com\" target=\"_blank\">CommitStrip\u003C/a> - Nov 25, 2014\u003C/small>\u003C/center>\n\u003Cp>To support all these side projects, I obviously need an awesome machine to do this work on. I wanted to separate my work laptop and code from my personal projects. So, I decided recently that I’d purchase myself a new laptop on Black Friday. For what I wanted, however, I couldn’t convince myself to shell out that much money for a Mac. I could, however, buy a Windows laptop with all the specs I wanted (and more) for a much cheaper price. With that in mind, I researched for days, and found what I believed to be the perfect laptop! Come Black Friday, I snapped it up.\u003C/p>\n\u003Cp>I finally had my perfect laptop and was ready to go. The last obstacle? Setting up a legit development environment. I was initially worried due to having used Linux and macOS for development the last few years. Lucky for me, Windows 10 with the latest Creators Update has fantastic improvements to the Windows developer environment. At the center of it all? Windows Subsystem for Linux, or WSL.\u003C/p>\n\u003Cp>Yep. You can run multiple Linux distros, on your Windows PC, without virtualbox, dual booting, etc. This is native. And this is awesome.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/epic-dev-environment-wsl/distros.png\" alt=\"WSL Distros\">\u003C/p>\n\u003Ccenter>\u003Csmall>Image from \u003Ca href=\"https://blogs.msdn.microsoft.com/commandline/2017/05/11/new-distros-coming-to-bashwsl-via-windows-store/\" target=\"_blank\">New distros coming to Bash/WSL via Windows Store\u003C/a>\u003C/small>\u003C/center>\n\u003Cp>I’m still in the early days of using it for my personal development, but it’s been a wonderful experience thus far! Vastly easier and better (IMHO) than trying to wrangle cygwin, git for windows with the bash emulation, and the many other solutions that attempt to bridge the gap to a *NIX experience. So, let’s dig in to how you can get this epic dev environment on your Windows machine.\u003C/p>\n\u003Ch2 id=\"prerequisites\">Prerequisites\u003C/h2>\n\u003Cp>In order to use these instructions, you must be running Windows 10, updated to at least the Fall 2017 Creator’s Update. For the section on Docker, you must also have a machine that can use Hyper-V and hardware virtualization, something that requires Windows 10 Pro.\u003C/p>\n\u003Ch2 id=\"install-ubuntu-with-wsl\">Install Ubuntu with WSL\u003C/h2>\n\u003Cp>\u003Cimg src=\"/img/posts/epic-dev-environment-wsl/windows-features.png\" alt=\"Enable WSL\">\u003C/p>\n\u003Cp>The first thing you need to do is enable WSL. Open “Turn Windows features on or off”, then in the dialog that appears, scroll down and check the box “Windows Subsystem for Linux” then select Ok. This will apply the changes, and reboot your machine when required.\u003C/p>\n\u003Cp>Once you have WSL enabled, open the Windows Store and search for “Linux”. You’ll see a large banner prompting you to check out the Linux distros. At the time of writing, those were Ubuntu, openSUSE, and SUSE Linux Enterprise Server.\u003C/p>\n\u003Cp>I chose Ubuntu as I am far more experienced with it. This article uses Ubuntu commands. Once you’ve installed the Ubuntu app from the Windows Store, open it and run \u003Ccode>lsb_release -a\u003C/code> to see that yes, you are indeed running Ubuntu itself on your Windows machine.\u003C/p>\n\u003Ch2 id=\"git\">Git\u003C/h2>\n\u003Cp>Many of the installations further on in this article require git. I decided to install and run git through WSL. To install, simply run \u003Ccode>sudo apt update &#x26;&#x26; sudo apt install git\u003C/code>. Upon installing git, I also generated an SSH key, as I would need to use that for pulling from and pushing to all my repos later. This is very simply accomplished by running: \u003Ccode>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\u003C/code>.\u003C/p>\n\u003Ch2 id=\"zsh-optional\">ZSH (Optional)\u003C/h2>\n\u003Cp>This next step is completely optional. I love bash, and I love zsh, so either one works fine. \u003Cstrong>If you prefer bash, skip this section.\u003C/strong>\u003C/p>\n\u003Cp>It’s fairly straightforward to install zsh. After making sure you’ve run \u003Ccode>sudo apt update\u003C/code> then install it with \u003Ccode>sudo apt install zsh\u003C/code>. You can test to make sure it’s working by running \u003Ccode>zsh\u003C/code> which should bring you into a zsh terminal!\u003C/p>\n\u003Cp>I also love \u003Ca href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh\u003C/a>, which provides lots of beautiful themes and excellent plugins. I used the \u003Ccode>curl\u003C/code> command under the \u003Ca href=\"https://github.com/robbyrussell/oh-my-zsh#basic-installation\">Basic Installation\u003C/a> instructions, and I was good to go! You can then select the theme you want by editing your \u003Ccode>~/.zshrc\u003C/code> file and adding the theme name to the \u003Ccode>ZSH_THEME\u003C/code> environment variable. Personally, I’m using \u003Ca href=\"https://github.com/sindresorhus/pure\">Pure\u003C/a>, a beautiful minimalist theme.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/epic-dev-environment-wsl/pure-theme.png\" alt=\"Pure Theme\">\u003C/p>\n\u003Ccenter>\u003Csmall>Featured image from the \u003Ca href=\"https://github.com/sindresorhus/pure\" target=\"_blank\">Pure\u003C/a> repository\u003C/small>\u003C/center>\n\u003Cp>\u003Cstrong>NOTE:\u003C/strong> Personally, when trying to use Pure and zsh with the Ubuntu terminal app, it had some styling and unicode issues. This is not a problem for me, however, as I use Hyper, which I go over below!\u003C/p>\n\u003Ch2 id=\"hyper\">Hyper\u003C/h2>\n\u003Cp>\u003Ca href=\"https://hyper.is/\">Hyper\u003C/a> by \u003Ca href=\"https://zeit.co/\">Zeit\u003C/a> is one of my favorite things I love having on all my machines. It’s a beautiful terminal emulator with plugin and theme support. It was one of the first things I installed after installing WSL and Ubuntu. To get it working, simply open up your \u003Ccode>.hyper.js\u003C/code> file and change the shell property to \u003Ccode>shell: 'wsl.exe'\u003C/code> then save and close the file. Once you get back into Hyper, it should load up your zsh (or bash) terminal! From here on out, I exclusively use Hyper for all my terminal needs.\u003C/p>\n\u003Cp>\u003Cstrong>NOTE:\u003C/strong> Make sure there are no arguments in the \u003Ccode>shellArgs\u003C/code> property. WSL by default uses the login shell.\u003C/p>\n\u003Ch3 id=\"hyper-plugins\">Hyper Plugins\u003C/h3>\n\u003Cp>In case anyone out there hasn’t used Hyper, there are some good plugins I use that I recommend adding to your \u003Ccode>.hyper.js\u003C/code> plugins array. They include \u003Ca href=\"https://www.npmjs.com/package/hyperterm-material-dark\">hyperterm-material-dark\u003C/a>, (disclosure: that’s my theme) \u003Ca href=\"https://www.npmjs.com/package/hypercwd\">hypercwd\u003C/a>, \u003Ca href=\"https://www.npmjs.com/package/hyper-tabs-enhanced\">hyper-tabs-enhanced\u003C/a>, and for those moments of awesomeness, \u003Ca href=\"https://www.npmjs.com/package/hyperpower\">hyperpower\u003C/a>!\u003C/p>\n\u003Ch2 id=\"visual-studio-code\">Visual Studio Code\u003C/h2>\n\u003Cp>Even more than Hyper, \u003Ca href=\"https://code.visualstudio.com/\">Visual Studio Code\u003C/a> is possibly my favorite piece of software ever. I’ve used IDEs, Sublime Text, Atom, Notepad++, I’ve tried almost all of the most used ones. VS Code is by far my favorite editor. It’s beautiful, incredibly lightweight, super fast, has tons of amazing extensions, built in debugger support, and is as close to full IDE functionality as any text editor I’ve ever used. I installed this as quickly as I could and brought down all \u003Ca href=\"https://gist.github.com/jbw91/e77025c1fc4fe1d5137ac525398f2227\">my settings\u003C/a> using the \u003Ca href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\">Settings Sync extension\u003C/a>. (which I highly recommend using to sync settings across devices)\u003C/p>\n\u003Cp>I bring this up because I have the integrated terminal in VS Code also set to use my WSL shell. To do this, I set the following setting: \u003Ccode>\"terminal.integrated.shell.windows\":\"C:\\\\WINDOWS\\\\System32\\\\wsl.exe\"\u003C/code>. Once you open the integrated terminal, you should be good to go!\u003C/p>\n\u003Ch2 id=\"nodejsnpm\">Node.js/NPM\u003C/h2>\n\u003Cp>Personally I decided to take the approach of doing as much as absolutely possible inside of the WSL environment. Also, I am obsessed with NVM for managing my Node installs, which doesn’t work on Windows. So, instead of downloading the installer for Node.js for Windows, I installed nvm through Ubuntu’s repositories! You can follow the directions on \u003Ca href=\"https://github.com/creationix/nvm#install-script\">NVM’s Installation Instructions\u003C/a>. I used \u003Ccode>curl\u003C/code> to download the install script, which I installed by running \u003Ccode>sudo apt install curl\u003C/code>.\u003C/p>\n\u003Cp>If you did everything right, you should have nvm installed correctly. I then installed the Long Term Support version of node by running \u003Ccode>nvm install --lts\u003C/code> and then \u003Ccode>nvm use --lts\u003C/code> to set it as the version I’m currently using. I also set it to my default node version by running \u003Ccode>nvm alias default {VERSION}\u003C/code> where VERSION is the version number you just installed.\u003C/p>\n\u003Cp>\u003Cstrong>NOTE:\u003C/strong> I initially had some struggles where when I opened my Ubuntu terminal, it would give the error: \u003Ccode>N/A: version \"N/A\" is not yet installed\u003C/code> After a bit of searching, I found that when I ran \u003Ccode>nvm ls\u003C/code> it would list the installed versions of node. Under the lts versions, several had “N/A” because they were not installed. I installed those versions, and it stopped giving me the error.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/epic-dev-environment-wsl/npm.png\" alt=\"Npm\">\u003C/p>\n\u003Ccenter>\u003Csmall>A global npm install of the \u003Ca href=\"https://cli.angular.io/\" target=\"_blank\">Angular CLI\u003C/a> repository\u003C/small>\u003C/center>\n\u003Ch3 id=\"yarn\">Yarn\u003C/h3>\n\u003Cp>As an aside to installing Node, I thought I’d bring up that I also installed \u003Ca href=\"https://yarnpkg.com/\">Yarn\u003C/a>, because I love Yarn. You can install it through Windows, but again, I’m trying to do everything I need through WSL, so I followed the \u003Ca href=\"https://yarnpkg.com/en/docs/install#linux-tab\">Linux Installation Instructions\u003C/a>. Specifically the Ubuntu/Debian instructions, of course. This went without a hitch, and I had yarn working!\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/epic-dev-environment-wsl/yarn.png\" alt=\"Yarn\">\u003C/p>\n\u003Ccenter>\u003Csmall>A yarn install working beautifully\u003C/small>\u003C/center>\n\u003Ch2 id=\"docker\">Docker\u003C/h2>\n\u003Cp>First off, before we get into this, it is important to note that in order to run Docker for Windows, which makes use of Hyper-V virtualization, you must be running Windows 10 Pro. The Home edition does not have support for Hyper-V. This does not mean you can’t run Docker. You can still run Docker Toolbox, which uses VirtualBox. These instructions, however, only apply to Docker for Windows.\u003C/p>\n\u003Cp>This is the one thing that I didn’t install through WSL. I installed \u003Ca href=\"https://www.docker.com/docker-windows\">Docker for Windows\u003C/a>, due to its tight integration with the operating system. The experience with the Windows version is perfect for me, so I didn’t feel the need to install this using WSL. Perhaps down the road I’ll experiment with this.\u003C/p>\n\u003Cp>I did, however, make it accessible from my WSL environment. After installing Docker for Windows (I had to go into the BIOS on startup and enable hardware virtualization as an extra step) and it was successfully running, I simply aliased it so it would be invoked the same way as on Linux/Mac. To my \u003Ccode>.zsh_aliases\u003C/code> file, I added the following lines:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">alias\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> docker\u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">'docker.exe'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">alias\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> docker-compose\u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">'docker-compose.exe'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Upon restarting my terminal, I could invoke docker and docker-compose commands just like normal!\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/epic-dev-environment-wsl/docker.png\" alt=\"Docker\">\u003C/p>\n\u003Ccenter>\u003Csmall>Docker for Windows being run through my zsh shell using the alias\u003C/small>\u003C/center>\n\u003Ch2 id=\"last-words\">Last Words\u003C/h2>\n\u003Cp>First, massive props to \u003Ca href=\"https://twitter.com/richturn_ms\">Rich Turner\u003C/a> and the rest of the team working on Windows Subsystem for Linux. They’re doing insane things to make life on Windows for the regular developers like me vastly easier and more enjoyable. Not all heroes wear capes, and these guys are definitely my heroes!\u003C/p>\n\u003Cp>Finally, there will definitely be much more down the road in terms of tools and software that I’ll end up needing. Like I said previously, it’s still early days for me in terms of my usage of this development environment. I’m sure I’ll come across some annoyance I hadn’t run into previously. Every environment has those annoyances, however, and thus far I’ve been loving developing on Windows. I’ll be honest, that’s something I never thought I would say!\u003C/p>",{"headings":313,"localImagePaths":347,"remoteImagePaths":348,"frontmatter":349,"imagePaths":352},[314,317,320,323,326,329,332,335,338,341,344],{"depth":30,"slug":315,"text":316},"prerequisites","Prerequisites",{"depth":30,"slug":318,"text":319},"install-ubuntu-with-wsl","Install Ubuntu with WSL",{"depth":30,"slug":321,"text":322},"git","Git",{"depth":30,"slug":324,"text":325},"zsh-optional","ZSH (Optional)",{"depth":30,"slug":327,"text":328},"hyper","Hyper",{"depth":75,"slug":330,"text":331},"hyper-plugins","Hyper Plugins",{"depth":30,"slug":333,"text":334},"visual-studio-code","Visual Studio Code",{"depth":30,"slug":336,"text":337},"nodejsnpm","Node.js/NPM",{"depth":75,"slug":339,"text":340},"yarn","Yarn",{"depth":30,"slug":342,"text":343},"docker","Docker",{"depth":30,"slug":345,"text":346},"last-words","Last Words",[],[],{"title":298,"published":17,"description":299,"date":350,"tags":351,"cover_image":306},["Date","2018-04-13T00:00:00.000Z"],[302,303,304,305],[],"epic-dev-environment-wsl.md","pcie-passthrough-cloud-init",{"id":354,"data":356,"body":364,"filePath":365,"digest":366,"rendered":367,"legacyId":384},{"title":357,"description":358,"date":359,"published":17,"tags":360,"cover_image":363},"PCIe Passthrough with Cloud-Init in Proxmox VE","I had a heck of a time getting my GPU to pass through to my cloud-init Ubuntu VM. After a lot of googling I figured it out. Here's how I did it.",["Date","2023-07-29T00:00:00.000Z"],[136,361,362],"proxmox","virtualization","/img/proxmox.png","As I wrote about in my [last post](/posts/homelab) I have been diving into the world of homelabs and the fun and sometimes frustrating world of hosting your own services on your own hardware in your basement. I have been using Proxmox VE as my hypervisor of choice and have been loving it. That being said there are often times where I need to cobble together information from various sources to figure something out, whether it be the Proxmox forums, blog posts, or YouTube videos by a variety of homelabbers.\n\nI recently purchased a used Nvidia Quadro P2000 GPU on Ebay for my server to utilize for Plex hardware transcoding as my server's CPU doesn't have an iGPU so watching stuff on Plex always ended up being endless buffering. I finally got it this last week and popped it in my server and began the long arduous task of figuring out how to utilize PCIe Passthrough in Proxmox to be able to utilize that GPU in my Plex virtual machine. Thankfully, there are some excellent tutorials out there on the subject, including [this one](https://youtu.be/-HCzLhnNf-A) by Craft Computing which got me 90% of the way there.\n\n## The Problem\n\nI will fully admit that this is a problem of my own making. I very recently followed [this tutorial](https://technotim.live/posts/cloud-init-cloud-image/) by TechnoTim on using cloud-init in Proxmox to create virtual machines using Ubuntu's cloud images. Super awesome, I love the idea, and so naturally I had to set up Plex using a new cloud-init template. It was all going swimmingly until I tried to add my GPU to the VM in Proxmox, and suddenly when I tried to boot the VM it would just hang forever.\n\nMost other smart people probably would've just said \"no worries, I'll just use Plex in a VM that doesn't use cloud-init and call it a day\" but instead I decided I would rather spend hours diving down rabbit holes to figure it out. Thankfully, in combination with multiple forum threads, blog posts, random videos, and super friendly community members in the [TechnoTim Discord](https://l.technotim.live/discord), I was able to get it working.\n\n## The Solution\n\nThe above tutorial is fantastic for setting up an awesome, clean, usable cloud-init template. I'm going to outline the changes I made that differ from that setup so that anyone else having this issue can clearly see the changes I made and hopefully get it working for themselves. The super short answer is that I needed it to be a UEFI boot setup with a few related changes to allow GPU passthrough, but here are the specific details.\n\nThe first issue is that when I was setting up the cloud-init drive rather than using `ide2` I needed to use `scsi1`. I got that information from this Proxmox Forum [thread comment](https://forum.proxmox.com/threads/cloud-init-image-only-applies-configuration-on-second-boot.93414/post-454108) So I ran the following (replacing `{VMID}` with my actual VMID):\n\n```shell\n$ qm set {VMID} --scsi1 local-lvm:cloudinit\n```\n\nOnce I finished the commands in the above tutorial, I made some further changes to the VM before making it a template. The first is that I changed the BIOS to `OVMF (UEFI)`. In order to support this, I needed to add an EFI Disk. I added that from the hardware menu, selected my storage target, and then SUPER IMPORTANTLY you need to UNCHECK the \"Pre-Enroll keys\" checkbox. This is a confusing name but basically this disables Secure Boot. If you have this enabled, then your Nvidia drivers won't work. I spent a substantial amount of time trying to figure out why my Nvidia driver wasn't working, and it wasn't until a super friendly person in TechnoTim's Discord server pointed me to that setting that I got this all working.\n\nAnother change I needed to make in order to be able to correctly pass through the GPU is in the hardware menu in Proxmox, \"Machine\" was set to the default of `i440fx`, and it needed to be set to `q35`. That would allow me to select the \"PCI-Express\" checkbox when adding a GPU via the Add PCI Device menu. I then had my virtual hardware set up so I could create a template from this VM.\n\nFinally, once I had booted a fresh VM from the above template, I had some annoyance getting the Nvidia drivers installed. In the end, as I mentioned above, it was simply because I didn't have my Secure Boot disabled, but I was able to find an easier way to install Nvidia drivers than downloading the `.run` file and installing it manually. You can merely search `apt` for nvidia drivers by running `apt search nvidia-driver` which should list a large number of driver versions. You install the version your card requires, which you can find out by going to Nvidia's website and look up your card to see the version of the driver it needs to use. In my case it was version 535, so I very easily installed the drivers by using the following command:\n\n```shell\n$ sudo apt install nvidia-driver-535 nvidia-dkms-535\n```\n\nAt this point everything worked beautifully! I was able to pass through my GPU, got it hooked up to Plex, and tested it to see the minimal CPU usage and hardware GPU transcoding in action!\n\n## Conclusion\n\nSometimes virtualization can be intimidating, frustrating, and difficult to figure out. On the other hand, it's very rewarding when you're able to get something working that has been troublesome for you. In this case I am super excited to be able to better utilize my Plex installation to watch my content, and while it was tough to get it working just right, I now understand a lot more around virtualization, cloud-init, and UEFI. That's the whole point of my homelab. Besides the fun I have messing around with stuff, I have already learned a ton about technology that has helped me both personally and in my career.","src/content/blog/pcie-passthrough-cloud-init.md","7043ba7faae977c8",{"html":368,"metadata":369},"\u003Cp>As I wrote about in my \u003Ca href=\"/posts/homelab\">last post\u003C/a> I have been diving into the world of homelabs and the fun and sometimes frustrating world of hosting your own services on your own hardware in your basement. I have been using Proxmox VE as my hypervisor of choice and have been loving it. That being said there are often times where I need to cobble together information from various sources to figure something out, whether it be the Proxmox forums, blog posts, or YouTube videos by a variety of homelabbers.\u003C/p>\n\u003Cp>I recently purchased a used Nvidia Quadro P2000 GPU on Ebay for my server to utilize for Plex hardware transcoding as my server’s CPU doesn’t have an iGPU so watching stuff on Plex always ended up being endless buffering. I finally got it this last week and popped it in my server and began the long arduous task of figuring out how to utilize PCIe Passthrough in Proxmox to be able to utilize that GPU in my Plex virtual machine. Thankfully, there are some excellent tutorials out there on the subject, including \u003Ca href=\"https://youtu.be/-HCzLhnNf-A\">this one\u003C/a> by Craft Computing which got me 90% of the way there.\u003C/p>\n\u003Ch2 id=\"the-problem\">The Problem\u003C/h2>\n\u003Cp>I will fully admit that this is a problem of my own making. I very recently followed \u003Ca href=\"https://technotim.live/posts/cloud-init-cloud-image/\">this tutorial\u003C/a> by TechnoTim on using cloud-init in Proxmox to create virtual machines using Ubuntu’s cloud images. Super awesome, I love the idea, and so naturally I had to set up Plex using a new cloud-init template. It was all going swimmingly until I tried to add my GPU to the VM in Proxmox, and suddenly when I tried to boot the VM it would just hang forever.\u003C/p>\n\u003Cp>Most other smart people probably would’ve just said “no worries, I’ll just use Plex in a VM that doesn’t use cloud-init and call it a day” but instead I decided I would rather spend hours diving down rabbit holes to figure it out. Thankfully, in combination with multiple forum threads, blog posts, random videos, and super friendly community members in the \u003Ca href=\"https://l.technotim.live/discord\">TechnoTim Discord\u003C/a>, I was able to get it working.\u003C/p>\n\u003Ch2 id=\"the-solution\">The Solution\u003C/h2>\n\u003Cp>The above tutorial is fantastic for setting up an awesome, clean, usable cloud-init template. I’m going to outline the changes I made that differ from that setup so that anyone else having this issue can clearly see the changes I made and hopefully get it working for themselves. The super short answer is that I needed it to be a UEFI boot setup with a few related changes to allow GPU passthrough, but here are the specific details.\u003C/p>\n\u003Cp>The first issue is that when I was setting up the cloud-init drive rather than using \u003Ccode>ide2\u003C/code> I needed to use \u003Ccode>scsi1\u003C/code>. I got that information from this Proxmox Forum \u003Ca href=\"https://forum.proxmox.com/threads/cloud-init-image-only-applies-configuration-on-second-boot.93414/post-454108\">thread comment\u003C/a> So I ran the following (replacing \u003Ccode>{VMID}\u003C/code> with my actual VMID):\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">$\u003C/span>\u003Cspan style=\"color:#E6DB74\"> qm\u003C/span>\u003Cspan style=\"color:#E6DB74\"> set\u003C/span>\u003Cspan style=\"color:#E6DB74\"> {VMID}\u003C/span>\u003Cspan style=\"color:#AE81FF\"> --scsi1\u003C/span>\u003Cspan style=\"color:#E6DB74\"> local-lvm:cloudinit\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Once I finished the commands in the above tutorial, I made some further changes to the VM before making it a template. The first is that I changed the BIOS to \u003Ccode>OVMF (UEFI)\u003C/code>. In order to support this, I needed to add an EFI Disk. I added that from the hardware menu, selected my storage target, and then SUPER IMPORTANTLY you need to UNCHECK the “Pre-Enroll keys” checkbox. This is a confusing name but basically this disables Secure Boot. If you have this enabled, then your Nvidia drivers won’t work. I spent a substantial amount of time trying to figure out why my Nvidia driver wasn’t working, and it wasn’t until a super friendly person in TechnoTim’s Discord server pointed me to that setting that I got this all working.\u003C/p>\n\u003Cp>Another change I needed to make in order to be able to correctly pass through the GPU is in the hardware menu in Proxmox, “Machine” was set to the default of \u003Ccode>i440fx\u003C/code>, and it needed to be set to \u003Ccode>q35\u003C/code>. That would allow me to select the “PCI-Express” checkbox when adding a GPU via the Add PCI Device menu. I then had my virtual hardware set up so I could create a template from this VM.\u003C/p>\n\u003Cp>Finally, once I had booted a fresh VM from the above template, I had some annoyance getting the Nvidia drivers installed. In the end, as I mentioned above, it was simply because I didn’t have my Secure Boot disabled, but I was able to find an easier way to install Nvidia drivers than downloading the \u003Ccode>.run\u003C/code> file and installing it manually. You can merely search \u003Ccode>apt\u003C/code> for nvidia drivers by running \u003Ccode>apt search nvidia-driver\u003C/code> which should list a large number of driver versions. You install the version your card requires, which you can find out by going to Nvidia’s website and look up your card to see the version of the driver it needs to use. In my case it was version 535, so I very easily installed the drivers by using the following command:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">$\u003C/span>\u003Cspan style=\"color:#E6DB74\"> sudo\u003C/span>\u003Cspan style=\"color:#E6DB74\"> apt\u003C/span>\u003Cspan style=\"color:#E6DB74\"> install\u003C/span>\u003Cspan style=\"color:#E6DB74\"> nvidia-driver-535\u003C/span>\u003Cspan style=\"color:#E6DB74\"> nvidia-dkms-535\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>At this point everything worked beautifully! I was able to pass through my GPU, got it hooked up to Plex, and tested it to see the minimal CPU usage and hardware GPU transcoding in action!\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Sometimes virtualization can be intimidating, frustrating, and difficult to figure out. On the other hand, it’s very rewarding when you’re able to get something working that has been troublesome for you. In this case I am super excited to be able to better utilize my Plex installation to watch my content, and while it was tough to get it working just right, I now understand a lot more around virtualization, cloud-init, and UEFI. That’s the whole point of my homelab. Besides the fun I have messing around with stuff, I have already learned a ton about technology that has helped me both personally and in my career.\u003C/p>",{"headings":370,"localImagePaths":378,"remoteImagePaths":379,"frontmatter":380,"imagePaths":383},[371,374,377],{"depth":30,"slug":372,"text":373},"the-problem","The Problem",{"depth":30,"slug":375,"text":376},"the-solution","The Solution",{"depth":30,"slug":172,"text":173},[],[],{"title":357,"published":17,"description":358,"date":381,"tags":382,"cover_image":363},["Date","2023-07-29T00:00:00.000Z"],[136,361,362],[],"pcie-passthrough-cloud-init.md","more-epic-environment-wsl2",{"id":385,"data":387,"body":394,"filePath":395,"digest":396,"rendered":397,"legacyId":421},{"title":388,"description":389,"date":390,"published":17,"tags":391,"cover_image":393},"Far More Epic Development Environment using WSL 2","WSL 2 is now out. And it's a phenomenal developer experience.",["Date","2020-08-16T00:00:00.000Z"],[302,392,304,305],"wsl2","/img/wsl2.png","By far my most read blog post was my first, [Epic Development Environment using Windows Subsystem for Linux](/posts/epic-dev-environment-wsl), and to this day it gets many views here on DEV, as well as on Medium where I originally published it, as people search for WSL to find out if it'll work for them. Well, since I published it at the end of 2017, a lot has changed, and I'm not referring to the pandemic in which we all find ourselves. I'm talking about WSL 2.\n\nThis year Microsoft released Windows Subsystem for Linux 2 alongside the Windows 10 version 2004 update. There are a number of differences between version 1 and 2. You can read more about the [exact differences](https://docs.microsoft.com/en-us/windows/wsl/compare-versions) but the key takeaways are that WSL 2 offers 100% system call compatibility, much faster performance, and less memory usage. Note that you only get the fast performance if you store the files you work with in the Linux filesystem. If for some reason you need to store your files in the Windows filesystem, you'll get better performance using WSL 1.\n\nSince I've upgraded my setup to use WSL 2, my quality of life has been upgraded in a major way. There have also been other advancements in a variety of other areas that make my new setup so much better than what I wrote about in my previous article. I'm super excited to go over them with you all.\n\n## Prerequisites\n\nTo use WSL 2 you must be running Windows 10 version 2004 or greater. WSL 2 is not available in builds before version 2004. In my previous article you needed Windows 10 Pro so Docker could use Hyper-V virtualization. Thankfully that's no longer required!\n\n## Install WSL 2\n\nLet's get WSL 2 installed. The first thing you need to do is enable the Windows Subsystem for Linux feature in Windows. You can do this simply by running the following command in PowerShell as an Administrator:\n\n```shell\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n```\n\nThis will enable the WSL feature. At this point you'll want to follow the [Update to WSL 2](https://docs.microsoft.com/en-us/windows/wsl/install-win10#update-to-wsl-2) instructions to update the WSL 1 installation to WSL 2. In short you need to run the following command, then restart your computer to complete installation:\n\n```shell\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\nOnce your computer has been restarted, make sure you run the following command as Administrator in PowerShell to ensure WSL 2 is always the default WSL version.\n\n```shell\nwsl --set-default-version 2\n```\n\n**NOTE:** You might get a message saying something like \"WSL 2 requires an update to its kernel component\". Make sure you follow the link provided and do what's needed.\n\nAt this point you can go to the Microsoft Store app and search for your favorite Linux distribution! Please note that this article assumes you are using Ubuntu. You can use any distro, however, you will simply need to find the correct commands to install things. Once you've installed your distro, go ahead and open it to perform the initial installation. It will ask you for a user and password for the Ubuntu userspace. When it's done, you're ready to get to installing!\n\n## Git\n\nAs before, many of the installations further on in this article require git. To install, simply run `sudo apt update && sudo apt install git`. You should also generate an SSH key. This is very simply accomplished by running: `ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"`.\n\n## ZSH (Optional)\n\nI'm simply going to copy paste this section from my previous article as nothing has changed at all here, and I'm still digging my ZSH setup.\n\nThis next step is completely optional. I love bash, and I love zsh, so either one works fine. **If you prefer bash, skip this section.**\n\nIt’s fairly straightforward to install zsh. After making sure you’ve run `sudo apt update` then install it with `sudo apt install zsh`. You can test to make sure it’s working by running `zsh` which should bring you into a zsh terminal!\n\nI also love [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh), which provides lots of beautiful themes and excellent plugins. I used the `curl` command under the [Basic Installation](https://github.com/robbyrussell/oh-my-zsh#basic-installation) instructions, and I was good to go! You can then select the theme you want by editing your `~/.zshrc` file and adding the theme name to the `ZSH_THEME` environment variable. Previously I was using the Pure theme for ZSH, but I've since moved over to the venerable [Powerlevel10k](https://github.com/romkatv/powerlevel10k) theme. It's super customizable, easy to setup, and has excellent speed.\n\n![Powerlevel10k Theme](/img/posts/more-epic-environment-wsl2/p10k.png)\n\n\u003Ccenter>\u003Csmall>Featured image from the \u003Ca href=\"https://github.com/romkatv/powerlevel10k\" target=\"_blank\">Powerlevel10k\u003C/a> repository\u003C/small>\u003C/center>\n\n## Windows Terminal\n\nThis is one area where I've absolutely changed my mind from 2017. Back then I used the Hyper terminal by Zeit. (The company has since rebranded to Vercel) While I still use that on my Mac, on Windows I now use the phenomenal [Windows Terminal](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701). It's fast, modern, and beautifully designed. It also works seamlessly with WSL, PowerShell, CMD, and more! It's got multiple tab support, Unicode support, custom themes, and a bunch of other great features. I highly recommend it for anyone doing any kind of development on Windows, whether it's WSL or not. You can simply find it on the Microsoft Store and install it from there for free.\n\nWhen you launch Windows Terminal _after_ having installed and run Ubuntu for the first time, it should pick up the distro automatically and add it to your terminal settings so it's an option to use. I like to make it my default when I open Windows Terminal, as well as a couple other changes to the configuration. Here's my specific Windows Terminal config for my Ubuntu distro:\n\n```json\n{\n  \"guid\": \"{GUID_HERE}\",\n  \"hidden\": false,\n  \"name\": \"Ubuntu\",\n  \"source\": \"Windows.Terminal.Wsl\",\n  \"startingDirectory\": \"//wsl$/Ubuntu/home/{UBUNTU_USERNAME}\",\n  \"fontFace\": \"Fira Code\",\n  \"useAcrylic\": true,\n  \"acrylicOpacity\": 0.8\n}\n```\n\nI set a few things here. First of all, I set my `startingDirectory` to be my Ubuntu home directory. Simply replace `{UBUNTU_USERNAME}` with your actual ubuntu username. I also **love** the [Fira Code](https://github.com/tonsky/FiraCode) font, so I've got that installed on my machine and I have my terminal using it. Lastly, I'm a huge fan of the Windows acrylic look, so I have my terminal using that effect. You're welcome to set that to `false` if you don't like it.\n\n![Windows Terminal](/img/posts/more-epic-environment-wsl2/terminal.jpeg)\n\n\u003Ccenter>\u003Csmall>Screenshot from the Windows Terminal store page\u003C/small>\u003C/center>\n\n## Visual Studio Code\n\nWhat has not changed is that [Visual Studio Code](https://code.visualstudio.com/) is possibly my favorite piece of software ever. As mentioned in my previous article, I’ve used IDEs, Sublime Text, Atom, Notepad++, I’ve tried almost all of the most used ones. VS Code is by far my favorite editor. It’s beautiful, incredibly lightweight, super fast, has tons of amazing extensions, built in debugger support, and is as close to full IDE functionality as any text editor I’ve ever used. I installed this as quickly as I could and brought down all [my settings](https://gist.github.com/jbw91/e77025c1fc4fe1d5137ac525398f2227) using the [Settings Sync extension](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync).\n\n**NOTE:** As of a couple days ago I probably won't be using the Settings Sync extension anymore as VS Code now has [built in settings sync support](https://code.visualstudio.com/docs/editor/settings-sync). My initial tests have been very positive.\n\nThere's one more extension you must get if you're doing WSL 2 development. This is different from my last article as this extension did not exist at the time. That's the [Remote - WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl) extension. This little extension makes many of the little gotchas I previously experienced go away. I used to have to install a tool called wsl-git that would proxy Windows git requests to WSL. This was so I could get the git features in VS Code to work. With this WSL extension you no longer need any of that. When you run `code .` from a folder inside of your WSL terminal, it will open that folder in VS Code and automatically use all the features and binaries from your WSL 2 installation instead of from Windows. You can install VS Code extensions that use the Linux binaries. It's a totally seamless experience that makes you forget you're not using Linux.\n\n![Visual Studio Code](/img/posts/more-epic-environment-wsl2/vscode.png)\n\n\u003Ccenter>\u003Csmall>My Visual Studio Code setup with the Remote - WSL extension\u003C/small>\u003C/center>\n\n## Node.js/NPM\n\nThis section remains the same as my previous article. Once again copying it over for posterity.\n\nPersonally I decided to take the approach of doing as much as absolutely possible inside of the WSL environment. Also, I am obsessed with NVM for managing my Node installs, which doesn’t work on Windows. So, instead of downloading the installer for Node.js for Windows, I installed nvm through Ubuntu’s repositories! You can follow the directions on [NVM’s Installation Instructions](https://github.com/creationix/nvm#install-script). I used `curl` to download the install script, which I installed by running `sudo apt install curl`.\n\nIf you did everything right, you should have nvm installed correctly. I then installed the Long Term Support version of node by running `nvm install --lts` and then `nvm use --lts` to set it as the version I’m currently using. I also set it to my default node version by running `nvm alias default {VERSION}` where VERSION is the version number you just installed.\n\n![Install of angular and typescript packages](/img/posts/more-epic-environment-wsl2/npm.png)\n\n\u003Ccenter>\u003Csmall>A global npm install of the Angular CLI & Typescript npm packages\u003C/small>\u003C/center>\n\n### Yarn\n\nAs an aside to installing Node, I thought I’d bring up that I also installed [Yarn](https://yarnpkg.com/), because I love Yarn. You can install it through Windows, but again, I’m trying to do everything I need through WSL, so I followed the [Linux Installation Instructions](https://yarnpkg.com/en/docs/install#linux-tab). Specifically the Ubuntu/Debian instructions, of course. This went without a hitch, and I had yarn working!\n\n![Yarn install](/img/posts/more-epic-environment-wsl2/yarn.png)\n\n\u003Ccenter>\u003Csmall>A yarn install working beautifully\u003C/small>\u003C/center>\n\n## Docker\n\nThis is one of the best parts of WSL 2 that has changed since last time. [Docker for Windows](https://docs.docker.com/docker-for-windows/install/) has been updated to support using WSL 2 as the backend for Docker. This was one of the pain points in the setup in WSL 1, and I had to alias the Windows executables to bash commands. There were occasional gotchas that generally were annoying. This is fantastic news, as those gotchas are all gone, and it's a totally seamless experience!\n\nTo get Docker up and running, simply download [Docker Desktop](https://www.docker.com/products/docker-desktop). During the installation it should prompt you whether or not you'd like to use the WSL 2 integration, so make sure you enable that. The [Docker Desktop WSL 2 Backend](https://docs.docker.com/docker-for-windows/wsl/) documentation gives detailed instructions on how to make sure things work properly in case you're having troubles getting this working.\n\nAt this point you should be able to use Docker and Docker Compose beautifully inside of both your Windows PowerShell environment as well as inside of your default WSL distro! (you can enable it inside of other WSL distros besides your default one in the WSL Integration settings in Docker Desktop)\n\n![Docker running mysql](/img/posts/more-epic-environment-wsl2/docker.png)\n\n\u003Ccenter>\u003Csmall>Docker for Windows pulling and running the mysql container\u003C/small>\u003C/center>\n\n## Last Words\n\nI'm hugely impressed with everything the WSL team has accomplished. WSL 2 is a massive improvement over WSL 1 and alongside other tools from Microsoft that integrate seamlessly with WSL 2, it's a phenomenal development environment that has very few if any compromises for the web development work I do. I have a work-issued Macbook Pro that I use through the work day, but I now immediately switch to my Windows machine when the work day is over and all the rest of what I do is done there with great enjoyment.\n\nFour years ago I had totally written off Windows for development. For me it was either Mac or dual boot a Linux distribution. I would occasionally come back and try Windows for coding, and would almost immediately give up. WSL 1 changed that for my personal side projects. To be honest, however, WSL 2 has me fully believing I could use Windows exclusively for everything I do and be super happy doing it. That's an awesome feeling for someone who has always loved Windows as a consumer operating system, and I'm so excited to see what other amazing dev tools come to Windows because of the amazing tool of WSL 2.","src/content/blog/more-epic-environment-wsl2.md","639c61cc0f8b2ba4",{"html":398,"metadata":399},"\u003Cp>By far my most read blog post was my first, \u003Ca href=\"/posts/epic-dev-environment-wsl\">Epic Development Environment using Windows Subsystem for Linux\u003C/a>, and to this day it gets many views here on DEV, as well as on Medium where I originally published it, as people search for WSL to find out if it’ll work for them. Well, since I published it at the end of 2017, a lot has changed, and I’m not referring to the pandemic in which we all find ourselves. I’m talking about WSL 2.\u003C/p>\n\u003Cp>This year Microsoft released Windows Subsystem for Linux 2 alongside the Windows 10 version 2004 update. There are a number of differences between version 1 and 2. You can read more about the \u003Ca href=\"https://docs.microsoft.com/en-us/windows/wsl/compare-versions\">exact differences\u003C/a> but the key takeaways are that WSL 2 offers 100% system call compatibility, much faster performance, and less memory usage. Note that you only get the fast performance if you store the files you work with in the Linux filesystem. If for some reason you need to store your files in the Windows filesystem, you’ll get better performance using WSL 1.\u003C/p>\n\u003Cp>Since I’ve upgraded my setup to use WSL 2, my quality of life has been upgraded in a major way. There have also been other advancements in a variety of other areas that make my new setup so much better than what I wrote about in my previous article. I’m super excited to go over them with you all.\u003C/p>\n\u003Ch2 id=\"prerequisites\">Prerequisites\u003C/h2>\n\u003Cp>To use WSL 2 you must be running Windows 10 version 2004 or greater. WSL 2 is not available in builds before version 2004. In my previous article you needed Windows 10 Pro so Docker could use Hyper-V virtualization. Thankfully that’s no longer required!\u003C/p>\n\u003Ch2 id=\"install-wsl-2\">Install WSL 2\u003C/h2>\n\u003Cp>Let’s get WSL 2 installed. The first thing you need to do is enable the Windows Subsystem for Linux feature in Windows. You can do this simply by running the following command in PowerShell as an Administrator:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">dism.exe\u003C/span>\u003Cspan style=\"color:#E6DB74\"> /online\u003C/span>\u003Cspan style=\"color:#E6DB74\"> /enable-feature\u003C/span>\u003Cspan style=\"color:#E6DB74\"> /featurename:Microsoft-Windows-Subsystem-Linux\u003C/span>\u003Cspan style=\"color:#E6DB74\"> /all\u003C/span>\u003Cspan style=\"color:#E6DB74\"> /norestart\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will enable the WSL feature. At this point you’ll want to follow the \u003Ca href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10#update-to-wsl-2\">Update to WSL 2\u003C/a> instructions to update the WSL 1 installation to WSL 2. In short you need to run the following command, then restart your computer to complete installation:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">dism.exe\u003C/span>\u003Cspan style=\"color:#E6DB74\"> /online\u003C/span>\u003Cspan style=\"color:#E6DB74\"> /enable-feature\u003C/span>\u003Cspan style=\"color:#E6DB74\"> /featurename:VirtualMachinePlatform\u003C/span>\u003Cspan style=\"color:#E6DB74\"> /all\u003C/span>\u003Cspan style=\"color:#E6DB74\"> /norestart\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Once your computer has been restarted, make sure you run the following command as Administrator in PowerShell to ensure WSL 2 is always the default WSL version.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">wsl\u003C/span>\u003Cspan style=\"color:#AE81FF\"> --set-default-version\u003C/span>\u003Cspan style=\"color:#AE81FF\"> 2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>NOTE:\u003C/strong> You might get a message saying something like “WSL 2 requires an update to its kernel component”. Make sure you follow the link provided and do what’s needed.\u003C/p>\n\u003Cp>At this point you can go to the Microsoft Store app and search for your favorite Linux distribution! Please note that this article assumes you are using Ubuntu. You can use any distro, however, you will simply need to find the correct commands to install things. Once you’ve installed your distro, go ahead and open it to perform the initial installation. It will ask you for a user and password for the Ubuntu userspace. When it’s done, you’re ready to get to installing!\u003C/p>\n\u003Ch2 id=\"git\">Git\u003C/h2>\n\u003Cp>As before, many of the installations further on in this article require git. To install, simply run \u003Ccode>sudo apt update &#x26;&#x26; sudo apt install git\u003C/code>. You should also generate an SSH key. This is very simply accomplished by running: \u003Ccode>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\u003C/code>.\u003C/p>\n\u003Ch2 id=\"zsh-optional\">ZSH (Optional)\u003C/h2>\n\u003Cp>I’m simply going to copy paste this section from my previous article as nothing has changed at all here, and I’m still digging my ZSH setup.\u003C/p>\n\u003Cp>This next step is completely optional. I love bash, and I love zsh, so either one works fine. \u003Cstrong>If you prefer bash, skip this section.\u003C/strong>\u003C/p>\n\u003Cp>It’s fairly straightforward to install zsh. After making sure you’ve run \u003Ccode>sudo apt update\u003C/code> then install it with \u003Ccode>sudo apt install zsh\u003C/code>. You can test to make sure it’s working by running \u003Ccode>zsh\u003C/code> which should bring you into a zsh terminal!\u003C/p>\n\u003Cp>I also love \u003Ca href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh\u003C/a>, which provides lots of beautiful themes and excellent plugins. I used the \u003Ccode>curl\u003C/code> command under the \u003Ca href=\"https://github.com/robbyrussell/oh-my-zsh#basic-installation\">Basic Installation\u003C/a> instructions, and I was good to go! You can then select the theme you want by editing your \u003Ccode>~/.zshrc\u003C/code> file and adding the theme name to the \u003Ccode>ZSH_THEME\u003C/code> environment variable. Previously I was using the Pure theme for ZSH, but I’ve since moved over to the venerable \u003Ca href=\"https://github.com/romkatv/powerlevel10k\">Powerlevel10k\u003C/a> theme. It’s super customizable, easy to setup, and has excellent speed.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/more-epic-environment-wsl2/p10k.png\" alt=\"Powerlevel10k Theme\">\u003C/p>\n\u003Ccenter>\u003Csmall>Featured image from the \u003Ca href=\"https://github.com/romkatv/powerlevel10k\" target=\"_blank\">Powerlevel10k\u003C/a> repository\u003C/small>\u003C/center>\n\u003Ch2 id=\"windows-terminal\">Windows Terminal\u003C/h2>\n\u003Cp>This is one area where I’ve absolutely changed my mind from 2017. Back then I used the Hyper terminal by Zeit. (The company has since rebranded to Vercel) While I still use that on my Mac, on Windows I now use the phenomenal \u003Ca href=\"https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701\">Windows Terminal\u003C/a>. It’s fast, modern, and beautifully designed. It also works seamlessly with WSL, PowerShell, CMD, and more! It’s got multiple tab support, Unicode support, custom themes, and a bunch of other great features. I highly recommend it for anyone doing any kind of development on Windows, whether it’s WSL or not. You can simply find it on the Microsoft Store and install it from there for free.\u003C/p>\n\u003Cp>When you launch Windows Terminal \u003Cem>after\u003C/em> having installed and run Ubuntu for the first time, it should pick up the distro automatically and add it to your terminal settings so it’s an option to use. I like to make it my default when I open Windows Terminal, as well as a couple other changes to the configuration. Here’s my specific Windows Terminal config for my Ubuntu distro:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  \"guid\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#CFCFC2\">\"{GUID_HERE}\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  \"hidden\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">false\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  \"name\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#CFCFC2\">\"Ubuntu\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  \"source\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#CFCFC2\">\"Windows.Terminal.Wsl\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  \"startingDirectory\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#CFCFC2\">\"//wsl$/Ubuntu/home/{UBUNTU_USERNAME}\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  \"fontFace\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#CFCFC2\">\"Fira Code\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  \"useAcrylic\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">true\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  \"acrylicOpacity\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">0.8\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I set a few things here. First of all, I set my \u003Ccode>startingDirectory\u003C/code> to be my Ubuntu home directory. Simply replace \u003Ccode>{UBUNTU_USERNAME}\u003C/code> with your actual ubuntu username. I also \u003Cstrong>love\u003C/strong> the \u003Ca href=\"https://github.com/tonsky/FiraCode\">Fira Code\u003C/a> font, so I’ve got that installed on my machine and I have my terminal using it. Lastly, I’m a huge fan of the Windows acrylic look, so I have my terminal using that effect. You’re welcome to set that to \u003Ccode>false\u003C/code> if you don’t like it.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/more-epic-environment-wsl2/terminal.jpeg\" alt=\"Windows Terminal\">\u003C/p>\n\u003Ccenter>\u003Csmall>Screenshot from the Windows Terminal store page\u003C/small>\u003C/center>\n\u003Ch2 id=\"visual-studio-code\">Visual Studio Code\u003C/h2>\n\u003Cp>What has not changed is that \u003Ca href=\"https://code.visualstudio.com/\">Visual Studio Code\u003C/a> is possibly my favorite piece of software ever. As mentioned in my previous article, I’ve used IDEs, Sublime Text, Atom, Notepad++, I’ve tried almost all of the most used ones. VS Code is by far my favorite editor. It’s beautiful, incredibly lightweight, super fast, has tons of amazing extensions, built in debugger support, and is as close to full IDE functionality as any text editor I’ve ever used. I installed this as quickly as I could and brought down all \u003Ca href=\"https://gist.github.com/jbw91/e77025c1fc4fe1d5137ac525398f2227\">my settings\u003C/a> using the \u003Ca href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\">Settings Sync extension\u003C/a>.\u003C/p>\n\u003Cp>\u003Cstrong>NOTE:\u003C/strong> As of a couple days ago I probably won’t be using the Settings Sync extension anymore as VS Code now has \u003Ca href=\"https://code.visualstudio.com/docs/editor/settings-sync\">built in settings sync support\u003C/a>. My initial tests have been very positive.\u003C/p>\n\u003Cp>There’s one more extension you must get if you’re doing WSL 2 development. This is different from my last article as this extension did not exist at the time. That’s the \u003Ca href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl\">Remote - WSL\u003C/a> extension. This little extension makes many of the little gotchas I previously experienced go away. I used to have to install a tool called wsl-git that would proxy Windows git requests to WSL. This was so I could get the git features in VS Code to work. With this WSL extension you no longer need any of that. When you run \u003Ccode>code .\u003C/code> from a folder inside of your WSL terminal, it will open that folder in VS Code and automatically use all the features and binaries from your WSL 2 installation instead of from Windows. You can install VS Code extensions that use the Linux binaries. It’s a totally seamless experience that makes you forget you’re not using Linux.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/more-epic-environment-wsl2/vscode.png\" alt=\"Visual Studio Code\">\u003C/p>\n\u003Ccenter>\u003Csmall>My Visual Studio Code setup with the Remote - WSL extension\u003C/small>\u003C/center>\n\u003Ch2 id=\"nodejsnpm\">Node.js/NPM\u003C/h2>\n\u003Cp>This section remains the same as my previous article. Once again copying it over for posterity.\u003C/p>\n\u003Cp>Personally I decided to take the approach of doing as much as absolutely possible inside of the WSL environment. Also, I am obsessed with NVM for managing my Node installs, which doesn’t work on Windows. So, instead of downloading the installer for Node.js for Windows, I installed nvm through Ubuntu’s repositories! You can follow the directions on \u003Ca href=\"https://github.com/creationix/nvm#install-script\">NVM’s Installation Instructions\u003C/a>. I used \u003Ccode>curl\u003C/code> to download the install script, which I installed by running \u003Ccode>sudo apt install curl\u003C/code>.\u003C/p>\n\u003Cp>If you did everything right, you should have nvm installed correctly. I then installed the Long Term Support version of node by running \u003Ccode>nvm install --lts\u003C/code> and then \u003Ccode>nvm use --lts\u003C/code> to set it as the version I’m currently using. I also set it to my default node version by running \u003Ccode>nvm alias default {VERSION}\u003C/code> where VERSION is the version number you just installed.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/more-epic-environment-wsl2/npm.png\" alt=\"Install of angular and typescript packages\">\u003C/p>\n\u003Ccenter>\u003Csmall>A global npm install of the Angular CLI &#x26; Typescript npm packages\u003C/small>\u003C/center>\n\u003Ch3 id=\"yarn\">Yarn\u003C/h3>\n\u003Cp>As an aside to installing Node, I thought I’d bring up that I also installed \u003Ca href=\"https://yarnpkg.com/\">Yarn\u003C/a>, because I love Yarn. You can install it through Windows, but again, I’m trying to do everything I need through WSL, so I followed the \u003Ca href=\"https://yarnpkg.com/en/docs/install#linux-tab\">Linux Installation Instructions\u003C/a>. Specifically the Ubuntu/Debian instructions, of course. This went without a hitch, and I had yarn working!\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/more-epic-environment-wsl2/yarn.png\" alt=\"Yarn install\">\u003C/p>\n\u003Ccenter>\u003Csmall>A yarn install working beautifully\u003C/small>\u003C/center>\n\u003Ch2 id=\"docker\">Docker\u003C/h2>\n\u003Cp>This is one of the best parts of WSL 2 that has changed since last time. \u003Ca href=\"https://docs.docker.com/docker-for-windows/install/\">Docker for Windows\u003C/a> has been updated to support using WSL 2 as the backend for Docker. This was one of the pain points in the setup in WSL 1, and I had to alias the Windows executables to bash commands. There were occasional gotchas that generally were annoying. This is fantastic news, as those gotchas are all gone, and it’s a totally seamless experience!\u003C/p>\n\u003Cp>To get Docker up and running, simply download \u003Ca href=\"https://www.docker.com/products/docker-desktop\">Docker Desktop\u003C/a>. During the installation it should prompt you whether or not you’d like to use the WSL 2 integration, so make sure you enable that. The \u003Ca href=\"https://docs.docker.com/docker-for-windows/wsl/\">Docker Desktop WSL 2 Backend\u003C/a> documentation gives detailed instructions on how to make sure things work properly in case you’re having troubles getting this working.\u003C/p>\n\u003Cp>At this point you should be able to use Docker and Docker Compose beautifully inside of both your Windows PowerShell environment as well as inside of your default WSL distro! (you can enable it inside of other WSL distros besides your default one in the WSL Integration settings in Docker Desktop)\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/more-epic-environment-wsl2/docker.png\" alt=\"Docker running mysql\">\u003C/p>\n\u003Ccenter>\u003Csmall>Docker for Windows pulling and running the mysql container\u003C/small>\u003C/center>\n\u003Ch2 id=\"last-words\">Last Words\u003C/h2>\n\u003Cp>I’m hugely impressed with everything the WSL team has accomplished. WSL 2 is a massive improvement over WSL 1 and alongside other tools from Microsoft that integrate seamlessly with WSL 2, it’s a phenomenal development environment that has very few if any compromises for the web development work I do. I have a work-issued Macbook Pro that I use through the work day, but I now immediately switch to my Windows machine when the work day is over and all the rest of what I do is done there with great enjoyment.\u003C/p>\n\u003Cp>Four years ago I had totally written off Windows for development. For me it was either Mac or dual boot a Linux distribution. I would occasionally come back and try Windows for coding, and would almost immediately give up. WSL 1 changed that for my personal side projects. To be honest, however, WSL 2 has me fully believing I could use Windows exclusively for everything I do and be super happy doing it. That’s an awesome feeling for someone who has always loved Windows as a consumer operating system, and I’m so excited to see what other amazing dev tools come to Windows because of the amazing tool of WSL 2.\u003C/p>",{"headings":400,"localImagePaths":415,"remoteImagePaths":416,"frontmatter":417,"imagePaths":420},[401,402,405,406,407,410,411,412,413,414],{"depth":30,"slug":315,"text":316},{"depth":30,"slug":403,"text":404},"install-wsl-2","Install WSL 2",{"depth":30,"slug":321,"text":322},{"depth":30,"slug":324,"text":325},{"depth":30,"slug":408,"text":409},"windows-terminal","Windows Terminal",{"depth":30,"slug":333,"text":334},{"depth":30,"slug":336,"text":337},{"depth":75,"slug":339,"text":340},{"depth":30,"slug":342,"text":343},{"depth":30,"slug":345,"text":346},[],[],{"title":388,"published":17,"description":389,"date":418,"tags":419,"cover_image":393},["Date","2020-08-16T00:00:00.000Z"],[302,392,304,305],[],"more-epic-environment-wsl2.md","zwave",{"id":422,"data":424,"body":431,"filePath":432,"digest":433,"rendered":434,"legacyId":458},{"title":425,"description":426,"date":427,"published":17,"tags":428,"cover_image":430},"Z-Wave for Home Assistant","I bought the Home Assistant Connect ZWA-2 and added it to my Home Assistant by connecting it to a Raspberry Pi in a central location. Here are the details of my setup.",["Date","2025-08-31T00:00:00.000Z"],[136,429,144],"homeassistant","/img/zwave-homeassistant.png","I have previously written posts about my [Homelab](/posts/homelab), it's a constantly ongoing side project for me. I love home automation, and at the center of my home automation is [Home Assistant](https://www.home-assistant.io/). It's one of my favorite open source projects of all time due to the absolutely incredible range of high quality integrations for basically every smart device and platform imaginable. Also despite how complex this system is, it's surprisingly easy to self host. You can either buy a pre-built device like a [Home Assistant Yellow](https://www.home-assistant.io/yellow/), or you can spin it up on your own server, computer, or even Raspberry Pi. Personally, I'm running Home Assistant OS as a virtual machine on my Proxmox server, and it has worked flawlessly for me. I've already got a bunch of integrations with various smart devices, but most of those are devices with cloud connections to provide the integrations. My long term plan is everything should be local-only, and for that I need a local-only communication protocol. Enter Z-Wave.\n\n### Z-Wave\n\nI personally chose to mostly go for Z-Wave devices. I did a lot of research on the various communication protocols for IoT devices and decided on Z-Wave. The other protocols and why I chose not to prioritize them are the following:\n\n**Wi-Fi:** This was pretty easy to disqualify. The more Wi-Fi devices you have the more clogged your wireless spectrum becomes. (especially if you're in an apartment building) That can negatively impact your Wi-Fi experience, and even things like wireless speakers can have degraded performance as a result.\n\n**Bluetooth:** Another easy one to disqualify, the range is super low by comparison to other protocols. Doesn't work for the majority of devices.\n\n**Zigbee:** This was the primary contender for me. It's cheaper than Z-Wave, but unfortunately it works on the same 2.4 GHz band as Wi-Fi, which means you have the same issue of clogging the band the more you get. So while I was initially planning on this, I opted not to in the end.\n\n**Matter:** This one is still quite new by comparison which means there is not a lot of device support. Also it uses the same 2.4 GHz band as Wi-Fi and Zigbee (although it can use other bands) so at the moment there's not enough reason for me to use it.\n\nThere are more protocols, but those are the main ones you'll read about when you are doing research most of the time. Z-Wave works exceptionally well, and despite being a little more expensive than some of the alternatives, it works great for excellent connectivity without clogging up your 2.4 GHz band. So that's what I chose and why I chose it.\n\n### Hub Choice\n\nThere are a ton of options for Z-Wave hubs/sticks. I opted to get the awesome \"Paper Towel Holder\", the [Home Assistant Connect ZWA-2](https://www.home-assistant.io/connect/zwa-2/). It's big so it's not for everyone, but it works great for me since it's in my office so it's not in the way. I also like that it supports both Z-Wave and Z-Wave Long-Range so I don't need to get a new hub in the future for longer-range devices. There are absolutely cheaper and smaller options like the many USB sticks out there such as the [Zooz 800 Series Z-Wave Long Range S2](https://www.amazon.com/dp/B0BW171KP3?ref_=ppx_hzsearch_conn_dt_b_fed_asin_title_1), so pick the option that works best for your needs.\n\n### Setup\n\nThe antenna I use, as well as most of the Z-Wave stick options, uses USB for the connection interface. I had a few issues I needed to work out when it came to the initial setup. Due to the fact that I use an enterprise server running [Proxmox](https://www.proxmox.com/en/) with a Home Assistant VM, it wasn't trivial to simply plug in the antenna because there are only a couple USB ports on the server mainly used for keyboard and mouse. In addition to that I would need to pass through the USB to the VM. Finally, even if I did all that, my server rack is in my basement so it wouldn't be the greatest placement with regards to where most of my smart devices will be.\n\nI decided instead to put the antenna in my office which is a much more central location in my house. I had a spare Raspberry Pi so I could plug it in to that. I next went back and forth on how to connect it to Home Assistant. I mainly looked at two options: USB-over-IP or [Z-Wave JS UI](https://github.com/zwave-js/zwave-js-ui). The first is exactly how it sounds, passing the USB device via the network. While that would work, it didn't give me any benefits. I instead opted to install Z-Wave JS UI on the Raspberry Pi and connect that to Home Assistant via their Z-Wave JS integration. I'm quite happy with how it's working, it was a seamless setup, and it's been rock solid. I love how all the devices are immediately available in Home Assistant for use. While I agonized over the choice originally, I'm very happy I chose the method I did. Note that when you're setting up the Z-Wave JS add-on in Home Assistant that you should choose the \"custom install\" flow, which is where you can connect your remote pi's websocket address. The other method will install the full software instead of just connecting to your already existing one. I'm not doing a step-by-step instruction guide because there are way better options out there for that on YouTube and otherwise.\n\nIn terms of positioning, while this technically should work just about anywhere due to the huge antenna and long-range technology, I opted to do it in a more central location in my office. The antenna and pi look just great sitting in my office next to my 3D printers. (I should probably do a post on 3D printing sometime...)\n\n![Antenna](/img/posts/zwave/antenna.jpeg)\n\n### Working with Z-Wave\n\nThe main issue I originally had with Z-Wave years ago is I didn't understand really how they worked or how security worked. So the Wi-Fi devices just seemed \"easier\". I've since learned all about it and love how Z-Wave works. Thankfully each of my devices I already had were ones where I could find the QR code sticker on the device somewhere to give me the DSK (device security key) so I could actually set them up securely. This 5-digit code is VERY important to not lose. Most light switches I've seen have the QR code sticker on the switch itself so I just removed the plate and pulled it out to get the code. My door lock didn't have one but thankfully I found where the door lock manual was. So, in short, when you buy Z-Wave devices, I would highly recommend you keep the manuals with the stickers in them. As an even better alternative, I just put the codes in my 1Password vault in a secure note for each device just in case I lose the manuals. You always want to use the proper device security instead of setting them up as insecure connections, otherwise your smart home will turn out to be not-so-smart.\n\nI also had my devices already connected to my thermostat which has a Z-Wave antenna built-in (although it's got terrible range and didn't work half the time, hence holding off investing in Z-Wave) so I had to exclude the devices from that before I could include them in my new network. Thankfully that was pretty easy, I just put the thermostat in exclusion mode and then toggled the device I wanted to exclude. Inclusion basically works the same way I just first put my Z-Wave JS in inclusion mode and then toggled the device. As part of inclusion you'll need to enter your DSK mentioned previously so it can connect securely. Super easy and they worked flawlessly.\n\n### Future Plans\n\nNow that my network is set up powered by this antenna, I can start obtaining more Z-Wave devices to put around the house. I've purchased some [Zooz dimmer switches](https://www.thesmartesthouse.com/products/zooz-700-series-z-wave-plus-s2-dimmer-switch-zen77?variant=40248171429951) That I plan on using to replace switches for the lights I most want to automate. For me the top of the list are outdoor lights that I always forget to turn off in daylight, and basement lights that I hate having to go downstairs to turn off manually when we forget to turn them off. Soon I also want to get some [presence sensors](https://shop.everythingsmart.io/products/everything-presence-one-kit?srsltid=AfmBOorTUIuoFXZ0LXPmAFqkKiaBBsRcZOGvsqsp91PeBXguPaFjrd9Y) that I can use to keep lights on when someone is present in a room and turn them off when they leave. So many cool things that can be automated.\n\nThe nice thing is the ZWA-2 I bought will be more than enough for my needs as I build out my Z-Wave network. I love having as many of my IoT devices as possible as local devices not reliant on cloud services. Obviously you can't escape it for some devices, but as much as I can I'll be choosing devices with Z-Wave support. Hopefully you enjoyed reading about my Z-Wave setup and my considerations for my personal setup. Automate all the things!","src/content/blog/zwave.md","fcbdd2d04cd26c61",{"html":435,"metadata":436},"\u003Cp>I have previously written posts about my \u003Ca href=\"/posts/homelab\">Homelab\u003C/a>, it’s a constantly ongoing side project for me. I love home automation, and at the center of my home automation is \u003Ca href=\"https://www.home-assistant.io/\">Home Assistant\u003C/a>. It’s one of my favorite open source projects of all time due to the absolutely incredible range of high quality integrations for basically every smart device and platform imaginable. Also despite how complex this system is, it’s surprisingly easy to self host. You can either buy a pre-built device like a \u003Ca href=\"https://www.home-assistant.io/yellow/\">Home Assistant Yellow\u003C/a>, or you can spin it up on your own server, computer, or even Raspberry Pi. Personally, I’m running Home Assistant OS as a virtual machine on my Proxmox server, and it has worked flawlessly for me. I’ve already got a bunch of integrations with various smart devices, but most of those are devices with cloud connections to provide the integrations. My long term plan is everything should be local-only, and for that I need a local-only communication protocol. Enter Z-Wave.\u003C/p>\n\u003Ch3 id=\"z-wave\">Z-Wave\u003C/h3>\n\u003Cp>I personally chose to mostly go for Z-Wave devices. I did a lot of research on the various communication protocols for IoT devices and decided on Z-Wave. The other protocols and why I chose not to prioritize them are the following:\u003C/p>\n\u003Cp>\u003Cstrong>Wi-Fi:\u003C/strong> This was pretty easy to disqualify. The more Wi-Fi devices you have the more clogged your wireless spectrum becomes. (especially if you’re in an apartment building) That can negatively impact your Wi-Fi experience, and even things like wireless speakers can have degraded performance as a result.\u003C/p>\n\u003Cp>\u003Cstrong>Bluetooth:\u003C/strong> Another easy one to disqualify, the range is super low by comparison to other protocols. Doesn’t work for the majority of devices.\u003C/p>\n\u003Cp>\u003Cstrong>Zigbee:\u003C/strong> This was the primary contender for me. It’s cheaper than Z-Wave, but unfortunately it works on the same 2.4 GHz band as Wi-Fi, which means you have the same issue of clogging the band the more you get. So while I was initially planning on this, I opted not to in the end.\u003C/p>\n\u003Cp>\u003Cstrong>Matter:\u003C/strong> This one is still quite new by comparison which means there is not a lot of device support. Also it uses the same 2.4 GHz band as Wi-Fi and Zigbee (although it can use other bands) so at the moment there’s not enough reason for me to use it.\u003C/p>\n\u003Cp>There are more protocols, but those are the main ones you’ll read about when you are doing research most of the time. Z-Wave works exceptionally well, and despite being a little more expensive than some of the alternatives, it works great for excellent connectivity without clogging up your 2.4 GHz band. So that’s what I chose and why I chose it.\u003C/p>\n\u003Ch3 id=\"hub-choice\">Hub Choice\u003C/h3>\n\u003Cp>There are a ton of options for Z-Wave hubs/sticks. I opted to get the awesome “Paper Towel Holder”, the \u003Ca href=\"https://www.home-assistant.io/connect/zwa-2/\">Home Assistant Connect ZWA-2\u003C/a>. It’s big so it’s not for everyone, but it works great for me since it’s in my office so it’s not in the way. I also like that it supports both Z-Wave and Z-Wave Long-Range so I don’t need to get a new hub in the future for longer-range devices. There are absolutely cheaper and smaller options like the many USB sticks out there such as the \u003Ca href=\"https://www.amazon.com/dp/B0BW171KP3?ref_=ppx_hzsearch_conn_dt_b_fed_asin_title_1\">Zooz 800 Series Z-Wave Long Range S2\u003C/a>, so pick the option that works best for your needs.\u003C/p>\n\u003Ch3 id=\"setup\">Setup\u003C/h3>\n\u003Cp>The antenna I use, as well as most of the Z-Wave stick options, uses USB for the connection interface. I had a few issues I needed to work out when it came to the initial setup. Due to the fact that I use an enterprise server running \u003Ca href=\"https://www.proxmox.com/en/\">Proxmox\u003C/a> with a Home Assistant VM, it wasn’t trivial to simply plug in the antenna because there are only a couple USB ports on the server mainly used for keyboard and mouse. In addition to that I would need to pass through the USB to the VM. Finally, even if I did all that, my server rack is in my basement so it wouldn’t be the greatest placement with regards to where most of my smart devices will be.\u003C/p>\n\u003Cp>I decided instead to put the antenna in my office which is a much more central location in my house. I had a spare Raspberry Pi so I could plug it in to that. I next went back and forth on how to connect it to Home Assistant. I mainly looked at two options: USB-over-IP or \u003Ca href=\"https://github.com/zwave-js/zwave-js-ui\">Z-Wave JS UI\u003C/a>. The first is exactly how it sounds, passing the USB device via the network. While that would work, it didn’t give me any benefits. I instead opted to install Z-Wave JS UI on the Raspberry Pi and connect that to Home Assistant via their Z-Wave JS integration. I’m quite happy with how it’s working, it was a seamless setup, and it’s been rock solid. I love how all the devices are immediately available in Home Assistant for use. While I agonized over the choice originally, I’m very happy I chose the method I did. Note that when you’re setting up the Z-Wave JS add-on in Home Assistant that you should choose the “custom install” flow, which is where you can connect your remote pi’s websocket address. The other method will install the full software instead of just connecting to your already existing one. I’m not doing a step-by-step instruction guide because there are way better options out there for that on YouTube and otherwise.\u003C/p>\n\u003Cp>In terms of positioning, while this technically should work just about anywhere due to the huge antenna and long-range technology, I opted to do it in a more central location in my office. The antenna and pi look just great sitting in my office next to my 3D printers. (I should probably do a post on 3D printing sometime…)\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/zwave/antenna.jpeg\" alt=\"Antenna\">\u003C/p>\n\u003Ch3 id=\"working-with-z-wave\">Working with Z-Wave\u003C/h3>\n\u003Cp>The main issue I originally had with Z-Wave years ago is I didn’t understand really how they worked or how security worked. So the Wi-Fi devices just seemed “easier”. I’ve since learned all about it and love how Z-Wave works. Thankfully each of my devices I already had were ones where I could find the QR code sticker on the device somewhere to give me the DSK (device security key) so I could actually set them up securely. This 5-digit code is VERY important to not lose. Most light switches I’ve seen have the QR code sticker on the switch itself so I just removed the plate and pulled it out to get the code. My door lock didn’t have one but thankfully I found where the door lock manual was. So, in short, when you buy Z-Wave devices, I would highly recommend you keep the manuals with the stickers in them. As an even better alternative, I just put the codes in my 1Password vault in a secure note for each device just in case I lose the manuals. You always want to use the proper device security instead of setting them up as insecure connections, otherwise your smart home will turn out to be not-so-smart.\u003C/p>\n\u003Cp>I also had my devices already connected to my thermostat which has a Z-Wave antenna built-in (although it’s got terrible range and didn’t work half the time, hence holding off investing in Z-Wave) so I had to exclude the devices from that before I could include them in my new network. Thankfully that was pretty easy, I just put the thermostat in exclusion mode and then toggled the device I wanted to exclude. Inclusion basically works the same way I just first put my Z-Wave JS in inclusion mode and then toggled the device. As part of inclusion you’ll need to enter your DSK mentioned previously so it can connect securely. Super easy and they worked flawlessly.\u003C/p>\n\u003Ch3 id=\"future-plans\">Future Plans\u003C/h3>\n\u003Cp>Now that my network is set up powered by this antenna, I can start obtaining more Z-Wave devices to put around the house. I’ve purchased some \u003Ca href=\"https://www.thesmartesthouse.com/products/zooz-700-series-z-wave-plus-s2-dimmer-switch-zen77?variant=40248171429951\">Zooz dimmer switches\u003C/a> That I plan on using to replace switches for the lights I most want to automate. For me the top of the list are outdoor lights that I always forget to turn off in daylight, and basement lights that I hate having to go downstairs to turn off manually when we forget to turn them off. Soon I also want to get some \u003Ca href=\"https://shop.everythingsmart.io/products/everything-presence-one-kit?srsltid=AfmBOorTUIuoFXZ0LXPmAFqkKiaBBsRcZOGvsqsp91PeBXguPaFjrd9Y\">presence sensors\u003C/a> that I can use to keep lights on when someone is present in a room and turn them off when they leave. So many cool things that can be automated.\u003C/p>\n\u003Cp>The nice thing is the ZWA-2 I bought will be more than enough for my needs as I build out my Z-Wave network. I love having as many of my IoT devices as possible as local devices not reliant on cloud services. Obviously you can’t escape it for some devices, but as much as I can I’ll be choosing devices with Z-Wave support. Hopefully you enjoyed reading about my Z-Wave setup and my considerations for my personal setup. Automate all the things!\u003C/p>",{"headings":437,"localImagePaths":452,"remoteImagePaths":453,"frontmatter":454,"imagePaths":457},[438,441,444,446,449],{"depth":75,"slug":439,"text":440},"z-wave","Z-Wave",{"depth":75,"slug":442,"text":443},"hub-choice","Hub Choice",{"depth":75,"slug":304,"text":445},"Setup",{"depth":75,"slug":447,"text":448},"working-with-z-wave","Working with Z-Wave",{"depth":75,"slug":450,"text":451},"future-plans","Future Plans",[],[],{"title":425,"published":17,"description":426,"date":455,"tags":456,"cover_image":430},["Date","2025-08-31T00:00:00.000Z"],[136,429,144],[],"zwave.md","reasons-for-choosing-angular",{"id":459,"data":461,"body":468,"filePath":469,"digest":470,"rendered":471,"legacyId":497},{"title":462,"description":463,"date":464,"published":17,"tags":465,"cover_image":467},"My Completely Biased Reasons for Choosing Angular","I love using Angular for my work and side projects. Come read why in this entirely opinion-based article!",["Date","2021-06-11T00:00:00.000Z"],[267,302,188,466],"frontend","/img/angular.png","I wanted the title to be painfully obvious. Just in case that didn't make it obvious enough, let me be even more clear. **This is my completely biased opinion.** You possibly vehemently disagree with me on this, _and that's okay._ This is not a post to try to claim Angular is better than React or Vue or Svelt or whatever other framework you're in love with. It's literally a post talking about why I, John Woodruff, choose to use Angular in personal projects small and large. Honestly, I'm not even trying to convince you to use Angular. In fact, my honest advice for picking a framework for a project is to pick the one you know the best, so you can be as productive as possible. So let's get all that out of the way up front, and dive into my **heavily biased** reasons for choosing Angular for personal projects. Keep in mind, when I make a statement it's an entirely opinion-based statement, so take it with a grain of salt.\n\n## Opinionated Framework\n\nLet's talk about one of the hottest topics up front. Angular is an opinionated framework. If you're not sure what that means, basically it's that the Angular framework defines how you should build applications, and they provide all of the essential tools you need to be able to build your applications. They provide solutions for routing, data fetching, internal data flow, and more, all bundled in the framework itself. Contrast this with something less opinionated like React which specifically does not define how you should build applications, it's simply a library to build components. You can then pick and choose any number of libraries for all the pieces you need to build your application, specifically the same things I mentioned above.\n\nSo why is that a hot topic? Well, opinionated or less-opinionated frameworks or libraries elicit all sorts of responses from the developers who use them. Many developers are very against opinionated frameworks, where many other developers love opinionated frameworks. So naturally many of the arguments both in favor of and against Angular are based on the fact that it's a highly opinionated framework. They have rigid structure for how Angular apps should be built, and many tools included out of the box.\n\nWell here we come to my first of several biased opinions. I love Angular because it's an opinionated framework. I love that I don't have to pick and choose from a million libraries to put together a complex app. 95% of what I need is already included in the Angular framework. I also don't need to decide \"how\" I want to build my applications, because Angular has a detailed style guide for building applications, and I'm able to focus entirely on the actual implementation of my application.\n\nThis is also why I love Angular for large complex apps within work environments. When working on teams there is often friction due to different teams or team members doing things differently. With Angular you eliminate a lot of that, because there are defined ways of doing things, and so it's far easier to scale across an organization. Having worked on large complex applications in work environments using both Angular and React, it's been infinitely easier to work within Angular applications due to the lack of a lot of the friction we had with the large React applications. It came down to Angular being opinionated, so there was far less mental overhead.\n\n## Angular CLI\n\n![Image of the terminal with an Angular CLI process running](/img/posts/reasons-for-choosing-angular/angular-cli.png)\n\nAh the [Angular CLI](https://angular.io/cli). This goes right along with the previous point of Angular being opinionated. The Angular CLI is the best way to build Angular applications due to it tightly following the Angular style guide. It generates a fully scaffolded Angular project for you, and has numerous generator commands for adding new components, services, modules, etc., has automated testing all set up for you out of the box, and more.\n\nIt also completely controls your build process, which means they fully manage the building and optimizing of your application. So all of your production builds make use of optimizations such as ahead-of-time compilation, source code minification, tree shaking, style auto-prefixing, and more. This is all stuff that you would have to figure out and do yourself using a build tool and numerous libraries and plugins. Instead of wasting time on all that, I can enjoy knowing that the Angular CLI is generating the best possible production build for me and I can focus on building awesome features.\n\n## Version Updates\n\nOne of the best features of Angular CLI, if not the best feature, is the `ng update` command. Ever since Angular 6 was released, the Angular CLI has included this command. It takes basically all the work out of doing version upgrades, and the Angular team did an absolutely phenomenal job of making this command work exceptionally well. They even have a super helpful [Update Guide](https://update.angular.io/) which gives detailed instructions, but almost all of them say that the changes should be automated by the `ng update` command. Normally when you have a major version update, you would have to manually go through your app updating dependencies, delving into changelogs, changing code in your app in numerous places to get rid of deprecated or removed features, and then painstakingly testing to make sure you haven't broken anything. This command, however, automates essentially all of that, including running code migrations that automatically migrate you to the latest recommended syntax. There have only been a handful of times where the changes required manual intervention in the code, and usually they were exceptionally quick to resolve. All the rest is fully automated by Angular CLI.\n\nEver since this command was released, I have spent approximately 5-10 minutes updating to the latest each time a new major version is released. Contrast this with major version upgrades that can sometimes take hours or even days to update your large complex applications to the latest versions. It even allows library authors to define their own schematics to automatically update their libraries, and that's awesome for users of the framework to not have to worry about manually keeping those up to date when they can just automate it. This has saved me countless hours every single time a major version is released, and I am completely spoiled when using other frameworks that don't provide this incredible functionality. (that's actually another upside to opinionated frameworks, it allows features like this that are otherwise unrealistic with unopinionated frameworks) The Angular team absolutely knocked it out of the park with this feature.\n\n## Angular CDK\n\n![Screenshot of the Angular CDK docs page](/img/posts/reasons-for-choosing-angular/angular-docs.png)\n\nAlongside [Angular Material](https://material.angular.io) is a super awesome little package called [Angular CDK](https://material.angular.io/cdk/categories). CDK stands for Component Dev Kit, and it is an incredibly handy package for helping you develop some of the more complex components an application requires. They're marketed as \"behavior primitives\" that you can use to build your own branded components.\n\nBuilding buttons and input fields and such are fairly straightforward for people building component libraries, but there are other components that are much more complex such as modals, accordions, data tables, drag and drop, trees, and more. Rather than building all this yourself or relying on libraries that style these components how they want, Angular CDK gives you ways to very easily build your own complex behavioral components that you can style easily to fit your company or project's branding. Not only that, but these components are often much more accessible than components you would build yourself. As has been the theme with this post, Angular CDK helps you save a ton of time by having these abstractions built out for you so you can worry about the look, feel, and implementation of your components rather than the more complex details such as positioning, scroll behaviors, etc. It has saved me an enormous amount of time and complexity when building my components. If you're building with Angular, even if you don't use Angular Material, you should absolutely use Angular CDK.\n\n## Dependency Injection\n\nThis is a hot topic for some reason, but Dependency Injection is another huge reason why I love to use Angular. It allows me to not have to worry about defining my own patterns for singleton vs factories. Instead, [Angular's Dependency Injection](https://angular.io/guide/dependency-injection) tooling makes it exceptionally easy for me to provide the dependencies I need, anywhere I need them, and to do it in an easy manner. Rather than have to instantiate a service in a component, I can simply inject my service and Angular's Dependency Injection will ensure I am given the correctly instantiated service, like so:\n\n```typescript\n// Some service I've defined\n@Injectable()\nexport class MyService {\n  /* ... */\n}\n\n// Some component in my app\n@Component({\n  /* ... */\n})\nexport class MyComponent {\n  constructor(private service: MyService) {}\n}\n```\n\nThe other huge benefit to Dependency Injection is for better testability. Automated tests are something that I consider absolutely vital to the success or failure of a product and the team that builds it. Dependency Injection in Angular makes it incredibly easy to test, mock out, and handle dependencies external to the unit of code I'm testing at the moment. Consider the above component. To mock a method I simply need to inject the correct dependency and then utilize Jasmine's spies to mock out the method.\n\n```typescript\ndescribe('MyComponent', () => {\n  let service: MyService;\n\n  beforeEach(async () => {\n    // Initialize Angular TestBed\n    await TestBed.configureTestingModule({\n      declarations: [MyComponent]\n    }).compileComponents();\n\n    // Inject MyService for mocking\n    service = TestBed.inject(MyService);\n    // Mock out `sayHello` method\n    spyOn(service, 'sayHello').and.returnValue('Hello World!');\n  });\n});\n```\n\nIt makes working in large complex codebases much more trivial, and makes testing vastly more simple. Are there downsides to Dependency Injection? Absolutely. No matter what pattern you choose, there are always going to be tradeoffs. It comes down to what tradeoffs you're willing to make in exchange for the benefits you consider most valuable. For me, Angular's Dependency Injection is one of the main reasons I choose it over other frameworks.\n\n## Conclusion\n\nIn case you've forgotten by this point, I'll reiterate one more time that this post is incredibly biased and entirely opinion-based. I absolutely love to use Angular, it's my framework of choice for side projects, and I believe it's an excellent choice for many of you as well. _That being said,_ I absolutely would argue that it's not a good choice for many others. When it comes down to it, you need to weigh the pros and cons of each framework, decide what tradeoffs you're willing to make, and choose based on what you decide. For many of you that's going to be React, or Vue, or Svelt, or Stencil, or Ember, or heck maybe even Backbone. And that's absolutely okay.\n\nI wanted to write this article to provide perspective to why I personally choose Angular over another framework. Not to provide more fodder for the \"framework wars\" or to bash on another person's choice. I will always say that the best framework choice for a project is the one you or your team is the most familiar with that will help you be the most productive and provide the fewest tradeoffs for what you want. In fact I love to read other peoples' completely biased articles on why they choose their framework (or library or text editor or whatever) and I enjoy celebrating their success and happiness over what they've chosen, while I enjoy what I've chosen. If there's anyone else out there like me who chooses Angular for their side projects, I'd love to chat in the comments about what your reasons are! And if you want to bash Angular or another framework for it not being as good as Framework X or Y, I humbly request you save those comments for the posts that encourage it. ❤🌈","src/content/blog/reasons-for-choosing-angular.md","40573008ff391583",{"html":472,"metadata":473},"\u003Cp>I wanted the title to be painfully obvious. Just in case that didn’t make it obvious enough, let me be even more clear. \u003Cstrong>This is my completely biased opinion.\u003C/strong> You possibly vehemently disagree with me on this, \u003Cem>and that’s okay.\u003C/em> This is not a post to try to claim Angular is better than React or Vue or Svelt or whatever other framework you’re in love with. It’s literally a post talking about why I, John Woodruff, choose to use Angular in personal projects small and large. Honestly, I’m not even trying to convince you to use Angular. In fact, my honest advice for picking a framework for a project is to pick the one you know the best, so you can be as productive as possible. So let’s get all that out of the way up front, and dive into my \u003Cstrong>heavily biased\u003C/strong> reasons for choosing Angular for personal projects. Keep in mind, when I make a statement it’s an entirely opinion-based statement, so take it with a grain of salt.\u003C/p>\n\u003Ch2 id=\"opinionated-framework\">Opinionated Framework\u003C/h2>\n\u003Cp>Let’s talk about one of the hottest topics up front. Angular is an opinionated framework. If you’re not sure what that means, basically it’s that the Angular framework defines how you should build applications, and they provide all of the essential tools you need to be able to build your applications. They provide solutions for routing, data fetching, internal data flow, and more, all bundled in the framework itself. Contrast this with something less opinionated like React which specifically does not define how you should build applications, it’s simply a library to build components. You can then pick and choose any number of libraries for all the pieces you need to build your application, specifically the same things I mentioned above.\u003C/p>\n\u003Cp>So why is that a hot topic? Well, opinionated or less-opinionated frameworks or libraries elicit all sorts of responses from the developers who use them. Many developers are very against opinionated frameworks, where many other developers love opinionated frameworks. So naturally many of the arguments both in favor of and against Angular are based on the fact that it’s a highly opinionated framework. They have rigid structure for how Angular apps should be built, and many tools included out of the box.\u003C/p>\n\u003Cp>Well here we come to my first of several biased opinions. I love Angular because it’s an opinionated framework. I love that I don’t have to pick and choose from a million libraries to put together a complex app. 95% of what I need is already included in the Angular framework. I also don’t need to decide “how” I want to build my applications, because Angular has a detailed style guide for building applications, and I’m able to focus entirely on the actual implementation of my application.\u003C/p>\n\u003Cp>This is also why I love Angular for large complex apps within work environments. When working on teams there is often friction due to different teams or team members doing things differently. With Angular you eliminate a lot of that, because there are defined ways of doing things, and so it’s far easier to scale across an organization. Having worked on large complex applications in work environments using both Angular and React, it’s been infinitely easier to work within Angular applications due to the lack of a lot of the friction we had with the large React applications. It came down to Angular being opinionated, so there was far less mental overhead.\u003C/p>\n\u003Ch2 id=\"angular-cli\">Angular CLI\u003C/h2>\n\u003Cp>\u003Cimg src=\"/img/posts/reasons-for-choosing-angular/angular-cli.png\" alt=\"Image of the terminal with an Angular CLI process running\">\u003C/p>\n\u003Cp>Ah the \u003Ca href=\"https://angular.io/cli\">Angular CLI\u003C/a>. This goes right along with the previous point of Angular being opinionated. The Angular CLI is the best way to build Angular applications due to it tightly following the Angular style guide. It generates a fully scaffolded Angular project for you, and has numerous generator commands for adding new components, services, modules, etc., has automated testing all set up for you out of the box, and more.\u003C/p>\n\u003Cp>It also completely controls your build process, which means they fully manage the building and optimizing of your application. So all of your production builds make use of optimizations such as ahead-of-time compilation, source code minification, tree shaking, style auto-prefixing, and more. This is all stuff that you would have to figure out and do yourself using a build tool and numerous libraries and plugins. Instead of wasting time on all that, I can enjoy knowing that the Angular CLI is generating the best possible production build for me and I can focus on building awesome features.\u003C/p>\n\u003Ch2 id=\"version-updates\">Version Updates\u003C/h2>\n\u003Cp>One of the best features of Angular CLI, if not the best feature, is the \u003Ccode>ng update\u003C/code> command. Ever since Angular 6 was released, the Angular CLI has included this command. It takes basically all the work out of doing version upgrades, and the Angular team did an absolutely phenomenal job of making this command work exceptionally well. They even have a super helpful \u003Ca href=\"https://update.angular.io/\">Update Guide\u003C/a> which gives detailed instructions, but almost all of them say that the changes should be automated by the \u003Ccode>ng update\u003C/code> command. Normally when you have a major version update, you would have to manually go through your app updating dependencies, delving into changelogs, changing code in your app in numerous places to get rid of deprecated or removed features, and then painstakingly testing to make sure you haven’t broken anything. This command, however, automates essentially all of that, including running code migrations that automatically migrate you to the latest recommended syntax. There have only been a handful of times where the changes required manual intervention in the code, and usually they were exceptionally quick to resolve. All the rest is fully automated by Angular CLI.\u003C/p>\n\u003Cp>Ever since this command was released, I have spent approximately 5-10 minutes updating to the latest each time a new major version is released. Contrast this with major version upgrades that can sometimes take hours or even days to update your large complex applications to the latest versions. It even allows library authors to define their own schematics to automatically update their libraries, and that’s awesome for users of the framework to not have to worry about manually keeping those up to date when they can just automate it. This has saved me countless hours every single time a major version is released, and I am completely spoiled when using other frameworks that don’t provide this incredible functionality. (that’s actually another upside to opinionated frameworks, it allows features like this that are otherwise unrealistic with unopinionated frameworks) The Angular team absolutely knocked it out of the park with this feature.\u003C/p>\n\u003Ch2 id=\"angular-cdk\">Angular CDK\u003C/h2>\n\u003Cp>\u003Cimg src=\"/img/posts/reasons-for-choosing-angular/angular-docs.png\" alt=\"Screenshot of the Angular CDK docs page\">\u003C/p>\n\u003Cp>Alongside \u003Ca href=\"https://material.angular.io\">Angular Material\u003C/a> is a super awesome little package called \u003Ca href=\"https://material.angular.io/cdk/categories\">Angular CDK\u003C/a>. CDK stands for Component Dev Kit, and it is an incredibly handy package for helping you develop some of the more complex components an application requires. They’re marketed as “behavior primitives” that you can use to build your own branded components.\u003C/p>\n\u003Cp>Building buttons and input fields and such are fairly straightforward for people building component libraries, but there are other components that are much more complex such as modals, accordions, data tables, drag and drop, trees, and more. Rather than building all this yourself or relying on libraries that style these components how they want, Angular CDK gives you ways to very easily build your own complex behavioral components that you can style easily to fit your company or project’s branding. Not only that, but these components are often much more accessible than components you would build yourself. As has been the theme with this post, Angular CDK helps you save a ton of time by having these abstractions built out for you so you can worry about the look, feel, and implementation of your components rather than the more complex details such as positioning, scroll behaviors, etc. It has saved me an enormous amount of time and complexity when building my components. If you’re building with Angular, even if you don’t use Angular Material, you should absolutely use Angular CDK.\u003C/p>\n\u003Ch2 id=\"dependency-injection\">Dependency Injection\u003C/h2>\n\u003Cp>This is a hot topic for some reason, but Dependency Injection is another huge reason why I love to use Angular. It allows me to not have to worry about defining my own patterns for singleton vs factories. Instead, \u003Ca href=\"https://angular.io/guide/dependency-injection\">Angular’s Dependency Injection\u003C/a> tooling makes it exceptionally easy for me to provide the dependencies I need, anywhere I need them, and to do it in an easy manner. Rather than have to instantiate a service in a component, I can simply inject my service and Angular’s Dependency Injection will ensure I am given the correctly instantiated service, like so:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">// Some service I've defined\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Injectable\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">MyService\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  /* ... */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">// Some component in my app\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Component\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  /* ... */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">MyComponent\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  constructor\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#F92672\">private\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\"> service\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">MyService\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The other huge benefit to Dependency Injection is for better testability. Automated tests are something that I consider absolutely vital to the success or failure of a product and the team that builds it. Dependency Injection in Angular makes it incredibly easy to test, mock out, and handle dependencies external to the unit of code I’m testing at the moment. Consider the above component. To mock a method I simply need to inject the correct dependency and then utilize Jasmine’s spies to mock out the method.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">describe\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E6DB74\">'MyComponent'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, () \u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\">=>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  let\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> service\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">MyService\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  beforeEach\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#F92672\">async\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> () \u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\">=>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Initialize Angular TestBed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    await\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> TestBed.\u003C/span>\u003Cspan style=\"color:#A6E22E\">configureTestingModule\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      declarations: [MyComponent]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }).\u003C/span>\u003Cspan style=\"color:#A6E22E\">compileComponents\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Inject MyService for mocking\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    service \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> TestBed.\u003C/span>\u003Cspan style=\"color:#A6E22E\">inject\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(MyService);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Mock out `sayHello` method\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">    spyOn\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(service, \u003C/span>\u003Cspan style=\"color:#E6DB74\">'sayHello'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">).and.\u003C/span>\u003Cspan style=\"color:#A6E22E\">returnValue\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E6DB74\">'Hello World!'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>It makes working in large complex codebases much more trivial, and makes testing vastly more simple. Are there downsides to Dependency Injection? Absolutely. No matter what pattern you choose, there are always going to be tradeoffs. It comes down to what tradeoffs you’re willing to make in exchange for the benefits you consider most valuable. For me, Angular’s Dependency Injection is one of the main reasons I choose it over other frameworks.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>In case you’ve forgotten by this point, I’ll reiterate one more time that this post is incredibly biased and entirely opinion-based. I absolutely love to use Angular, it’s my framework of choice for side projects, and I believe it’s an excellent choice for many of you as well. \u003Cem>That being said,\u003C/em> I absolutely would argue that it’s not a good choice for many others. When it comes down to it, you need to weigh the pros and cons of each framework, decide what tradeoffs you’re willing to make, and choose based on what you decide. For many of you that’s going to be React, or Vue, or Svelt, or Stencil, or Ember, or heck maybe even Backbone. And that’s absolutely okay.\u003C/p>\n\u003Cp>I wanted to write this article to provide perspective to why I personally choose Angular over another framework. Not to provide more fodder for the “framework wars” or to bash on another person’s choice. I will always say that the best framework choice for a project is the one you or your team is the most familiar with that will help you be the most productive and provide the fewest tradeoffs for what you want. In fact I love to read other peoples’ completely biased articles on why they choose their framework (or library or text editor or whatever) and I enjoy celebrating their success and happiness over what they’ve chosen, while I enjoy what I’ve chosen. If there’s anyone else out there like me who chooses Angular for their side projects, I’d love to chat in the comments about what your reasons are! And if you want to bash Angular or another framework for it not being as good as Framework X or Y, I humbly request you save those comments for the posts that encourage it. ❤🌈\u003C/p>",{"headings":474,"localImagePaths":491,"remoteImagePaths":492,"frontmatter":493,"imagePaths":496},[475,478,481,484,487,490],{"depth":30,"slug":476,"text":477},"opinionated-framework","Opinionated Framework",{"depth":30,"slug":479,"text":480},"angular-cli","Angular CLI",{"depth":30,"slug":482,"text":483},"version-updates","Version Updates",{"depth":30,"slug":485,"text":486},"angular-cdk","Angular CDK",{"depth":30,"slug":488,"text":489},"dependency-injection","Dependency Injection",{"depth":30,"slug":172,"text":173},[],[],{"title":462,"published":17,"description":463,"date":494,"tags":495,"cover_image":467},["Date","2021-06-11T00:00:00.000Z"],[267,302,188,466],[],"reasons-for-choosing-angular.md","angular-cdk-dialog",{"id":498,"data":500,"body":509,"filePath":510,"digest":511,"rendered":512,"legacyId":542},{"title":501,"description":502,"date":503,"published":17,"tags":504,"cover_image":507,"cover_image_alt":508,"series":486},"Angular CDK - Creating a Custom Dialog","The first in a series of posts about using the Angular CDK to create your own custom components. This post uses the Overlay package to create modals.",["Date","2021-11-28T00:00:00.000Z"],[267,505,506,302],"cdk","typescript","/img/dialog.png","Dialog design","**Update 2022:** Angular 14 was released, and with it the new [Dialog CDK primitive](https://material.angular.io/cdk/dialog/overview)! It accomplishes essentially the same thing as this post, where you can open a completely unstyled dialog and do all the branding yourself! Unless you need additional functionality that doesn't provide, definitely use the CDK Dialog.\n\n---\n\n_This is the first in a series of posts about using the Angular CDK library to build your own custom components._\n\nIf you're building applications using Angular, you probably know about the amazing [Angular Material](https://material.angular.io/) library. It's a component library that implements the Material Design spec. For many teams and applications, particularly those without design resources, it's a fantastic tool for building applications with a high quality design system. I have used it many times with great success.\n\nThere have been times, however, where I wanted the amazing developer experience of Angular Material, but I couldn't use the Material design that it implements because the company has an existing design system. It's precisely for these situations that the Angular team created [Angular CDK](https://material.angular.io/cdk/categories), or the \"Component Dev Kit\". According to their website, the CDK is \"a set of behavior primitives for building UI components\". The CDK is fantastic because it abstracts away a lot of the really complex behavior implementation in building UI components.\n\nBecause of all these benefits, I try to always utilize the CDK for as much as possible when writing Angular applications. For this series of posts I hope to dig in to as many pieces of the CDK as possible to help you build your own high quality design system. In this post I'm going to specifically talk about building an alternative to `MatDialog`, as that is a very commonly used service for creating modals.\n\n## Dialog Service\n\nIn Angular Material, the `MatDialog` service allows you to pass a component to the service which it will then open in a floating dialog that's globally centered both horizontally and vertically. Obviously this dialog implements the Material Design spec including animations when opening and closing. Because of this, we want to implement our own design, but the ergonomics of the `MatDialog` service are great. So our implementation, while not exactly the same, will be similar and provide some of the same features.\n\nThe design of the API is fairly simple, but extendable when needed. We'll have have an `open` method that takes in an Angular component to be opened in the dialog. We can also pass data to the component that can be used if needed. This method will return a reference to the dialog that we can use to close it programatically or subscribe to when it's closed. This API design is simple and easy to extend as needed, but gets us a highly functional dialog service.\n\nHere is a demo of the finished product with all the features mentioned above. We'll be going through step by step but you're welcome to simply reference the code here if preferred.\n\n\u003Ciframe src=\"https://stackblitz.com/edit/angular-ivy-sdmh7e?embed=1&file=src/app/dialog/dialog.service.ts\" title=\"stackblitz-example\">\u003C/iframe>\n\n## Prerequisites\n\nFirst off we need to make sure we've got Angular CDK in our app. You have two ways you can do this. The first and least manual is to install it alongside Angular Material, via their provided Angular CLI schematic. Note that this will also install and configure Angular Material, a theme, and set up the styles. This is good in some ways because it includes the Angular CDK styles as part of the Angular Material theme. You can do that by using the following command:\n\n```shell\n$ ng add @angular/material\n```\n\nIf you know for a fact that you're never going to want to use anything from Angular Material, and only want the CDK, then you can install it by itself from npm. Note that you must install the same version number that matches your Angular version, like so:\n\n```shell\n$ npm install --save @angular/cdk@12.2.13\n```\n\nThis will not configure any styles, so you'll need to reference them properly as the docs outline for each piece you use. This is the method I'll be using in these tutorials because I know I won't want Angular Material as that is the whole point of this series. So now, no matter the path you chose, you have the Angular CDK installed and ready to go!\n\n## CDK Overlay\n\nFirst let me explain how the CDK overlay concept works. There are three pieces to this that work together. There's the component we want to render, there's a [Portal](https://material.angular.io/cdk/portal/overview) which is a CDK package for rendering dynamic content such as a component, and then there's an [Overlay](https://material.angular.io/cdk/overlay/overview) which is a CDK package for opening floating panels on the screen. Basically what we do is attach a component to a `ComponentPortal`, then attach that portal to an `OverlayRef` which we'll open.\n\nThere are a number of ways you can use the Angular CDK's overlay. You can use it programmatically or even as directives on markup. In our situation we want to use it programmatically so we can invoke it from anywhere via a service in our logic. So let's start out by creating a simple Angular service and stubbing out the basic API along with a couple of comments on what needs to be done.\n\n```typescript\nimport { ComponentType } from '@angular/cdk/overlay';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogService {\n  constructor() {}\n\n  open\u003CT>(component: ComponentType\u003CT>) {\n    // 1. Create the overlay\n    // 2. Attach component portal to the overlay\n  }\n}\n```\n\nThis is the very beginning of our service. We know that we want an `open` method, and we know it needs to take some component to open. You'll notice we're using the type of `ComponentType` from the Angular CDK overlay package. This is a type that allows us to receive any Angular component, and that's what is passed to the CDK when instantiating the component. Of course we also have our generic `\u003CT>` which will be the type of the component we pass through.\n\n### Create Overlay\n\nAs we mentioned above we need to first create an overlay. To create an overlay we most importantly need a [PositionStrategy](https://material.angular.io/cdk/overlay/overview#position-strategies). This defines _where_ on the screen we want to open this overlay. There are a couple options, but in this post we'll be using the `GlobalPositionStrategy`. This means we won't be attaching it to a specific element. We also can provide a few more optional configuration options, which we'll do. Here's how we create that overlay, injecting the `Overlay` class in the constructor:\n\n```typescript\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\n//...\nexport class DialogService {\n  constructor(private overlay: Overlay) {}\n\n  open\u003CT>(component: ComponentType\u003CT>) {\n    // Globally centered position strategy\n    const positionStrategy = this.overlay\n      .position()\n      .global()\n      .centerHorizontally()\n      .centerVertically();\n\n    // Create the overlay with customizable options\n    const overlayRef = this.overlay.create({\n      positionStrategy,\n      hasBackdrop: true,\n      backdropClass: 'overlay-backdrop',\n      panelClass: 'overlay-panel'\n    });\n\n    // Attach component portal to the overlay\n  }\n}\n```\n\nWe did a couple of things. First, we defined our position strategy. We declared that we want a global strategy, and we want to position the overlay in the center of the screen both horizontally and vertically. You can also position your overlay (similar to absolute positioning) by giving it a top, left, right, or bottom value. This might be useful if you wanted to open a sidepanel or a bottom sheet. Since we're just making a standard modal, we're centering it on the screen.\n\nWe're also defining some information about the panel and backdrop. First we're defining that we want a backdrop for this modal, as well as providing the backdrop class for that. That's where we can define how we want to style the backdrop, which I'll be styling with a darkly translucent backdrop. We're also providing a panel class, which will be applied to the parent \"panel\" that we'll be rendering our component in. I just did some basic styling to make the background white and have a little padding. You can see my styles I provided in `src/styles.scss`.\n\n### Create Component Portal\n\nNext we need to create our `ComponentPortal` that we'll then attach to the overlay. It's quite straightforward, and we do it like so:\n\n```typescript\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\n//...\nexport class DialogService {\n  constructor(private overlay: Overlay) {}\n\n  open\u003CT>(component: ComponentType\u003CT>) {\n    // Globally centered position strategy\n    // ...\n\n    // Create the overlay with customizable options\n    const overlayRef = this.overlay.create({\n      // ...\n    });\n\n    // Attach component portal to the overlay\n    const portal = new ComponentPortal(component);\n    overlayRef.attach(portal);\n  }\n}\n```\n\nAt this point we can successfully open this dialog if we actually call this method and pass a component to it. While we could just leave our service like this, it definitely doesn't meet the common usecases that we could do with `MatDialog`. We want to be able return a dialog reference so we can programmatically close the overlay or subscribe to when the overlay gets closed. So let's add that to our implementation.\n\n### Dialog Reference\n\nLet's create a simple `DialogRef` class. It should take in an `OverlayRef` which we can use to close the overlay, and it should have an rxjs `Subject` so we can subscribe to when the overlay is closed. So let's implement this simple class:\n\n```typescript\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { Subject, Observable } from 'rxjs';\n\n/**\n * A reference to the dialog itself.\n * Can be injected into the component added to the overlay and then used to close itself.\n */\nexport class DialogRef {\n  private afterClosedSubject = new Subject\u003Cany>();\n\n  constructor(private overlayRef: OverlayRef) {}\n\n  /**\n   * Closes the overlay. You can optionally provide a result.\n   */\n  public close(result?: any) {\n    this.overlayRef.dispose();\n    this.afterClosedSubject.next(result);\n    this.afterClosedSubject.complete();\n  }\n\n  /**\n   * An Observable that notifies when the overlay has closed\n   */\n  public afterClosed(): Observable\u003Cany> {\n    return this.afterClosedSubject.asObservable();\n  }\n}\n```\n\nNow we need to add this in to our `open` method so we can create this reference and return it from the method on creation. So let's put that in here:\n\n```typescript\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { DialogRef } from './dialog-ref';\n//...\nexport class DialogService {\n  constructor(private overlay: Overlay) {}\n\n  open\u003CT>(component: ComponentType\u003CT>): DialogRef {\n    // Globally centered position strategy\n    // ...\n\n    // Create the overlay with customizable options\n    const overlayRef = this.overlay.create({\n      // ...\n    });\n\n    // Create dialogRef to return\n    const dialogRef = new DialogRef(overlayRef);\n\n    // Attach component portal to the overlay\n    // ...\n\n    return dialogRef;\n  }\n}\n```\n\nThis is super helpful for the consumer of this API so they can access the dialog. But what about the component we're opening? We want to be able to allow the component in the overlay to close itself. So how can we pass that `dialogRef` through? Well, for that we'll need to create an Injector which we pass to the component portal. This will allow us to then inject the `dialogRef` in our component. It's pretty easy to do this, you can do it like so:\n\n```typescript\nimport { Injectable, Injector } from '@angular/core';\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { DialogRef } from './dialog-ref';\n//...\nexport class DialogService {\n  constructor(private overlay: Overlay, private injector: Injector) {}\n\n  open\u003CT>(component: ComponentType\u003CT>): DialogRef {\n    // Globally centered position strategy\n    // ...\n\n    // Create the overlay with customizable options\n    const overlayRef = this.overlay.create({\n      // ...\n    });\n\n    // Create dialogRef to return\n    const dialogRef = new DialogRef(overlayRef);\n\n    // Create injector to be able to reference the DialogRef from within the component\n    const injector = Injector.create({\n      parent: this.injector,\n      providers: [{ provide: DialogRef, useValue: dialogRef }]\n    });\n\n    // Attach component portal to the overlay\n    const portal = new ComponentPortal(component, null, injector);\n    overlayRef.attach(portal);\n\n    return dialogRef;\n  }\n}\n```\n\nNow that we've provided an injector to the component portal, we'll be able to inject the `dialogRef` in our component very simply like so:\n\n```typescript\n@Component({\n  // ...\n})\nexport class LoginComponent {\n  constructor(private dialogRef: DialogRef) {}\n\n  close() {\n    this.dialogRef.close();\n  }\n}\n```\n\nOur implementation is much more thorough now that we have a way for the dialog to be programmatically closed from within the component or outside of it. The last major gap in functionality is being able to optionally pass some arbitrary data to the component that is being opened so it can utilize that data as needed.\n\n### Dialog Data\n\nIn order to pass data to the component, we'll be using the same method as our `dialogRef`. In this case, however, we'll need to [define our own injection token](https://angular.io/guide/dependency-injection-in-action#injectiontoken-objects) for the dependency injection system. Let's start by doing that in a new file, `dialog-tokens.ts`. It's going to be a very simple file.\n\n```typescript\nimport { InjectionToken } from '@angular/core';\n\nexport const DIALOG_DATA = new InjectionToken\u003Cany>('DIALOG_DATA');\n```\n\nNow that we've created a very basic injection token, we can add this to our injector. We also need to update our `open` method to accept optional data to be passed to the component. As part of that, we'll define a `DialogConfig` interface that has optional `data`. The reason we're making this a config object like this is so it's easy to extend later if you wanted to, for example, allow customizing the options for the overlay.\n\n```typescript\nimport { Injectable, Injector } from '@angular/core';\nimport { Overlay, ComponentType } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { DialogRef } from './dialog-ref';\n\nexport interface DialogConfig {\n  data?: any;\n}\n\n//...\nexport class DialogService {\n  constructor(private overlay: Overlay, private injector: Injector) {}\n\n  open\u003CT>(component: ComponentType\u003CT>, config?: DialogConfig): DialogRef {\n    // Globally centered position strategy\n    // ...\n\n    // Create the overlay with customizable options\n    // ...\n\n    // Create dialogRef to return\n    // ...\n\n    // Create injector to be able to reference the DialogRef from within the component\n    const injector = Injector.create({\n      parent: this.injector,\n      providers: [\n        { provide: DialogRef, useValue: dialogRef },\n        { provide: DIALOG_DATA, useValue: config?.data }\n      ]\n    });\n\n    // Attach component portal to the overlay\n    // ...\n\n    return dialogRef;\n  }\n}\n```\n\n## Conclusion\n\nNow that we've built this highly reusable service, we're able to open any component we want in a nicely centered modal! We can optionally provide data to it, and we can reference that dialog externally to close it if we wanted, or subscribe to it closing and react to that as needed. We could take this further, for example, by defining our own transitions and animations for the modal entering and exiting. Or we could easily pass in a config option to change the position strategy so it opens as a sidepanel instead of a centered modal. There are many ways you could tweak this to get exactly what you want, and it's fully within your control rather than being locked into the Material design dialog design and interactions.\n\nIn my next post I'm going to go over the `FlexibleConnectedPositionStrategy` that you can use to build things such as tooltips, popovers, dropdowns, and more. I'll be working hard on that one and hope to have it out soon. Hopefully this helps you get started digging into all the powerful options you have through the Angular CDK, and especially their Overlay package.","src/content/blog/angular-cdk-dialog.md","274850bd46318d89",{"html":513,"metadata":514},"\u003Cp>\u003Cstrong>Update 2022:\u003C/strong> Angular 14 was released, and with it the new \u003Ca href=\"https://material.angular.io/cdk/dialog/overview\">Dialog CDK primitive\u003C/a>! It accomplishes essentially the same thing as this post, where you can open a completely unstyled dialog and do all the branding yourself! Unless you need additional functionality that doesn’t provide, definitely use the CDK Dialog.\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cem>This is the first in a series of posts about using the Angular CDK library to build your own custom components.\u003C/em>\u003C/p>\n\u003Cp>If you’re building applications using Angular, you probably know about the amazing \u003Ca href=\"https://material.angular.io/\">Angular Material\u003C/a> library. It’s a component library that implements the Material Design spec. For many teams and applications, particularly those without design resources, it’s a fantastic tool for building applications with a high quality design system. I have used it many times with great success.\u003C/p>\n\u003Cp>There have been times, however, where I wanted the amazing developer experience of Angular Material, but I couldn’t use the Material design that it implements because the company has an existing design system. It’s precisely for these situations that the Angular team created \u003Ca href=\"https://material.angular.io/cdk/categories\">Angular CDK\u003C/a>, or the “Component Dev Kit”. According to their website, the CDK is “a set of behavior primitives for building UI components”. The CDK is fantastic because it abstracts away a lot of the really complex behavior implementation in building UI components.\u003C/p>\n\u003Cp>Because of all these benefits, I try to always utilize the CDK for as much as possible when writing Angular applications. For this series of posts I hope to dig in to as many pieces of the CDK as possible to help you build your own high quality design system. In this post I’m going to specifically talk about building an alternative to \u003Ccode>MatDialog\u003C/code>, as that is a very commonly used service for creating modals.\u003C/p>\n\u003Ch2 id=\"dialog-service\">Dialog Service\u003C/h2>\n\u003Cp>In Angular Material, the \u003Ccode>MatDialog\u003C/code> service allows you to pass a component to the service which it will then open in a floating dialog that’s globally centered both horizontally and vertically. Obviously this dialog implements the Material Design spec including animations when opening and closing. Because of this, we want to implement our own design, but the ergonomics of the \u003Ccode>MatDialog\u003C/code> service are great. So our implementation, while not exactly the same, will be similar and provide some of the same features.\u003C/p>\n\u003Cp>The design of the API is fairly simple, but extendable when needed. We’ll have have an \u003Ccode>open\u003C/code> method that takes in an Angular component to be opened in the dialog. We can also pass data to the component that can be used if needed. This method will return a reference to the dialog that we can use to close it programatically or subscribe to when it’s closed. This API design is simple and easy to extend as needed, but gets us a highly functional dialog service.\u003C/p>\n\u003Cp>Here is a demo of the finished product with all the features mentioned above. We’ll be going through step by step but you’re welcome to simply reference the code here if preferred.\u003C/p>\n\u003Ciframe src=\"https://stackblitz.com/edit/angular-ivy-sdmh7e?embed=1&#x26;file=src/app/dialog/dialog.service.ts\" title=\"stackblitz-example\">\u003C/iframe>\n\u003Ch2 id=\"prerequisites\">Prerequisites\u003C/h2>\n\u003Cp>First off we need to make sure we’ve got Angular CDK in our app. You have two ways you can do this. The first and least manual is to install it alongside Angular Material, via their provided Angular CLI schematic. Note that this will also install and configure Angular Material, a theme, and set up the styles. This is good in some ways because it includes the Angular CDK styles as part of the Angular Material theme. You can do that by using the following command:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">$\u003C/span>\u003Cspan style=\"color:#E6DB74\"> ng\u003C/span>\u003Cspan style=\"color:#E6DB74\"> add\u003C/span>\u003Cspan style=\"color:#E6DB74\"> @angular/material\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you know for a fact that you’re never going to want to use anything from Angular Material, and only want the CDK, then you can install it by itself from npm. Note that you must install the same version number that matches your Angular version, like so:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">$\u003C/span>\u003Cspan style=\"color:#E6DB74\"> npm\u003C/span>\u003Cspan style=\"color:#E6DB74\"> install\u003C/span>\u003Cspan style=\"color:#AE81FF\"> --save\u003C/span>\u003Cspan style=\"color:#E6DB74\"> @angular/cdk@12.2.13\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This will not configure any styles, so you’ll need to reference them properly as the docs outline for each piece you use. This is the method I’ll be using in these tutorials because I know I won’t want Angular Material as that is the whole point of this series. So now, no matter the path you chose, you have the Angular CDK installed and ready to go!\u003C/p>\n\u003Ch2 id=\"cdk-overlay\">CDK Overlay\u003C/h2>\n\u003Cp>First let me explain how the CDK overlay concept works. There are three pieces to this that work together. There’s the component we want to render, there’s a \u003Ca href=\"https://material.angular.io/cdk/portal/overview\">Portal\u003C/a> which is a CDK package for rendering dynamic content such as a component, and then there’s an \u003Ca href=\"https://material.angular.io/cdk/overlay/overview\">Overlay\u003C/a> which is a CDK package for opening floating panels on the screen. Basically what we do is attach a component to a \u003Ccode>ComponentPortal\u003C/code>, then attach that portal to an \u003Ccode>OverlayRef\u003C/code> which we’ll open.\u003C/p>\n\u003Cp>There are a number of ways you can use the Angular CDK’s overlay. You can use it programmatically or even as directives on markup. In our situation we want to use it programmatically so we can invoke it from anywhere via a service in our logic. So let’s start out by creating a simple Angular service and stubbing out the basic API along with a couple of comments on what needs to be done.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { ComponentType } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/cdk/overlay'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { Injectable } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/core'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Injectable\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  providedIn: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'root'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogService\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  constructor\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  open\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">component\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">ComponentType\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // 1. Create the overlay\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // 2. Attach component portal to the overlay\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is the very beginning of our service. We know that we want an \u003Ccode>open\u003C/code> method, and we know it needs to take some component to open. You’ll notice we’re using the type of \u003Ccode>ComponentType\u003C/code> from the Angular CDK overlay package. This is a type that allows us to receive any Angular component, and that’s what is passed to the CDK when instantiating the component. Of course we also have our generic \u003Ccode>&#x3C;T>\u003C/code> which will be the type of the component we pass through.\u003C/p>\n\u003Ch3 id=\"create-overlay\">Create Overlay\u003C/h3>\n\u003Cp>As we mentioned above we need to first create an overlay. To create an overlay we most importantly need a \u003Ca href=\"https://material.angular.io/cdk/overlay/overview#position-strategies\">PositionStrategy\u003C/a>. This defines \u003Cem>where\u003C/em> on the screen we want to open this overlay. There are a couple options, but in this post we’ll be using the \u003Ccode>GlobalPositionStrategy\u003C/code>. This means we won’t be attaching it to a specific element. We also can provide a few more optional configuration options, which we’ll do. Here’s how we create that overlay, injecting the \u003Ccode>Overlay\u003C/code> class in the constructor:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { Overlay, ComponentType } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/cdk/overlay'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">//...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogService\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  constructor\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#F92672\">private\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\"> overlay\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Overlay\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  open\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">component\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">ComponentType\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Globally centered position strategy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> positionStrategy \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.overlay\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      .\u003C/span>\u003Cspan style=\"color:#A6E22E\">position\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      .\u003C/span>\u003Cspan style=\"color:#A6E22E\">global\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      .\u003C/span>\u003Cspan style=\"color:#A6E22E\">centerHorizontally\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      .\u003C/span>\u003Cspan style=\"color:#A6E22E\">centerVertically\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Create the overlay with customizable options\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> overlayRef \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.overlay.\u003C/span>\u003Cspan style=\"color:#A6E22E\">create\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      positionStrategy,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      hasBackdrop: \u003C/span>\u003Cspan style=\"color:#AE81FF\">true\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      backdropClass: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'overlay-backdrop'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      panelClass: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'overlay-panel'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Attach component portal to the overlay\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We did a couple of things. First, we defined our position strategy. We declared that we want a global strategy, and we want to position the overlay in the center of the screen both horizontally and vertically. You can also position your overlay (similar to absolute positioning) by giving it a top, left, right, or bottom value. This might be useful if you wanted to open a sidepanel or a bottom sheet. Since we’re just making a standard modal, we’re centering it on the screen.\u003C/p>\n\u003Cp>We’re also defining some information about the panel and backdrop. First we’re defining that we want a backdrop for this modal, as well as providing the backdrop class for that. That’s where we can define how we want to style the backdrop, which I’ll be styling with a darkly translucent backdrop. We’re also providing a panel class, which will be applied to the parent “panel” that we’ll be rendering our component in. I just did some basic styling to make the background white and have a little padding. You can see my styles I provided in \u003Ccode>src/styles.scss\u003C/code>.\u003C/p>\n\u003Ch3 id=\"create-component-portal\">Create Component Portal\u003C/h3>\n\u003Cp>Next we need to create our \u003Ccode>ComponentPortal\u003C/code> that we’ll then attach to the overlay. It’s quite straightforward, and we do it like so:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { Overlay, ComponentType } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/cdk/overlay'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { ComponentPortal } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/cdk/portal'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">//...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogService\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  constructor\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#F92672\">private\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\"> overlay\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Overlay\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  open\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">component\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">ComponentType\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Globally centered position strategy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Create the overlay with customizable options\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> overlayRef \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.overlay.\u003C/span>\u003Cspan style=\"color:#A6E22E\">create\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">      // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Attach component portal to the overlay\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> portal \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F92672\"> new\u003C/span>\u003Cspan style=\"color:#A6E22E\"> ComponentPortal\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(component);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    overlayRef.\u003C/span>\u003Cspan style=\"color:#A6E22E\">attach\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(portal);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>At this point we can successfully open this dialog if we actually call this method and pass a component to it. While we could just leave our service like this, it definitely doesn’t meet the common usecases that we could do with \u003Ccode>MatDialog\u003C/code>. We want to be able return a dialog reference so we can programmatically close the overlay or subscribe to when the overlay gets closed. So let’s add that to our implementation.\u003C/p>\n\u003Ch3 id=\"dialog-reference\">Dialog Reference\u003C/h3>\n\u003Cp>Let’s create a simple \u003Ccode>DialogRef\u003C/code> class. It should take in an \u003Ccode>OverlayRef\u003C/code> which we can use to close the overlay, and it should have an rxjs \u003Ccode>Subject\u003C/code> so we can subscribe to when the overlay is closed. So let’s implement this simple class:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { OverlayRef } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/cdk/overlay'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { Subject, Observable } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'rxjs'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">/**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\"> * A reference to the dialog itself.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\"> * Can be injected into the component added to the overlay and then used to close itself.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogRef\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  private\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> afterClosedSubject \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F92672\"> new\u003C/span>\u003Cspan style=\"color:#A6E22E\"> Subject\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\">any\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  constructor\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#F92672\">private\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\"> overlayRef\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">OverlayRef\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">   * Closes the overlay. You can optionally provide a result.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">   */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  public\u003C/span>\u003Cspan style=\"color:#A6E22E\"> close\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">result\u003C/span>\u003Cspan style=\"color:#F92672\">?:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> any\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FD971F\">    this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.overlayRef.\u003C/span>\u003Cspan style=\"color:#A6E22E\">dispose\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FD971F\">    this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.afterClosedSubject.\u003C/span>\u003Cspan style=\"color:#A6E22E\">next\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(result);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FD971F\">    this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.afterClosedSubject.\u003C/span>\u003Cspan style=\"color:#A6E22E\">complete\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  /**\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">   * An Observable that notifies when the overlay has closed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">   */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  public\u003C/span>\u003Cspan style=\"color:#A6E22E\"> afterClosed\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Observable\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\">any\u003C/span>\u003Cspan style=\"color:#F8F8F2\">> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.afterClosedSubject.\u003C/span>\u003Cspan style=\"color:#A6E22E\">asObservable\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now we need to add this in to our \u003Ccode>open\u003C/code> method so we can create this reference and return it from the method on creation. So let’s put that in here:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { Overlay, ComponentType } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/cdk/overlay'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { ComponentPortal } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/cdk/portal'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { DialogRef } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> './dialog-ref'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">//...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogService\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  constructor\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#F92672\">private\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\"> overlay\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Overlay\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  open\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">component\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">ComponentType\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>)\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogRef\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Globally centered position strategy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Create the overlay with customizable options\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> overlayRef \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.overlay.\u003C/span>\u003Cspan style=\"color:#A6E22E\">create\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">      // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Create dialogRef to return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> dialogRef \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F92672\"> new\u003C/span>\u003Cspan style=\"color:#A6E22E\"> DialogRef\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(overlayRef);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Attach component portal to the overlay\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> dialogRef;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is super helpful for the consumer of this API so they can access the dialog. But what about the component we’re opening? We want to be able to allow the component in the overlay to close itself. So how can we pass that \u003Ccode>dialogRef\u003C/code> through? Well, for that we’ll need to create an Injector which we pass to the component portal. This will allow us to then inject the \u003Ccode>dialogRef\u003C/code> in our component. It’s pretty easy to do this, you can do it like so:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { Injectable, Injector } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/core'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { Overlay, ComponentType } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/cdk/overlay'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { ComponentPortal } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/cdk/portal'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { DialogRef } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> './dialog-ref'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">//...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogService\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  constructor\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#F92672\">private\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\"> overlay\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Overlay\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#F92672\">private\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\"> injector\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Injector\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  open\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">component\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">ComponentType\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>)\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogRef\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Globally centered position strategy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Create the overlay with customizable options\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> overlayRef \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.overlay.\u003C/span>\u003Cspan style=\"color:#A6E22E\">create\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">      // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Create dialogRef to return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> dialogRef \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F92672\"> new\u003C/span>\u003Cspan style=\"color:#A6E22E\"> DialogRef\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(overlayRef);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Create injector to be able to reference the DialogRef from within the component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> injector \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Injector.\u003C/span>\u003Cspan style=\"color:#A6E22E\">create\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      parent: \u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.injector,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      providers: [{ provide: DialogRef, useValue: dialogRef }]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Attach component portal to the overlay\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> portal \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F92672\"> new\u003C/span>\u003Cspan style=\"color:#A6E22E\"> ComponentPortal\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(component, \u003C/span>\u003Cspan style=\"color:#AE81FF\">null\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, injector);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    overlayRef.\u003C/span>\u003Cspan style=\"color:#A6E22E\">attach\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(portal);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> dialogRef;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now that we’ve provided an injector to the component portal, we’ll be able to inject the \u003Ccode>dialogRef\u003C/code> in our component very simply like so:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Component\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">LoginComponent\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  constructor\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#F92672\">private\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\"> dialogRef\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogRef\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  close\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FD971F\">    this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.dialogRef.\u003C/span>\u003Cspan style=\"color:#A6E22E\">close\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Our implementation is much more thorough now that we have a way for the dialog to be programmatically closed from within the component or outside of it. The last major gap in functionality is being able to optionally pass some arbitrary data to the component that is being opened so it can utilize that data as needed.\u003C/p>\n\u003Ch3 id=\"dialog-data\">Dialog Data\u003C/h3>\n\u003Cp>In order to pass data to the component, we’ll be using the same method as our \u003Ccode>dialogRef\u003C/code>. In this case, however, we’ll need to \u003Ca href=\"https://angular.io/guide/dependency-injection-in-action#injectiontoken-objects\">define our own injection token\u003C/a> for the dependency injection system. Let’s start by doing that in a new file, \u003Ccode>dialog-tokens.ts\u003C/code>. It’s going to be a very simple file.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { InjectionToken } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/core'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> DIALOG_DATA \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F92672\"> new\u003C/span>\u003Cspan style=\"color:#A6E22E\"> InjectionToken\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\">any\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>(\u003C/span>\u003Cspan style=\"color:#E6DB74\">'DIALOG_DATA'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now that we’ve created a very basic injection token, we can add this to our injector. We also need to update our \u003Ccode>open\u003C/code> method to accept optional data to be passed to the component. As part of that, we’ll define a \u003Ccode>DialogConfig\u003C/code> interface that has optional \u003Ccode>data\u003C/code>. The reason we’re making this a config object like this is so it’s easy to extend later if you wanted to, for example, allow customizing the options for the overlay.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { Injectable, Injector } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/core'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { Overlay, ComponentType } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/cdk/overlay'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { ComponentPortal } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@angular/cdk/portal'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { DialogRef } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> './dialog-ref'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> interface\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogConfig\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  data\u003C/span>\u003Cspan style=\"color:#F92672\">?:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> any\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">//...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogService\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  constructor\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#F92672\">private\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\"> overlay\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Overlay\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#F92672\">private\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\"> injector\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Injector\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  open\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">component\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">ComponentType\u003C/span>\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">T\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>, \u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">config\u003C/span>\u003Cspan style=\"color:#F92672\">?:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogConfig\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">DialogRef\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Globally centered position strategy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Create the overlay with customizable options\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Create dialogRef to return\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Create injector to be able to reference the DialogRef from within the component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> injector \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Injector.\u003C/span>\u003Cspan style=\"color:#A6E22E\">create\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      parent: \u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.injector,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      providers: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        { provide: DialogRef, useValue: dialogRef },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        { provide: DIALOG_DATA, useValue: config?.data }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      ]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Attach component portal to the overlay\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> dialogRef;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Now that we’ve built this highly reusable service, we’re able to open any component we want in a nicely centered modal! We can optionally provide data to it, and we can reference that dialog externally to close it if we wanted, or subscribe to it closing and react to that as needed. We could take this further, for example, by defining our own transitions and animations for the modal entering and exiting. Or we could easily pass in a config option to change the position strategy so it opens as a sidepanel instead of a centered modal. There are many ways you could tweak this to get exactly what you want, and it’s fully within your control rather than being locked into the Material design dialog design and interactions.\u003C/p>\n\u003Cp>In my next post I’m going to go over the \u003Ccode>FlexibleConnectedPositionStrategy\u003C/code> that you can use to build things such as tooltips, popovers, dropdowns, and more. I’ll be working hard on that one and hope to have it out soon. Hopefully this helps you get started digging into all the powerful options you have through the Angular CDK, and especially their Overlay package.\u003C/p>",{"headings":515,"localImagePaths":536,"remoteImagePaths":537,"frontmatter":538,"imagePaths":541},[516,519,520,523,526,529,532,535],{"depth":30,"slug":517,"text":518},"dialog-service","Dialog Service",{"depth":30,"slug":315,"text":316},{"depth":30,"slug":521,"text":522},"cdk-overlay","CDK Overlay",{"depth":75,"slug":524,"text":525},"create-overlay","Create Overlay",{"depth":75,"slug":527,"text":528},"create-component-portal","Create Component Portal",{"depth":75,"slug":530,"text":531},"dialog-reference","Dialog Reference",{"depth":75,"slug":533,"text":534},"dialog-data","Dialog Data",{"depth":30,"slug":172,"text":173},[],[],{"title":501,"published":17,"description":502,"date":539,"series":486,"tags":540,"cover_image":507,"cover_image_alt":508},["Date","2021-11-28T00:00:00.000Z"],[267,505,506,302],[],"angular-cdk-dialog.md","stencil-going-deeper",{"id":543,"data":545,"body":555,"filePath":556,"digest":557,"rendered":558,"legacyId":577},{"title":546,"description":547,"date":548,"published":17,"tags":549,"cover_image":552,"cover_image_alt":553,"series":554},"Component Libraries with Stencil.js - Going Deeper","The fourth in a series of posts about creating a component library using Stencil.js",["Date","2018-09-26T00:00:00.000Z"],[550,551,506],"stencil","webcomponents","/img/stenciljs.png","Stencil.js logo","Component Libraries with Stencil.js","_This is the fourth in a series of posts about creating a web component library using Stencil.js - Check out the [first post](/posts/about-stencil)_\n\nIn the last post we created a very simple button component. We're now going to extend that with more options and functionality to be more fully featured. I personally want to have a couple of color options for this button, a couple of button shapes, and a few sizes.\n\n## Component Props\n\nTo start into this, we'll need a few props to allow the user to specify what they want. Let's call our props `color`, `shape`, and `size`. We also can have multiple button types such as submit and reset, just like a regular HTML button, so we'll add that as a prop too.\n\n```tsx\n@Prop()\ntype: 'button' | 'reset' | 'submit' = 'button';\n\n@Prop()\ncolor: 'primary' | 'accent' | 'light' = 'primary';\n\n@Prop()\nshape: 'square' | 'round' = 'square';\n\n@Prop()\nsize: 'small' | 'default' | 'large' = 'default';\n```\n\nIf you've barely/not used TypeScript before, you'll notice that instead of defining my types for these props to be of type `string`, which technically they are, I'm going a step further and defining that each prop can be one of several specific strings. This allows for much more effective IntelliSense when you're using this component. I'm defining up front a few specific sizes, colors, shapes, and types that I'm going to be implementing. On top of that, I've initialized those props to my preferred defaults, so that if you simply call my button component with no defined props, it'll look like a default button.\n\n## Class Map\n\nNext I'm going to be using those props to build a map of CSS classes to apply to my component. I typically like to define an interface called `CssClassMap` for this purpose. Let's create that file at `src/utils/interfaces.ts`, as it's something I'll be reusing for all my components, and use the following content for the file:\n\n```typescript\nexport type CssClassMap = { [className: string]: boolean };\n```\n\nAs you can see, I'm defining this class map type as a map of a key, the class name, and the value being a boolean. Effectively I'm going to be specifying whether I want classes to be applied or not. Now that we have this interface, let's write a method that builds this class map on render.\n\n```tsx\nexport class Button {\n  // ...\n\n  render() {\n    const classMap = this.getCssClassMap();\n\n    return (\n      \u003Cbutton type={this.type} class={classMap} disabled={this.disabled}>\n        \u003Cslot />\n      \u003C/button>\n    );\n  }\n\n  private getCssClassMap(): CssClassMap {\n    return {\n      [this.color]: true,\n      [this.shape]: true,\n      [this.size]: true\n    };\n  }\n}\n```\n\nAs you can see, I'm calling our function from the render method to get the class map, a fairly simple one in this case, and am applying that to the `button`. You may also have noticed that I also passed the `type` prop to the button as well. Now that we have the correct classes being applied, let's actually implement those classes. First we need the correct colors, so let's add a few more SCSS variables to our `src/styles/variables.scss` file.\n\n```scss\n//...\n\n// Brand Colors\n$blue-steel: #4571c4;\n$blue-steel-dark: #315db0;\n$coral: #c75943;\n$coral-dark: #a83a24;\n$light: #f0f1f2;\n$light-dark: #e2e3e4;\n```\n\nNow that we have the variables available, let's implement the classes themselves. We don't need to implement the default classes as they are the default that we've already implemented.\n\n```scss\nbutton {\n  //...\n\n  // Color variations\n  &.accent {\n    background-color: $coral;\n\n    &:hover {\n      background-color: $coral-dark;\n    }\n    &:active {\n      background-color: darken($coral-dark, 10%);\n    }\n  }\n  &.light {\n    background-color: $light;\n    color: rgba(0, 0, 0, 0.7);\n\n    &:hover {\n      background-color: $light-dark;\n    }\n    &:active {\n      background-color: darken($light-dark, 10%);\n    }\n  }\n\n  // Shape variations\n  &.round {\n    border-radius: 50px;\n  }\n\n  // Size variations\n  &.small {\n    padding: 2px 8px;\n    font-size: 12px;\n  }\n  &.large {\n    padding: 8px 20px;\n    font-size: 16px;\n  }\n}\n```\n\nFor the color changing classes, we need to re-implement our `hover` and `active` states. We do not need to re-implement our `disabled` state since our existing one simply applies a lower opacity, looking great in any color. Making the button round is trivial, and then we finally tweak the `padding` and `font-size` of our button to look good as a large or small button.\n\nNow that we've implemented these classes, we have some pretty incredible looking button web components!\n\n![buttons](/img/posts/stencil-going-deeper/buttons.png)\n\n## Next Steps\n\nWe now have an awesome button component we can use anywhere! This is a simple first component, so we're not dealing with many of the other decorators such as `@Watch()`, `@Method()`, or `@State()`. We'll get into those with a new component that is more complex in our [next post](/posts/stencil-decorators). See you in the next one!\n\n_Simply want to see the end result repo? Check it out [here](https://github.com/johnbwoodruff/mountain-ui)_","src/content/blog/stencil-going-deeper.md","42d7b9fef391ffe9",{"html":559,"metadata":560},"\u003Cp>\u003Cem>This is the fourth in a series of posts about creating a web component library using Stencil.js - Check out the \u003Ca href=\"/posts/about-stencil\">first post\u003C/a>\u003C/em>\u003C/p>\n\u003Cp>In the last post we created a very simple button component. We’re now going to extend that with more options and functionality to be more fully featured. I personally want to have a couple of color options for this button, a couple of button shapes, and a few sizes.\u003C/p>\n\u003Ch2 id=\"component-props\">Component Props\u003C/h2>\n\u003Cp>To start into this, we’ll need a few props to allow the user to specify what they want. Let’s call our props \u003Ccode>color\u003C/code>, \u003Ccode>shape\u003C/code>, and \u003Ccode>size\u003C/code>. We also can have multiple button types such as submit and reset, just like a regular HTML button, so we’ll add that as a prop too.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Prop\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">type: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'button'\u003C/span>\u003Cspan style=\"color:#F92672\"> |\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'reset'\u003C/span>\u003Cspan style=\"color:#F92672\"> |\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'submit'\u003C/span>\u003Cspan style=\"color:#F92672\"> =\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'button'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Prop\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">color: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'primary'\u003C/span>\u003Cspan style=\"color:#F92672\"> |\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'accent'\u003C/span>\u003Cspan style=\"color:#F92672\"> |\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'light'\u003C/span>\u003Cspan style=\"color:#F92672\"> =\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'primary'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Prop\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">shape: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'square'\u003C/span>\u003Cspan style=\"color:#F92672\"> |\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'round'\u003C/span>\u003Cspan style=\"color:#F92672\"> =\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'square'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Prop\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">size: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'small'\u003C/span>\u003Cspan style=\"color:#F92672\"> |\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'default'\u003C/span>\u003Cspan style=\"color:#F92672\"> |\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'large'\u003C/span>\u003Cspan style=\"color:#F92672\"> =\u003C/span>\u003Cspan style=\"color:#E6DB74\"> 'default'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you’ve barely/not used TypeScript before, you’ll notice that instead of defining my types for these props to be of type \u003Ccode>string\u003C/code>, which technically they are, I’m going a step further and defining that each prop can be one of several specific strings. This allows for much more effective IntelliSense when you’re using this component. I’m defining up front a few specific sizes, colors, shapes, and types that I’m going to be implementing. On top of that, I’ve initialized those props to my preferred defaults, so that if you simply call my button component with no defined props, it’ll look like a default button.\u003C/p>\n\u003Ch2 id=\"class-map\">Class Map\u003C/h2>\n\u003Cp>Next I’m going to be using those props to build a map of CSS classes to apply to my component. I typically like to define an interface called \u003Ccode>CssClassMap\u003C/code> for this purpose. Let’s create that file at \u003Ccode>src/utils/interfaces.ts\u003C/code>, as it’s something I’ll be reusing for all my components, and use the following content for the file:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> type\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">CssClassMap\u003C/span>\u003Cspan style=\"color:#F92672\"> =\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { [\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">className\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> string\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> boolean\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> };\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As you can see, I’m defining this class map type as a map of a key, the class name, and the value being a boolean. Effectively I’m going to be specifying whether I want classes to be applied or not. Now that we have this interface, let’s write a method that builds this class map on render.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Button\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  render\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> classMap \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.\u003C/span>\u003Cspan style=\"color:#A6E22E\">getCssClassMap\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#A6E22E\"> type\u003C/span>\u003Cspan style=\"color:#F92672\">={\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.type\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003Cspan style=\"color:#A6E22E\"> class\u003C/span>\u003Cspan style=\"color:#F92672\">={\u003C/span>\u003Cspan style=\"color:#F8F8F2\">classMap\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003Cspan style=\"color:#A6E22E\"> disabled\u003C/span>\u003Cspan style=\"color:#F92672\">={\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.disabled\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">slot\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  private\u003C/span>\u003Cspan style=\"color:#A6E22E\"> getCssClassMap\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">CssClassMap\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      [\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.color]: \u003C/span>\u003Cspan style=\"color:#AE81FF\">true\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      [\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.shape]: \u003C/span>\u003Cspan style=\"color:#AE81FF\">true\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      [\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.size]: \u003C/span>\u003Cspan style=\"color:#AE81FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As you can see, I’m calling our function from the render method to get the class map, a fairly simple one in this case, and am applying that to the \u003Ccode>button\u003C/code>. You may also have noticed that I also passed the \u003Ccode>type\u003C/code> prop to the button as well. Now that we have the correct classes being applied, let’s actually implement those classes. First we need the correct colors, so let’s add a few more SCSS variables to our \u003Ccode>src/styles/variables.scss\u003C/code> file.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"scss\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">//...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">// Brand Colors\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">$blue-steel: \u003C/span>\u003Cspan style=\"color:#AE81FF\">#4571c4\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">$blue-steel-dark: \u003C/span>\u003Cspan style=\"color:#AE81FF\">#315db0\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">$coral: \u003C/span>\u003Cspan style=\"color:#AE81FF\">#c75943\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">$coral-dark: \u003C/span>\u003Cspan style=\"color:#AE81FF\">#a83a24\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">$light: \u003C/span>\u003Cspan style=\"color:#AE81FF\">#f0f1f2\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">$light-dark: \u003C/span>\u003Cspan style=\"color:#AE81FF\">#e2e3e4\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now that we have the variables available, let’s implement the classes themselves. We don’t need to implement the default classes as they are the default that we’ve already implemented.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"scss\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  //...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // Color variations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">.accent\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    background-color\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: $coral;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">:hover\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">      background-color\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: $coral-dark;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">:active\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">      background-color\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">darken\u003C/span>\u003Cspan style=\"color:#F8F8F2\">($coral-dark, \u003C/span>\u003Cspan style=\"color:#AE81FF\">10\u003C/span>\u003Cspan style=\"color:#F92672\">%\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">.light\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    background-color\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: $light;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    color\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">rgba\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#AE81FF\">0\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#AE81FF\">0\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#AE81FF\">0\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#AE81FF\">0.7\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">:hover\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">      background-color\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: $light-dark;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">:active\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">      background-color\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">darken\u003C/span>\u003Cspan style=\"color:#F8F8F2\">($light-dark, \u003C/span>\u003Cspan style=\"color:#AE81FF\">10\u003C/span>\u003Cspan style=\"color:#F92672\">%\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // Shape variations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">.round\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    border-radius\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">50\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // Size variations\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">.small\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    padding\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">2\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#AE81FF\"> 8\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    font-size\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">12\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">.large\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    padding\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">8\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#AE81FF\"> 20\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    font-size\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">16\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For the color changing classes, we need to re-implement our \u003Ccode>hover\u003C/code> and \u003Ccode>active\u003C/code> states. We do not need to re-implement our \u003Ccode>disabled\u003C/code> state since our existing one simply applies a lower opacity, looking great in any color. Making the button round is trivial, and then we finally tweak the \u003Ccode>padding\u003C/code> and \u003Ccode>font-size\u003C/code> of our button to look good as a large or small button.\u003C/p>\n\u003Cp>Now that we’ve implemented these classes, we have some pretty incredible looking button web components!\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/stencil-going-deeper/buttons.png\" alt=\"buttons\">\u003C/p>\n\u003Ch2 id=\"next-steps\">Next Steps\u003C/h2>\n\u003Cp>We now have an awesome button component we can use anywhere! This is a simple first component, so we’re not dealing with many of the other decorators such as \u003Ccode>@Watch()\u003C/code>, \u003Ccode>@Method()\u003C/code>, or \u003Ccode>@State()\u003C/code>. We’ll get into those with a new component that is more complex in our \u003Ca href=\"/posts/stencil-decorators\">next post\u003C/a>. See you in the next one!\u003C/p>\n\u003Cp>\u003Cem>Simply want to see the end result repo? Check it out \u003Ca href=\"https://github.com/johnbwoodruff/mountain-ui\">here\u003C/a>\u003C/em>\u003C/p>",{"headings":561,"localImagePaths":571,"remoteImagePaths":572,"frontmatter":573,"imagePaths":576},[562,565,568],{"depth":30,"slug":563,"text":564},"component-props","Component Props",{"depth":30,"slug":566,"text":567},"class-map","Class Map",{"depth":30,"slug":569,"text":570},"next-steps","Next Steps",[],[],{"title":546,"published":17,"description":547,"date":574,"series":554,"tags":575,"cover_image":552,"cover_image_alt":553},["Date","2018-09-26T00:00:00.000Z"],[550,551,506],[],"stencil-going-deeper.md","about-stencil",{"id":578,"data":580,"body":585,"filePath":586,"digest":587,"rendered":588,"legacyId":611},{"title":581,"description":582,"date":583,"published":17,"tags":584,"cover_image":552,"cover_image_alt":553,"series":554},"Component Libraries with Stencil.js - About Stencil","The first in a series of posts about creating a component library using Stencil.js",["Date","2018-09-15T00:00:00.000Z"],[550,551,506],"_This is the first in a series of posts about creating a web component library using Stencil.js_\n\nI've been doing frontend development professionally since 2012. During that time, I've learned JavaScript framework after JavaScript framework. I started with [Backbone.js](http://backbonejs.org/) and disliked it quite a bit. I'm sure it was a great framework at the time, but I use it as a curse word to this day. I was thrilled to learn [Angular.js](https://angularjs.org/) back at the end of 2012, and shocked everyone by re-writing our complex backbone application with Angular.js in a matter of two days, with approximately 1/8th the amount of code.\n\nThat weekend kicked off a love for learning new JavaScript frameworks that has never left me. I followed closely the development of [Angular](https://angular.io/), the successor to and complete re-write of Angular.js, and still use Angular heavily in my current job at Domo. [React](https://reactjs.org/) also came along and brought with it a different paradigm of not being an all inclusive \"framework\", but rather a view rendering library. I loved learning a whole new way of building applications, by wiring together the various pieces I needed using different libraries in addition to React. I've of course messed around with many other frameworks including but not limited to [Ember.js](https://www.emberjs.com/), [Vue](https://vuejs.org/), and [Aurelia](https://aurelia.io/).\n\n## Component Libraries\n\nI highly recommend the usage of component libraries. Unless you're an amazing designer as well as developer, they simplify things a great deal for most of us. In all my aforementioned experimentation with frameworks, however, I discovered a major pain point. Any time I used a new framework, the component library I used likely had it's own specific version for that new framework, or it didn't have a version for it at all. For example, I heavily use [Angular Material](https://material.angular.io/) at work and on side projects. However, whenever I work on a React app, all those components are obviously unusable in that React app because it's Angular specific. So, I find the most commonly used React alternative, [Material-UI](https://material-ui.com/). While a great library, I now have to do a context switch as these components were built with entirely different individuals, architecture, and terminology. This is the best case scenario, however, as that is with two of the most widely used frameworks with one of the most widely used design systems.\n\nMany companies are now open sourcing their own component libraries using their business style guide. Libraries such as [Atlaskit](https://atlaskit.atlassian.com/) by Atlassian, [Clarity](https://vmware.github.io/clarity/) by VMWare, or [Carbon](http://www.carbondesignsystem.com/) by IBM. In the case of IBM specifically, they had to release one version of the library for Angular, one for React, and another for no framework with just HTML and CSS partials, similar to how [Bootstrap](https://getbootstrap.com/) works. This is simply not feasible or maintainable for most businesses without the resources of IBM. Instead, many pick a framework of choice and release only that library.\n\n## Enter Stencil.js\n\nI've rarely been as excited about a technology in the last few years as I have about [Stencil.js](https://stenciljs.com/). It's not another framework; in fact it's not a framework at all. Built by the [Ionic](https://ionicframework.com/) team, Stencil.js took a different approach. Instead of providing a component framework, they built a component compiler, which takes components built with modern tools and high level APIs such as [TypeScript](https://www.typescriptlang.org/), [decorators](https://www.typescriptlang.org/docs/handbook/decorators.html), and [TSX](https://www.typescriptlang.org/docs/handbook/jsx.html), and compiles them down to standards-compliant [web components](https://www.webcomponents.org/). You don't need a framework to run these components, they're using native browser APIs to render custom elements.\n\nThe web component standard consists of various APIs that together allow you to render complex custom elements. While you could absolutely write these yourself, they are purposely designed to be low-level APIs. This is why I highly recommend Stencil, it takes the best parts from Angular and React when it comes to building components, and takes care of the rest of the complicated work for you such as dynamically polyfilling missing features and performing async rendering. All the benefits of a library like React, but using the platform itself, which allows you to use these components in any framework or no framework at all.\n\n## A Basic Stencil Component\n\nLet's take a look at a basic Stencil component.\n\n```tsx\nimport { Component, h, Prop } from '@stencil/core';\n\n@Component({\n  tag: 'hello-world',\n  styleUrl: 'hello-world.css'\n})\nexport class HelloWorld {\n  @Prop() name: string;\n\n  render() {\n    return \u003Cp>Hello {this.name}!\u003C/p>;\n  }\n}\n```\n\nYou would simply use this component in a standard HTML page like so:\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n  \u003Chead> \u003C/head>\n  \u003Cbody>\n    \u003Chello-world name=\"John Woodruff\">\u003C/hello-world>\n  \u003C/body>\n\u003C/html>\n```\n\nIf you're familiar at all with Angular, you'll recognize the component decorator:\n\n```tsx\n@Component({\n  tag: 'hello-world',\n  styleUrl: 'hello-world.css'\n})\n```\n\nThis decorator allows you to define the HTML tag name, and a link to the stylesheet that will provide the CSS for this component.\n\nAfter the component decorator, you have a plain TypeScript class. You'll notice a `@Prop()` decorator on the class property `name`. This defines that there is a public prop you can use on your custom element to pass in a string to the `name` property.\n\nFinally we have the standard `render()` method. You return TSX (TypeScript XML) which is the markup that will be rendered in your custom element. In this case we're simply passing back a `\u003Cp>` tag with a message. This message is \"Hello\" with the name that we passed in on the prop. If we were to change the name passed to the prop, the component would detect that and re-render accordingly.\n\n## Why Stencil?\n\nYou, a savvy reader, may be asking yourself why would I choose Stencil when I could use Polymer instead? The answer is that you're absolutely welcome to use Polymer. It's a great technology that has helped bring web components to the web at large. Personally I love building web components with Stencil much more than with Polymer, just due to the developer experience and tools used. It's a very similar experience to building components in React and Angular, two technologies I'm very familiar with.\n\nIn other reasoning, Stencil-compiled web components are highly performant, small, and incredibly easy to build and publish. You could publish a single web component, or an entire library of components. I've been using Stencil for months now in building out a component library at my job. The experience has been overwhelmingly positive for me, and we now have a library of shared components that can be consumed in the various frameworks being used throughout the company.\n\n## Next Steps\n\nIf you've made it this far and are still interested in building a component library along with me in these posts, thank you for being here! This first post had very little in the way of actual code, as I didn't want to jump into that before you had the reasoning and benefits clear in your mind. Now that we've gotten that, I'll see you in the [next post](/posts/stencil-getting-started)!\n\n_Simply want to see the end result repo? Check it out [here](https://github.com/johnbwoodruff/mountain-ui)_","src/content/blog/about-stencil.md","10d2240c2b5329d2",{"html":589,"metadata":590},"\u003Cp>\u003Cem>This is the first in a series of posts about creating a web component library using Stencil.js\u003C/em>\u003C/p>\n\u003Cp>I’ve been doing frontend development professionally since 2012. During that time, I’ve learned JavaScript framework after JavaScript framework. I started with \u003Ca href=\"http://backbonejs.org/\">Backbone.js\u003C/a> and disliked it quite a bit. I’m sure it was a great framework at the time, but I use it as a curse word to this day. I was thrilled to learn \u003Ca href=\"https://angularjs.org/\">Angular.js\u003C/a> back at the end of 2012, and shocked everyone by re-writing our complex backbone application with Angular.js in a matter of two days, with approximately 1/8th the amount of code.\u003C/p>\n\u003Cp>That weekend kicked off a love for learning new JavaScript frameworks that has never left me. I followed closely the development of \u003Ca href=\"https://angular.io/\">Angular\u003C/a>, the successor to and complete re-write of Angular.js, and still use Angular heavily in my current job at Domo. \u003Ca href=\"https://reactjs.org/\">React\u003C/a> also came along and brought with it a different paradigm of not being an all inclusive “framework”, but rather a view rendering library. I loved learning a whole new way of building applications, by wiring together the various pieces I needed using different libraries in addition to React. I’ve of course messed around with many other frameworks including but not limited to \u003Ca href=\"https://www.emberjs.com/\">Ember.js\u003C/a>, \u003Ca href=\"https://vuejs.org/\">Vue\u003C/a>, and \u003Ca href=\"https://aurelia.io/\">Aurelia\u003C/a>.\u003C/p>\n\u003Ch2 id=\"component-libraries\">Component Libraries\u003C/h2>\n\u003Cp>I highly recommend the usage of component libraries. Unless you’re an amazing designer as well as developer, they simplify things a great deal for most of us. In all my aforementioned experimentation with frameworks, however, I discovered a major pain point. Any time I used a new framework, the component library I used likely had it’s own specific version for that new framework, or it didn’t have a version for it at all. For example, I heavily use \u003Ca href=\"https://material.angular.io/\">Angular Material\u003C/a> at work and on side projects. However, whenever I work on a React app, all those components are obviously unusable in that React app because it’s Angular specific. So, I find the most commonly used React alternative, \u003Ca href=\"https://material-ui.com/\">Material-UI\u003C/a>. While a great library, I now have to do a context switch as these components were built with entirely different individuals, architecture, and terminology. This is the best case scenario, however, as that is with two of the most widely used frameworks with one of the most widely used design systems.\u003C/p>\n\u003Cp>Many companies are now open sourcing their own component libraries using their business style guide. Libraries such as \u003Ca href=\"https://atlaskit.atlassian.com/\">Atlaskit\u003C/a> by Atlassian, \u003Ca href=\"https://vmware.github.io/clarity/\">Clarity\u003C/a> by VMWare, or \u003Ca href=\"http://www.carbondesignsystem.com/\">Carbon\u003C/a> by IBM. In the case of IBM specifically, they had to release one version of the library for Angular, one for React, and another for no framework with just HTML and CSS partials, similar to how \u003Ca href=\"https://getbootstrap.com/\">Bootstrap\u003C/a> works. This is simply not feasible or maintainable for most businesses without the resources of IBM. Instead, many pick a framework of choice and release only that library.\u003C/p>\n\u003Ch2 id=\"enter-stenciljs\">Enter Stencil.js\u003C/h2>\n\u003Cp>I’ve rarely been as excited about a technology in the last few years as I have about \u003Ca href=\"https://stenciljs.com/\">Stencil.js\u003C/a>. It’s not another framework; in fact it’s not a framework at all. Built by the \u003Ca href=\"https://ionicframework.com/\">Ionic\u003C/a> team, Stencil.js took a different approach. Instead of providing a component framework, they built a component compiler, which takes components built with modern tools and high level APIs such as \u003Ca href=\"https://www.typescriptlang.org/\">TypeScript\u003C/a>, \u003Ca href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\">decorators\u003C/a>, and \u003Ca href=\"https://www.typescriptlang.org/docs/handbook/jsx.html\">TSX\u003C/a>, and compiles them down to standards-compliant \u003Ca href=\"https://www.webcomponents.org/\">web components\u003C/a>. You don’t need a framework to run these components, they’re using native browser APIs to render custom elements.\u003C/p>\n\u003Cp>The web component standard consists of various APIs that together allow you to render complex custom elements. While you could absolutely write these yourself, they are purposely designed to be low-level APIs. This is why I highly recommend Stencil, it takes the best parts from Angular and React when it comes to building components, and takes care of the rest of the complicated work for you such as dynamically polyfilling missing features and performing async rendering. All the benefits of a library like React, but using the platform itself, which allows you to use these components in any framework or no framework at all.\u003C/p>\n\u003Ch2 id=\"a-basic-stencil-component\">A Basic Stencil Component\u003C/h2>\n\u003Cp>Let’s take a look at a basic Stencil component.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { Component, h, Prop } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@stencil/core'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Component\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  tag: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'hello-world'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  styleUrl: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'hello-world.css'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">HelloWorld\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">Prop\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() name\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> string\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  render\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">p\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Hello \u003C/span>\u003Cspan style=\"color:#F92672\">{\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.name\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003Cspan style=\"color:#F8F8F2\">!&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">p\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You would simply use this component in a standard HTML page like so:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;!\u003C/span>\u003Cspan style=\"color:#F92672\">DOCTYPE\u003C/span>\u003Cspan style=\"color:#A6E22E\"> html\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">html\u003C/span>\u003Cspan style=\"color:#A6E22E\"> lang\u003C/span>\u003Cspan style=\"color:#F8F8F2\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"en\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">head\u003C/span>\u003Cspan style=\"color:#F8F8F2\">> &#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">head\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">body\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">hello-world\u003C/span>\u003Cspan style=\"color:#A6E22E\"> name\u003C/span>\u003Cspan style=\"color:#F8F8F2\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"John Woodruff\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">hello-world\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">body\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">html\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you’re familiar at all with Angular, you’ll recognize the component decorator:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Component\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  tag: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'hello-world'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  styleUrl: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'hello-world.css'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This decorator allows you to define the HTML tag name, and a link to the stylesheet that will provide the CSS for this component.\u003C/p>\n\u003Cp>After the component decorator, you have a plain TypeScript class. You’ll notice a \u003Ccode>@Prop()\u003C/code> decorator on the class property \u003Ccode>name\u003C/code>. This defines that there is a public prop you can use on your custom element to pass in a string to the \u003Ccode>name\u003C/code> property.\u003C/p>\n\u003Cp>Finally we have the standard \u003Ccode>render()\u003C/code> method. You return TSX (TypeScript XML) which is the markup that will be rendered in your custom element. In this case we’re simply passing back a \u003Ccode>&#x3C;p>\u003C/code> tag with a message. This message is “Hello” with the name that we passed in on the prop. If we were to change the name passed to the prop, the component would detect that and re-render accordingly.\u003C/p>\n\u003Ch2 id=\"why-stencil\">Why Stencil?\u003C/h2>\n\u003Cp>You, a savvy reader, may be asking yourself why would I choose Stencil when I could use Polymer instead? The answer is that you’re absolutely welcome to use Polymer. It’s a great technology that has helped bring web components to the web at large. Personally I love building web components with Stencil much more than with Polymer, just due to the developer experience and tools used. It’s a very similar experience to building components in React and Angular, two technologies I’m very familiar with.\u003C/p>\n\u003Cp>In other reasoning, Stencil-compiled web components are highly performant, small, and incredibly easy to build and publish. You could publish a single web component, or an entire library of components. I’ve been using Stencil for months now in building out a component library at my job. The experience has been overwhelmingly positive for me, and we now have a library of shared components that can be consumed in the various frameworks being used throughout the company.\u003C/p>\n\u003Ch2 id=\"next-steps\">Next Steps\u003C/h2>\n\u003Cp>If you’ve made it this far and are still interested in building a component library along with me in these posts, thank you for being here! This first post had very little in the way of actual code, as I didn’t want to jump into that before you had the reasoning and benefits clear in your mind. Now that we’ve gotten that, I’ll see you in the \u003Ca href=\"/posts/stencil-getting-started\">next post\u003C/a>!\u003C/p>\n\u003Cp>\u003Cem>Simply want to see the end result repo? Check it out \u003Ca href=\"https://github.com/johnbwoodruff/mountain-ui\">here\u003C/a>\u003C/em>\u003C/p>",{"headings":591,"localImagePaths":605,"remoteImagePaths":606,"frontmatter":607,"imagePaths":610},[592,595,598,601,604],{"depth":30,"slug":593,"text":594},"component-libraries","Component Libraries",{"depth":30,"slug":596,"text":597},"enter-stenciljs","Enter Stencil.js",{"depth":30,"slug":599,"text":600},"a-basic-stencil-component","A Basic Stencil Component",{"depth":30,"slug":602,"text":603},"why-stencil","Why Stencil?",{"depth":30,"slug":569,"text":570},[],[],{"title":581,"published":17,"description":582,"date":608,"series":554,"tags":609,"cover_image":552,"cover_image_alt":553},["Date","2018-09-15T00:00:00.000Z"],[550,551,506],[],"about-stencil.md","stencil-getting-started",{"id":612,"data":614,"body":619,"filePath":620,"digest":621,"rendered":622,"legacyId":642},{"title":615,"description":616,"date":617,"published":17,"tags":618,"cover_image":552,"cover_image_alt":553,"series":554},"Component Libraries with Stencil.js - Getting Started","The second in a series of posts about creating a component library using Stencil.js",["Date","2018-09-16T00:00:00.000Z"],[550,551,506],"_This is the second in a series of posts about creating a web component library using Stencil.js - Check out the [first post](/posts/about-stencil)_\n\nNow that we've talked about the reasoning for choosing Stencil to build our web component library, let's jump right in. First things first, we need to get our base project structure set up. Thankfully, the Ionic team has handled this completely for us. Make sure you're running `npm` at version 6 or later, and run the following command:\n\n```shell\n$ npm init stencil\n```\n\nYou should get a prompt similar to the following:\n\n```shell\n? Pick a starter › - Use arrow-keys. Return to submit.\n\n   ionic-pwa     Everything you need to build fast, production ready PWAs\n   app           Minimal starter for building a Stencil app or website\n❯  component     Collection of web components that can be used anywhere\n```\n\nThe Ionic team has provided a few starters for us. We're not interested in building an entire app or PWA using Stencil (although you definitely can!) so we're going to choose the `component` option. This will structure it so we can build a reusable component library for distribution.\n\nYou'll be asked to name your collection, so go ahead and name that however you'd like. The component library I'll be building is one I'm calling `mountain-ui`, because I live in Utah among the beautiful Wasatch mountain range.\n\nOnce the starter is created, you can `cd` into your newly created directory and run `npm start`. That'll open the project in your browser with a basic web component they put there as a start. We'll jump into writing a component in a minute, but let's first go over the project structure and figure out where things go.\n\n## Project Structure\n\nYou'll notice a few directories. The main one you'll want to concern yourself with is `src`. Other important directories to note are `www`, which is where your compiled components go when you're developing, and `dist`, which is where your actual distribution is after running a production build.\n\nThere are a few other important files to look at before we get to the components. If you've written TypeScript before you'll recognize the `tsconfig.json` which defines our TypeScript compiler options. The other important file is `stencil.config.ts`. This file defines your Stencil build and its various options. We'll change a couple of things there later on in this post. Finally there's `src/components.d.ts` which is a file you won't ever modify yourself. It's a file generated by stencil at build time that keeps all your library's TypeScript definitions up to date.\n\n## Components\n\nThe `src/components` directory is where you'll be spending most of your time. We're going to be keeping each component in its own separate folder. You'll notice a `my-component` directory in there by default, with three files inside. The main file is `my-component.tsx`. This is the TSX file that keeps the component class, its render method, and other methods and props associated with your component. There is also a corresponding `my-component.spec.ts` file that is used for testing your component. Finally there is `my-component.css`, which is where your styles live. By default you have CSS files, but you can use CSS preprocessors such as SASS.\n\n## Configuring our Library\n\nThere are a few things we'll want to do right at the beginning before moving on to building components. Let's start in the `stencil.config.ts` file. The first thing we'll change is the `namespace` value. By default it is set to `mycomponent`, but we're going to change this to the name of our library. In my case, I'll be changing the value to `mountain-ui`. Because we changed the namespace, let's also make sure that name is reflected correctly in the `src/index.html` file. Make sure you have the following script tags at the top of your file:\n\n```html\n\u003Cscript type=\"module\" src=\"/build/mountain-ui.esm.js\">\u003C/script>\n\u003Cscript nomodule src=\"/build/mountain-ui.js\">\u003C/script>\n```\n\nThe next thing to do is set up a CSS preprocessor. This is not required, many people will prefer to use plain CSS and that's great. The available plugins for Stencil are listed on the [Plugins](https://stenciljs.com/docs/plugins) page. Personally I love using SASS, so I'm going to be setting that up for my project.\n\nFirst we'll need to install the appropriate plugin. In my case I'll be running the following command (note that I'm using yarn, but you're welcome to use whatever you prefer):\n\n```shell\n$ yarn add --dev @stencil/sass\n```\n\nOnce the plugin is installed, I'll be importing it in the config file, and passing it in to the `plugins` array in the config object. See the full file below:\n\n```typescript\nimport { Config } from '@stencil/core';\nimport { sass } from '@stencil/sass';\n\nexport const config: Config = {\n  namespace: 'mountain-ui',\n  outputTargets: [\n    {\n      type: 'dist',\n      esmLoaderPath: '../loader'\n    },\n    {\n      type: 'docs-readme'\n    },\n    {\n      type: 'www',\n      serviceWorker: null // disable service workers\n    }\n  ],\n  plugins: [sass()]\n};\n```\n\nThat's all you need to do to get your project set up for SASS. If you want to use one of the other preprocessors, simply install the appropriate plugin and follow the same steps above. The last thing I need to do is change `my-component.css` to `my-component.scss`, I'll change the `styleUrl` in `my-component.tsx`, and any new components I create from now on will have an `scss` file instead of a `css` file.\n\n## Next Steps\n\nNow that we've fully configured our project, we're free to build our components without worrying about configuration or build. In the [next post](/posts/first-stencil-component) we'll start to go into a detailed build of our first component!\n\n_Simply want to see the end result repo? Check it out [here](https://github.com/johnbwoodruff/mountain-ui)_","src/content/blog/stencil-getting-started.md","2d7e59b062b53ba5",{"html":623,"metadata":624},"\u003Cp>\u003Cem>This is the second in a series of posts about creating a web component library using Stencil.js - Check out the \u003Ca href=\"/posts/about-stencil\">first post\u003C/a>\u003C/em>\u003C/p>\n\u003Cp>Now that we’ve talked about the reasoning for choosing Stencil to build our web component library, let’s jump right in. First things first, we need to get our base project structure set up. Thankfully, the Ionic team has handled this completely for us. Make sure you’re running \u003Ccode>npm\u003C/code> at version 6 or later, and run the following command:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">$\u003C/span>\u003Cspan style=\"color:#E6DB74\"> npm\u003C/span>\u003Cspan style=\"color:#E6DB74\"> init\u003C/span>\u003Cspan style=\"color:#E6DB74\"> stencil\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You should get a prompt similar to the following:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">?\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Pick a starter › - Use arrow-keys. Return to submit.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">   ionic-pwa\u003C/span>\u003Cspan style=\"color:#E6DB74\">     Everything\u003C/span>\u003Cspan style=\"color:#E6DB74\"> you\u003C/span>\u003Cspan style=\"color:#E6DB74\"> need\u003C/span>\u003Cspan style=\"color:#E6DB74\"> to\u003C/span>\u003Cspan style=\"color:#E6DB74\"> build\u003C/span>\u003Cspan style=\"color:#E6DB74\"> fast,\u003C/span>\u003Cspan style=\"color:#E6DB74\"> production\u003C/span>\u003Cspan style=\"color:#E6DB74\"> ready\u003C/span>\u003Cspan style=\"color:#E6DB74\"> PWAs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">   app\u003C/span>\u003Cspan style=\"color:#E6DB74\">           Minimal\u003C/span>\u003Cspan style=\"color:#E6DB74\"> starter\u003C/span>\u003Cspan style=\"color:#E6DB74\"> for\u003C/span>\u003Cspan style=\"color:#E6DB74\"> building\u003C/span>\u003Cspan style=\"color:#E6DB74\"> a\u003C/span>\u003Cspan style=\"color:#E6DB74\"> Stencil\u003C/span>\u003Cspan style=\"color:#E6DB74\"> app\u003C/span>\u003Cspan style=\"color:#E6DB74\"> or\u003C/span>\u003Cspan style=\"color:#E6DB74\"> website\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">❯\u003C/span>\u003Cspan style=\"color:#E6DB74\">  component\u003C/span>\u003Cspan style=\"color:#E6DB74\">     Collection\u003C/span>\u003Cspan style=\"color:#E6DB74\"> of\u003C/span>\u003Cspan style=\"color:#E6DB74\"> web\u003C/span>\u003Cspan style=\"color:#E6DB74\"> components\u003C/span>\u003Cspan style=\"color:#E6DB74\"> that\u003C/span>\u003Cspan style=\"color:#E6DB74\"> can\u003C/span>\u003Cspan style=\"color:#E6DB74\"> be\u003C/span>\u003Cspan style=\"color:#E6DB74\"> used\u003C/span>\u003Cspan style=\"color:#E6DB74\"> anywhere\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The Ionic team has provided a few starters for us. We’re not interested in building an entire app or PWA using Stencil (although you definitely can!) so we’re going to choose the \u003Ccode>component\u003C/code> option. This will structure it so we can build a reusable component library for distribution.\u003C/p>\n\u003Cp>You’ll be asked to name your collection, so go ahead and name that however you’d like. The component library I’ll be building is one I’m calling \u003Ccode>mountain-ui\u003C/code>, because I live in Utah among the beautiful Wasatch mountain range.\u003C/p>\n\u003Cp>Once the starter is created, you can \u003Ccode>cd\u003C/code> into your newly created directory and run \u003Ccode>npm start\u003C/code>. That’ll open the project in your browser with a basic web component they put there as a start. We’ll jump into writing a component in a minute, but let’s first go over the project structure and figure out where things go.\u003C/p>\n\u003Ch2 id=\"project-structure\">Project Structure\u003C/h2>\n\u003Cp>You’ll notice a few directories. The main one you’ll want to concern yourself with is \u003Ccode>src\u003C/code>. Other important directories to note are \u003Ccode>www\u003C/code>, which is where your compiled components go when you’re developing, and \u003Ccode>dist\u003C/code>, which is where your actual distribution is after running a production build.\u003C/p>\n\u003Cp>There are a few other important files to look at before we get to the components. If you’ve written TypeScript before you’ll recognize the \u003Ccode>tsconfig.json\u003C/code> which defines our TypeScript compiler options. The other important file is \u003Ccode>stencil.config.ts\u003C/code>. This file defines your Stencil build and its various options. We’ll change a couple of things there later on in this post. Finally there’s \u003Ccode>src/components.d.ts\u003C/code> which is a file you won’t ever modify yourself. It’s a file generated by stencil at build time that keeps all your library’s TypeScript definitions up to date.\u003C/p>\n\u003Ch2 id=\"components\">Components\u003C/h2>\n\u003Cp>The \u003Ccode>src/components\u003C/code> directory is where you’ll be spending most of your time. We’re going to be keeping each component in its own separate folder. You’ll notice a \u003Ccode>my-component\u003C/code> directory in there by default, with three files inside. The main file is \u003Ccode>my-component.tsx\u003C/code>. This is the TSX file that keeps the component class, its render method, and other methods and props associated with your component. There is also a corresponding \u003Ccode>my-component.spec.ts\u003C/code> file that is used for testing your component. Finally there is \u003Ccode>my-component.css\u003C/code>, which is where your styles live. By default you have CSS files, but you can use CSS preprocessors such as SASS.\u003C/p>\n\u003Ch2 id=\"configuring-our-library\">Configuring our Library\u003C/h2>\n\u003Cp>There are a few things we’ll want to do right at the beginning before moving on to building components. Let’s start in the \u003Ccode>stencil.config.ts\u003C/code> file. The first thing we’ll change is the \u003Ccode>namespace\u003C/code> value. By default it is set to \u003Ccode>mycomponent\u003C/code>, but we’re going to change this to the name of our library. In my case, I’ll be changing the value to \u003Ccode>mountain-ui\u003C/code>. Because we changed the namespace, let’s also make sure that name is reflected correctly in the \u003Ccode>src/index.html\u003C/code> file. Make sure you have the following script tags at the top of your file:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">script\u003C/span>\u003Cspan style=\"color:#A6E22E\"> type\u003C/span>\u003Cspan style=\"color:#F8F8F2\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"module\"\u003C/span>\u003Cspan style=\"color:#A6E22E\"> src\u003C/span>\u003Cspan style=\"color:#F8F8F2\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"/build/mountain-ui.esm.js\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">script\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">script\u003C/span>\u003Cspan style=\"color:#A6E22E\"> nomodule\u003C/span>\u003Cspan style=\"color:#A6E22E\"> src\u003C/span>\u003Cspan style=\"color:#F8F8F2\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"/build/mountain-ui.js\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">script\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The next thing to do is set up a CSS preprocessor. This is not required, many people will prefer to use plain CSS and that’s great. The available plugins for Stencil are listed on the \u003Ca href=\"https://stenciljs.com/docs/plugins\">Plugins\u003C/a> page. Personally I love using SASS, so I’m going to be setting that up for my project.\u003C/p>\n\u003Cp>First we’ll need to install the appropriate plugin. In my case I’ll be running the following command (note that I’m using yarn, but you’re welcome to use whatever you prefer):\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">$\u003C/span>\u003Cspan style=\"color:#E6DB74\"> yarn\u003C/span>\u003Cspan style=\"color:#E6DB74\"> add\u003C/span>\u003Cspan style=\"color:#AE81FF\"> --dev\u003C/span>\u003Cspan style=\"color:#E6DB74\"> @stencil/sass\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Once the plugin is installed, I’ll be importing it in the config file, and passing it in to the \u003Ccode>plugins\u003C/code> array in the config object. See the full file below:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { Config } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@stencil/core'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">import\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> { sass } \u003C/span>\u003Cspan style=\"color:#F92672\">from\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '@stencil/sass'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> config\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Config\u003C/span>\u003Cspan style=\"color:#F92672\"> =\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  namespace: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'mountain-ui'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  outputTargets: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      type: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'dist'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      esmLoaderPath: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'../loader'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      type: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'docs-readme'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      type: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'www'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      serviceWorker: \u003C/span>\u003Cspan style=\"color:#AE81FF\">null\u003C/span>\u003Cspan style=\"color:#88846F\"> // disable service workers\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  plugins: [\u003C/span>\u003Cspan style=\"color:#A6E22E\">sass\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()]\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>That’s all you need to do to get your project set up for SASS. If you want to use one of the other preprocessors, simply install the appropriate plugin and follow the same steps above. The last thing I need to do is change \u003Ccode>my-component.css\u003C/code> to \u003Ccode>my-component.scss\u003C/code>, I’ll change the \u003Ccode>styleUrl\u003C/code> in \u003Ccode>my-component.tsx\u003C/code>, and any new components I create from now on will have an \u003Ccode>scss\u003C/code> file instead of a \u003Ccode>css\u003C/code> file.\u003C/p>\n\u003Ch2 id=\"next-steps\">Next Steps\u003C/h2>\n\u003Cp>Now that we’ve fully configured our project, we’re free to build our components without worrying about configuration or build. In the \u003Ca href=\"/posts/first-stencil-component\">next post\u003C/a> we’ll start to go into a detailed build of our first component!\u003C/p>\n\u003Cp>\u003Cem>Simply want to see the end result repo? Check it out \u003Ca href=\"https://github.com/johnbwoodruff/mountain-ui\">here\u003C/a>\u003C/em>\u003C/p>",{"headings":625,"localImagePaths":636,"remoteImagePaths":637,"frontmatter":638,"imagePaths":641},[626,629,632,635],{"depth":30,"slug":627,"text":628},"project-structure","Project Structure",{"depth":30,"slug":630,"text":631},"components","Components",{"depth":30,"slug":633,"text":634},"configuring-our-library","Configuring our Library",{"depth":30,"slug":569,"text":570},[],[],{"title":615,"published":17,"description":616,"date":639,"series":554,"tags":640,"cover_image":552,"cover_image_alt":553},["Date","2018-09-16T00:00:00.000Z"],[550,551,506],[],"stencil-getting-started.md","first-stencil-component",{"id":643,"data":645,"body":650,"filePath":651,"digest":652,"rendered":653,"legacyId":674},{"title":646,"description":647,"date":648,"published":17,"tags":649,"cover_image":552,"cover_image_alt":553,"series":554},"Component Libraries with Stencil.js - Your First Component","The third in a series of posts about creating a component library using Stencil.js",["Date","2018-09-17T00:00:00.000Z"],[550,551,506],"_This is the third in a series of posts about creating a web component library using Stencil.js - Check out the [first post](/posts/about-stencil)_\n\nWe've done a lot of setup so far, now let's create our first component. This is the foundation of any component library: the button component. Let's rename the `my-component` folder to `button`, and all the files inside replacing `my-component` to `button`. We're now ready to build our button.\n\n## Component Decorator\n\nThe first thing we're going to do is change the contents of `button.tsx`. We're going to change the `tag` in the `@Component` decorator to our actual tag name, and the `styleUrl` to point to our newly renamed SCSS file, in my case the following:\n\n```tsx\n@Component({\n  tag: 'mtn-button',\n  styleUrl: 'button.scss',\n  shadow: true\n})\n```\n\nNote the `shadow` property. This is declaring that we will be using the [Shadow DOM](https://developers.google.com/web/fundamentals/web-components/shadowdom) for this component. This has many benefits including an isolated DOM and scoped CSS, among others. We'll definitely want to be taking advantage of this, as it's one of the key parts of web components.\n\n## Render Method/JSX\n\nNext we're going to change the class to render a plain button with a single prop.\n\n```tsx\nexport class Button {\n  render() {\n    return (\n      \u003Cbutton>\n        \u003Cslot />\n      \u003C/button>\n    );\n  }\n}\n```\n\nLooking at the render method, you'll notice we're not writing HTML. We're using a JavaScript syntax extension called [JSX](https://reactjs.org/docs/introducing-jsx.html) or JavaScript XML. Note with Stencil we're actually using TSX, a file with the ability to write JSX using TypeScript. Let's change the markup to render a standard HTML button. We're also placing a [slot](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot) inside the button. This is a part of the suite of browser web component APIs; it allows us to fill that slot with markup defined by the consumer of the component. In our case, consuming this component would look like this:\n\n```html\n\u003Cmtn-button>Click Me!\u003C/mtn-button>\n```\n\nThe text \"Click Me!\" is projected down to the slot within the component. The markup in the component will be the following:\n\n```html\n\u003Cbutton>\n  \u003Cslot>Click Me!\u003C/slot>\n\u003C/button>\n```\n\nThis button component is currently incredibly simple. With more complex components we will obviously have more markup, and will occasionally use multiple named slots to project multiple bits of markup down to the component. For now, we'll stick with that for our button.\n\n## Component Props\n\nYou'll have noticed by now if you're familiar at all with React that these components look and function very similarly to React components. Along those lines, we're now going to define a prop. An important piece of functionality for a button is to disable that button. Let's use the `@Prop()` decorator to define a `disabled` property. We're also going to pass that disabled property down to our actual button. We'll update our class like so:\n\n```tsx\nexport class Button {\n  @Prop({ reflectToAttr: true })\n  disabled: boolean;\n\n  render() {\n    return (\n      \u003Cbutton disabled={this.disabled}>\n        \u003Cslot />\n      \u003C/button>\n    );\n  }\n}\n```\n\nWe've defined a property on the class called `disabled`, and added a `@Prop()` decorator to it. We've also passed in an object with a `reflectToAttr` key we've defined to be true. According to the [Stencil Prop Docs](https://stenciljs.com/docs/properties#reflect-properties-values-to-attributes), using that makes sure our disabled prop stays in sync with an HTML attribute. In this case we definitely want that because we're using a disabled attribute.\n\nWe are also adding `disabled={this.disabled}` to our button in the component. This will conditionally apply the disabled attribute depending on whether or not the disabled prop is defined.\n\n## Styling Our Button\n\nCurrently this is an ugly HTML button. We're obviously going to change that. I encourage you to come up with your own style guide and design for your components, but you're of course welcome to copy what I'm doing. First off I'm going to create a file at `src/styles/variables.scss` for my color variables. If I have to change colors, I want it to apply to all the colors rather than change them one by one, so I'm using SASS variables to do that. I'm going to start with my font, a couple basic colors, and my primary color shades which is all I'm focusing on right now.\n\n```scss\n// Font Family\n$font-family: 'Open Sans', 'Helvetica Neue', Arial, Helvetica, sans-serif;\n\n// Basic Colors\n$white: #ffffff;\n$black: #000000;\n\n// Brand Colors\n$blue-steel: #4571c4;\n$blue-steel-dark: #315db0;\n```\n\nNow that I've got my font and colors established, I'm going to give my button some classy styling.\n\n```scss\n@import '../../styles/variables.scss';\n\n:host {\n  box-sizing: border-box;\n}\n\n:host([disabled]) {\n  pointer-events: none;\n}\n\nbutton {\n  font-family: $font-family;\n  cursor: pointer;\n  border: none;\n  background-color: $blue-steel;\n  color: $white;\n  line-height: 20px;\n  font-size: 14px;\n  padding: 4px 12px;\n  border-radius: 3px;\n\n  &:hover {\n    background-color: $blue-steel-dark;\n  }\n  &:active {\n    background-color: darken($blue-steel-dark, 5%);\n  }\n  &:disabled {\n    opacity: 0.4;\n  }\n}\n```\n\nFirst I'm importing my variables for use. I'm then using the `:host` selector, which allows us to select the shadow host of the Shadow DOM, for a couple different things. First of all I'm setting `box-sizing: border-box` to the host element. I personally prefer using the border-box sizing to not take into account borders for the height and width. It makes more sense to me personally. Next I'm using the host selector to _only_ select the host when it has a `disabled` attribute applied to it. In that case I'm applying `pointer-events: none` to the element. This makes it so setting a click handler on the element will not fire when the button is disabled.\n\nNext I'm styling my button itself. You'll notice and possibly worry about me globally styling the `button` element. This is not a problem because we're using the Shadow DOM, and this is one of its best benefits. All of your styling is scoped to the component's Shadow DOM, no styles from outside can penetrate it, and no styles from inside can mess up anything outside of it. It's pretty awesome.\n\nThe rest of the styles are pretty straightforward. I have the button styles, the background color darkens on hover, and darkens even more on click. When it's disabled, I apply `opacity: 0.4` to make it look disabled.\n\nIf you haven't already, make sure you run `npm start` to start up your dev server and it'll automatically open in your browser. Go ahead and add your button to your `index.html` page so you can test your component. I added the following markup:\n\n```html\n\u003Cmtn-button>Button\u003C/mtn-button> \u003Cmtn-button disabled>Button\u003C/mtn-button>\n```\n\nWhen your page refreshes automatically you should see your beautiful new button component in both its disabled and non-disabled states!\n\n![new buttons](/img/posts/first-stencil-component/buttons.png)\n\n## Next Steps\n\nThere you have it! A classy button component that looks great and has basic functionality. There's obviously a lot more to a button (and most components) that will implement, but we'll do that in our [next post](/posts/stencil-going-deeper). See you there!\n\n_Simply want to see the end result repo? Check it out [here](https://github.com/johnbwoodruff/mountain-ui)_","src/content/blog/first-stencil-component.md","2fc3c338e4d1a9d3",{"html":654,"metadata":655},"\u003Cp>\u003Cem>This is the third in a series of posts about creating a web component library using Stencil.js - Check out the \u003Ca href=\"/posts/about-stencil\">first post\u003C/a>\u003C/em>\u003C/p>\n\u003Cp>We’ve done a lot of setup so far, now let’s create our first component. This is the foundation of any component library: the button component. Let’s rename the \u003Ccode>my-component\u003C/code> folder to \u003Ccode>button\u003C/code>, and all the files inside replacing \u003Ccode>my-component\u003C/code> to \u003Ccode>button\u003C/code>. We’re now ready to build our button.\u003C/p>\n\u003Ch2 id=\"component-decorator\">Component Decorator\u003C/h2>\n\u003Cp>The first thing we’re going to do is change the contents of \u003Ccode>button.tsx\u003C/code>. We’re going to change the \u003Ccode>tag\u003C/code> in the \u003Ccode>@Component\u003C/code> decorator to our actual tag name, and the \u003Ccode>styleUrl\u003C/code> to point to our newly renamed SCSS file, in my case the following:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Component\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  tag: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'mtn-button'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  styleUrl: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'button.scss'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  shadow: \u003C/span>\u003Cspan style=\"color:#AE81FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Note the \u003Ccode>shadow\u003C/code> property. This is declaring that we will be using the \u003Ca href=\"https://developers.google.com/web/fundamentals/web-components/shadowdom\">Shadow DOM\u003C/a> for this component. This has many benefits including an isolated DOM and scoped CSS, among others. We’ll definitely want to be taking advantage of this, as it’s one of the key parts of web components.\u003C/p>\n\u003Ch2 id=\"render-methodjsx\">Render Method/JSX\u003C/h2>\n\u003Cp>Next we’re going to change the class to render a plain button with a single prop.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Button\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  render\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">slot\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Looking at the render method, you’ll notice we’re not writing HTML. We’re using a JavaScript syntax extension called \u003Ca href=\"https://reactjs.org/docs/introducing-jsx.html\">JSX\u003C/a> or JavaScript XML. Note with Stencil we’re actually using TSX, a file with the ability to write JSX using TypeScript. Let’s change the markup to render a standard HTML button. We’re also placing a \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot\">slot\u003C/a> inside the button. This is a part of the suite of browser web component APIs; it allows us to fill that slot with markup defined by the consumer of the component. In our case, consuming this component would look like this:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Click Me!&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The text “Click Me!” is projected down to the slot within the component. The markup in the component will be the following:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">slot\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Click Me!&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">slot\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This button component is currently incredibly simple. With more complex components we will obviously have more markup, and will occasionally use multiple named slots to project multiple bits of markup down to the component. For now, we’ll stick with that for our button.\u003C/p>\n\u003Ch2 id=\"component-props\">Component Props\u003C/h2>\n\u003Cp>You’ll have noticed by now if you’re familiar at all with React that these components look and function very similarly to React components. Along those lines, we’re now going to define a prop. An important piece of functionality for a button is to disable that button. Let’s use the \u003Ccode>@Prop()\u003C/code> decorator to define a \u003Ccode>disabled\u003C/code> property. We’re also going to pass that disabled property down to our actual button. We’ll update our class like so:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Button\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">Prop\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({ reflectToAttr: \u003C/span>\u003Cspan style=\"color:#AE81FF\">true\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  disabled\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> boolean\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  render\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#A6E22E\"> disabled\u003C/span>\u003Cspan style=\"color:#F92672\">={\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.disabled\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">slot\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We’ve defined a property on the class called \u003Ccode>disabled\u003C/code>, and added a \u003Ccode>@Prop()\u003C/code> decorator to it. We’ve also passed in an object with a \u003Ccode>reflectToAttr\u003C/code> key we’ve defined to be true. According to the \u003Ca href=\"https://stenciljs.com/docs/properties#reflect-properties-values-to-attributes\">Stencil Prop Docs\u003C/a>, using that makes sure our disabled prop stays in sync with an HTML attribute. In this case we definitely want that because we’re using a disabled attribute.\u003C/p>\n\u003Cp>We are also adding \u003Ccode>disabled={this.disabled}\u003C/code> to our button in the component. This will conditionally apply the disabled attribute depending on whether or not the disabled prop is defined.\u003C/p>\n\u003Ch2 id=\"styling-our-button\">Styling Our Button\u003C/h2>\n\u003Cp>Currently this is an ugly HTML button. We’re obviously going to change that. I encourage you to come up with your own style guide and design for your components, but you’re of course welcome to copy what I’m doing. First off I’m going to create a file at \u003Ccode>src/styles/variables.scss\u003C/code> for my color variables. If I have to change colors, I want it to apply to all the colors rather than change them one by one, so I’m using SASS variables to do that. I’m going to start with my font, a couple basic colors, and my primary color shades which is all I’m focusing on right now.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"scss\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">// Font Family\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">$font-family: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'Open Sans'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#E6DB74\">'Helvetica Neue'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#66D9EF\">Arial\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#66D9EF\">Helvetica\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#66D9EF\">sans-serif\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">// Basic Colors\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">$white: \u003C/span>\u003Cspan style=\"color:#AE81FF\">#ffffff\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">$black: \u003C/span>\u003Cspan style=\"color:#AE81FF\">#000000\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">// Brand Colors\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">$blue-steel: \u003C/span>\u003Cspan style=\"color:#AE81FF\">#4571c4\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">$blue-steel-dark: \u003C/span>\u003Cspan style=\"color:#AE81FF\">#315db0\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now that I’ve got my font and colors established, I’m going to give my button some classy styling.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"scss\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">@import\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '../../styles/variables.scss'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">:host\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  box-sizing\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">border-box\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">:host\u003C/span>\u003Cspan style=\"color:#F8F8F2\">([\u003C/span>\u003Cspan style=\"color:#A6E22E\">disabled\u003C/span>\u003Cspan style=\"color:#F8F8F2\">]) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  pointer-events\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">none\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  font-family\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: $font-family;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  cursor\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">pointer\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  border\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">none\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  background-color\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: $blue-steel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  color\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: $white;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  line-height\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">20\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  font-size\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">14\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  padding\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">4\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#AE81FF\"> 12\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  border-radius\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">3\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">:hover\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    background-color\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: $blue-steel-dark;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">:active\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    background-color\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">darken\u003C/span>\u003Cspan style=\"color:#F8F8F2\">($blue-steel-dark, \u003C/span>\u003Cspan style=\"color:#AE81FF\">5\u003C/span>\u003Cspan style=\"color:#F92672\">%\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">:disabled\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    opacity\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">0.4\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>First I’m importing my variables for use. I’m then using the \u003Ccode>:host\u003C/code> selector, which allows us to select the shadow host of the Shadow DOM, for a couple different things. First of all I’m setting \u003Ccode>box-sizing: border-box\u003C/code> to the host element. I personally prefer using the border-box sizing to not take into account borders for the height and width. It makes more sense to me personally. Next I’m using the host selector to \u003Cem>only\u003C/em> select the host when it has a \u003Ccode>disabled\u003C/code> attribute applied to it. In that case I’m applying \u003Ccode>pointer-events: none\u003C/code> to the element. This makes it so setting a click handler on the element will not fire when the button is disabled.\u003C/p>\n\u003Cp>Next I’m styling my button itself. You’ll notice and possibly worry about me globally styling the \u003Ccode>button\u003C/code> element. This is not a problem because we’re using the Shadow DOM, and this is one of its best benefits. All of your styling is scoped to the component’s Shadow DOM, no styles from outside can penetrate it, and no styles from inside can mess up anything outside of it. It’s pretty awesome.\u003C/p>\n\u003Cp>The rest of the styles are pretty straightforward. I have the button styles, the background color darkens on hover, and darkens even more on click. When it’s disabled, I apply \u003Ccode>opacity: 0.4\u003C/code> to make it look disabled.\u003C/p>\n\u003Cp>If you haven’t already, make sure you run \u003Ccode>npm start\u003C/code> to start up your dev server and it’ll automatically open in your browser. Go ahead and add your button to your \u003Ccode>index.html\u003C/code> page so you can test your component. I added the following markup:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Button&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">> &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-button\u003C/span>\u003Cspan style=\"color:#A6E22E\"> disabled\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Button&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>When your page refreshes automatically you should see your beautiful new button component in both its disabled and non-disabled states!\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/first-stencil-component/buttons.png\" alt=\"new buttons\">\u003C/p>\n\u003Ch2 id=\"next-steps\">Next Steps\u003C/h2>\n\u003Cp>There you have it! A classy button component that looks great and has basic functionality. There’s obviously a lot more to a button (and most components) that will implement, but we’ll do that in our \u003Ca href=\"/posts/stencil-going-deeper\">next post\u003C/a>. See you there!\u003C/p>\n\u003Cp>\u003Cem>Simply want to see the end result repo? Check it out \u003Ca href=\"https://github.com/johnbwoodruff/mountain-ui\">here\u003C/a>\u003C/em>\u003C/p>",{"headings":656,"localImagePaths":668,"remoteImagePaths":669,"frontmatter":670,"imagePaths":673},[657,660,663,664,667],{"depth":30,"slug":658,"text":659},"component-decorator","Component Decorator",{"depth":30,"slug":661,"text":662},"render-methodjsx","Render Method/JSX",{"depth":30,"slug":563,"text":564},{"depth":30,"slug":665,"text":666},"styling-our-button","Styling Our Button",{"depth":30,"slug":569,"text":570},[],[],{"title":646,"published":17,"description":647,"date":671,"series":554,"tags":672,"cover_image":552,"cover_image_alt":553},["Date","2018-09-17T00:00:00.000Z"],[550,551,506],[],"first-stencil-component.md","stencil-decorators",{"id":675,"data":677,"body":682,"filePath":683,"digest":684,"rendered":685,"legacyId":714},{"title":678,"description":679,"date":680,"published":17,"tags":681,"cover_image":552,"cover_image_alt":553,"series":554},"Component Libraries with Stencil.js - Decorators","The fifth in a series of posts about creating a component library using Stencil.js",["Date","2018-11-18T00:00:00.000Z"],[550,551,506],"_This is the fifth in a series of posts about creating a web component library using Stencil.js - Check out the [first post](/posts/about-stencil/)_\n\nAt this point we've built a fairly basic component that looks great and functions correctly. We're now going to move on to a new component that has more complex functionality and interaction. Tabs are one of the basic components every library needs. Each tab is effectively a button, but those buttons work together and maintain a shared state with regards to which tab is currently active. This is a perfect candidate for our next component, as it can use all the rest of the [decorators](https://stenciljs.com/docs/decorators#decorators) Stencil provides.\n\n## Building Blocks\n\nLet's first create an incredibly simple component with no styling or functionality. Start by creating a new folder, `tabs`, which contains three files: `tabs.tsx`, `tab.tsx`, and `tabs.scss` for our styles. Let's start with the building block tab component.\n\nThis will be a little different. It will be a component, but will not have a render function. It will instead keep track of a couple of props for us. Add the following to your `tab.tsx` file:\n\n```tsx\n@Component({\n  tag: 'mtn-tab',\n  shadow: true\n})\nexport class Tab {\n  @Prop() label: string;\n\n  @Prop() active: boolean;\n\n  @Prop({ reflectToAttr: true }) disabled: boolean;\n}\n```\n\nWe've got props for the label, which the tab will display, a flag that shows whether or not it's active, and of course a disabled property. If we wanted to keep more metadata associated with each individual tab, this is where we'd add it.\n\nNow let's dig into our main tabs component in `tabs.tsx`. We first need to render the basic structure of the component. Let's start with the following:\n\n```tsx\nexport class Tabs {\n  render() {\n    const classMap = this.getCssClassMap();\n\n    return (\n      \u003Cdiv class={classMap}>\n        \u003Cbutton role=\"tab\">Tab 1\u003C/button>\n        \u003Cbutton role=\"tab\">Tab 2\u003C/button>\n        \u003Cbutton role=\"tab\">Tab 3\u003C/button>\n      \u003C/div>\n    );\n  }\n\n  private getCssClassMap(): CssClassMap {\n    return {\n      'tabs-list': true\n    };\n  }\n}\n```\n\nLet's also get some very basic styling in place to our host component and `.tabs-list` class. In our `tabs.scss` file we'll put in a few blocks:\n\n```scss\n@import '../../styles/variables.scss';\n\n:host {\n  display: block;\n  box-sizing: border-box;\n}\n\n.tabs-list {\n  border-bottom: 1px solid #dddddd;\n  padding: 0 5px;\n}\n```\n\n![ugly tabs](/img/posts/stencil-decorators/ugly.png)\n\nThis obviously looks really ugly and not at all like tabs, but it's a start, and we simply need to style them to be a little nicer. Let's add a few simple styles to make them look beautiful.\n\nLet's give each button a `.tab-button` class and an `.active` class to the first one. Now for the class definition:\n\n```scss\n.tab-button {\n  border: 0;\n  font-size: 14px;\n  font-family: $font-family;\n  padding: 8px;\n  outline: none;\n  cursor: pointer;\n\n  &:hover:not(:disabled):not(.active) {\n    border-bottom: 3px solid $light-dark;\n  }\n\n  &:disabled {\n    opacity: 0.4;\n  }\n\n  &.active {\n    border-bottom: 3px solid $blue-steel;\n    font-weight: 600;\n  }\n}\n```\n\nWe're doing a couple things here that you can work out, but basically we're removing the styling that buttons have, tweaking the font, and then adding a nice border at the bottom of the tab when it's active. We're also doing a fun little hover border with a light gray color when hovering over a tab that's neither disabled nor currently active. We're of course also defining what a disabled tab looks like.\n\n![beautiful tabs](/img/posts/stencil-decorators/beautiful.png)\n\nNow our tabs look like actual tabs, but they're also hardcoded. We want to be able to specify how many tabs we want, as well as customize their labels. Here's where we get into the other decorators.\n\n## State and Element Decorators\n\nFirst let's define the tabs and dynamically create them. These tabs define how we render our component, so we're going to define them along with the `@State()` decorator:\n\n```tsx\nexport class Tabs {\n  @State()\n  tabs: HTMLMtnTabElement[] = [];\n\n  //...\n}\n```\n\nThe `@State()` decorator is used to manage data that is internal to the component. Any changes to this property will cause the component to re-render, as the state has changed.\n\nYou'll also notice I'm using the `HTMLMtnTabElement[]` type for the tabs. This is an interface that is created automatically by Stencil in your `components.d.ts` file. It gives you some nice intellisense for your component, with the standard HTML element properties and methods, as well as those you define on your component.\n\nWith our tabs, we want to use the following syntax to define them:\n\n```html\n\u003Cmtn-tabs>\n  \u003Cmtn-tab active label=\"Tab 1\">\u003C/mtn-tab>\n  \u003Cmtn-tab label=\"Tab 2\">\u003C/mtn-tab>\n  \u003Cmtn-tab label=\"Tab 3\" disabled>\u003C/mtn-tab>\n  \u003Cmtn-tab label=\"Tab 4\">\u003C/mtn-tab>\n\u003C/mtn-tabs>\n```\n\nLet's use the `componentWillLoad()` lifecycle hook to grab the tabs we've specified and render them. We're also going to have to use the `@Element()` decorator so we can reference it in our method.\n\nThe `@Element()` method is pretty simple. It returns an instance of the host `HTMLElement` of your component. We want to query elements within our own component, so we're going to use that in our `componentWillLoad()` method like so:\n\n```tsx\nexport class Tabs {\n  // Our host element\n  @Element()\n  el: HTMLElement;\n\n  @State()\n  tabs: HTMLMtnTabElement[] = [];\n\n  componentWillLoad() {\n    // Grab tabs from this component\n    this.tabs = Array.from(this.el.querySelectorAll('mtn-tab'));\n    if (this.tabs.length === 0) {\n      throw new Error('[mtn-tabs] Must have at least one tab');\n    }\n  }\n  //...\n}\n```\n\nThis snippet grabs all `mtn-tab` elements and sticks them in our `tabs` property. Let's then adjust our `render()` function to use the dynamically grabbed tabs.\n\n```tsx\nexport class Tabs {\n  // ...\n\n  render() {\n    const classMap = this.getCssClassMap();\n\n    return (\n      \u003Cdiv class={classMap}>\n        {this.tabs.map((tab: HTMLMtnTabElement, index: number) => {\n          const tabClassMap: CssClassMap = {\n            'tab-button': true,\n            active: tab.active\n          };\n\n          return (\n            \u003Cbutton\n              role=\"tab\"\n              disabled={tab.disabled}\n              class={tabClassMap}\n              onClick={() => this.openTab(index)}>\n              {tab.label}\n            \u003C/button>\n          );\n        })}\n      \u003C/div>\n    );\n  }\n}\n```\n\nIf you've ever used React, you'll recognize what we're doing here. Remember that TSX is TypeScript, not actual HTML, so we can do things such as transform arrays into other rendered elements. We're doing this in our function here. We're taking `this.tabs` and using the `map()` function to transform those tabs into elements we want to render on screen. In this case we're rendering our buttons with the `.tab-button` class, and we're conditionally applying the `.active` class to the tab which is marked as active. We make sure to assign the disabled attribute conditionally to those tabs that we've marked as disabled. We also specified a click handler, `onClick`, that we'll implement now.\n\n## Method Decorator\n\nWe want to implement our click handler on a tab so we can correctly change tabs when clicked on. For this we're going to use the `@Method()` decorator. This decorator exposes class methods on the public API for the component. In other words, you can call those methods simply by querying for the element and calling its method, like so:\n\n```ts\nconst tabs = document.querySelector('mtn-tabs');\ntabs.openTab(2);\n```\n\nIn order to keep methods internal to the component we want to simply omit the `@Method()` decorator. By my judgement, methods should be kept internal unless there is a valid reason for them to be exposed. In the case of this `openTab()` function, there is definitly a good reason to expose it, so let's implement it now. According to the docs, [public methods must be async](https://stenciljs.com/docs/methods#public-methods-must-be-async) so we're making sure to mark it as such.\n\n```tsx\nexport class Tabs {\n  // ...\n\n  @Method()\n  async openTab(index: number) {\n    if (index >= this.tabs.length) {\n      throw new Error(\n        `[mtn-tabs] Index ${index} is out of bounds of tabs length`\n      );\n    }\n    if (!this.tabs[index].disabled) {\n      this.tabs = this.tabs.map((tab, i) => {\n        tab.active = i === index;\n        return tab;\n      });\n    }\n  }\n\n  // ...\n}\n```\n\nWe first make sure that the index requested exists. We can't select a tab that doesn't exist. We then check that the tab that has been clicked is not disabled. We don't want a disabled tab to have any functionality. Otherwise we change the `active` flag on each tab, depending on whether the index of the tab matches the index we passed into the method. If it matches, we set `active` to `true`, otherwise we set it to `false`.\n\nIf you save and check, your tabs now change when you click on them! They're starting to work just how we want them to. There are a few more things, however, that we want to do before we finish up this component.\n\n## Event Decorator\n\nWe exposed the `openTab()` method on the public API of our component. This is obviously useful to be able to programatically change tabs. What about being able to determine when tabs have changed and react to that change? We would use custom Events with the `@Event()` decorator.\n\nWith our components, we can define an `EventEmitter` to emit [Custom DOM events](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events). This is really easy with Stencil. Let's define ours now and emit the changed tab in our `openTab()` method:\n\n```tsx\nexport class Tabs {\n  // ...\n\n  @Event({ eventName: 'change' })\n  onChange: EventEmitter;\n\n  @Method()\n  openTab(index: number) {\n    if (index >= this.tabs.length) {\n      throw new Error(\n        `[mtn-tabs] Index ${index} is out of bounds of tabs length`\n      );\n    }\n    if (!this.tabs[index].disabled) {\n      this.tabs = this.tabs.map((tab, i) => {\n        tab.active = i === index;\n        return tab;\n      });\n      this.onChange.emit({ tabId: index });\n    }\n  }\n\n  // ...\n}\n```\n\nWe created our `onChange` which is an `EventEmitter` that we imported from Stencil. We also changed its name using the `eventName` config property in the decorator. You can change this if you want or keep it the same, it's up to your preference. The only suggestion is that you keep your naming consistent.\n\nWe then call the `emit()` function on the `EventEmitter` and emit an object with a `tabId` of the changed tab. We can now listen to this event outside of this component and react to it, like follows:\n\n```ts\nconst tabs = document.querySelector('mtn-tabs');\ntabs.addEventListener('change', event => {\n  // You'll find your emitted object under event.detail\n  console.log(`CHANGED TABS TO INDEX ${event.detail.tabId}`);\n});\n```\n\nNow you can do things such as swapping out views when the currently active tab changes! Events are super handy when it comes to any good component library. We could add all sorts of events to our components. In the case of our tabs, however, we'll leave it with this one event.\n\n## Listen Decorator\n\nThe `@Listen()` decorator is closely related to the `@Event()` decorator. Basically it's a shorthand way of listening and reacting to a DOM Event. You could either listen to your own component event you've defined, or you could listen to a standard event, such as the scroll event. It works like this:\n\n```tsx\nexport class MyComponent {\n  @Listen('body:scroll')\n  handleScroll(ev) {\n    console.log('The body was scrolled', ev);\n  }\n}\n```\n\nWe're not using this decorator in our tabs component, but it's very simple to use. Other use cases might be a `keyup` listener which you could use to, for example, implement the [Konami Code](https://en.wikipedia.org/wiki/Konami_Code) on your component to unlock a fun easter egg.\n\n## Watch Decorator\n\nThere is one more main decorator in Stencil's toolkit, and that's the `@Watch()` decorator. It is used to watch a specific property on the component class, and decorates a method which is called upon that property being changed. It calls the method with the `oldValue` and `newValue`, so you can react with either value in mind. We're not going to use it in our tabs component, but we could if we wanted. Instead of emitting the new index in the `openTab()` function, we could instead listen to the tabs property and emit the newly active tab from there, perhaps like this:\n\n```tsx\nexport class Tabs {\n  // ...\n\n  @Watch('tabs')\n  tabsChangeHandler(newValue: HTMLMtnTabElement[]) {\n    const newIndex = newValue.findIndex(tab => tab.active);\n    this.onChange.emit({ tabId: newIndex });\n  }\n\n  // ...\n}\n```\n\nIn that function we don't care about the old value, we just want to return the new tab. This works identically to how we were doing it previously, it still emits the new tab when the tabs change. We're not using this method in our component, however, because we have to search for the index of the new tab each time the tabs are updated, whereas we know for certain which tab is the new one in our `openTab()` method, so we'll stick with that. This is how you use the `@Watch()` decorator though, and it's useful for other situations and components, so it's worth keeping around in your toolbox.\n\n## Next Steps\n\nCongratulations! Your tabs component should be fully working now! We have a public API to change tabs, an event we can listen and react to, and internal state that helps us re-render appropriately when needed. The decorators we've gone over in this and previous posts form the foundation of building web components with Stencil. We've covered a ton of ground in this series, but there's still more to be had! One of the most important aspects of developing software has been missing thus far, and that's **testing your code**. We'll be going over that in the next post, coming soon!\n\n_Simply want to see the end result repo? Check it out [here](https://github.com/johnbwoodruff/mountain-ui)_","src/content/blog/stencil-decorators.md","0b66451a7161fe54",{"html":686,"metadata":687},"\u003Cp>\u003Cem>This is the fifth in a series of posts about creating a web component library using Stencil.js - Check out the \u003Ca href=\"/posts/about-stencil/\">first post\u003C/a>\u003C/em>\u003C/p>\n\u003Cp>At this point we’ve built a fairly basic component that looks great and functions correctly. We’re now going to move on to a new component that has more complex functionality and interaction. Tabs are one of the basic components every library needs. Each tab is effectively a button, but those buttons work together and maintain a shared state with regards to which tab is currently active. This is a perfect candidate for our next component, as it can use all the rest of the \u003Ca href=\"https://stenciljs.com/docs/decorators#decorators\">decorators\u003C/a> Stencil provides.\u003C/p>\n\u003Ch2 id=\"building-blocks\">Building Blocks\u003C/h2>\n\u003Cp>Let’s first create an incredibly simple component with no styling or functionality. Start by creating a new folder, \u003Ccode>tabs\u003C/code>, which contains three files: \u003Ccode>tabs.tsx\u003C/code>, \u003Ccode>tab.tsx\u003C/code>, and \u003Ccode>tabs.scss\u003C/code> for our styles. Let’s start with the building block tab component.\u003C/p>\n\u003Cp>This will be a little different. It will be a component, but will not have a render function. It will instead keep track of a couple of props for us. Add the following to your \u003Ccode>tab.tsx\u003C/code> file:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">@\u003C/span>\u003Cspan style=\"color:#A6E22E\">Component\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  tag: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'mtn-tab'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  shadow: \u003C/span>\u003Cspan style=\"color:#AE81FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">})\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Tab\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">Prop\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() label\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> string\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">Prop\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() active\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> boolean\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">Prop\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({ reflectToAttr: \u003C/span>\u003Cspan style=\"color:#AE81FF\">true\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> }) disabled\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> boolean\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We’ve got props for the label, which the tab will display, a flag that shows whether or not it’s active, and of course a disabled property. If we wanted to keep more metadata associated with each individual tab, this is where we’d add it.\u003C/p>\n\u003Cp>Now let’s dig into our main tabs component in \u003Ccode>tabs.tsx\u003C/code>. We first need to render the basic structure of the component. Let’s start with the following:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Tabs\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  render\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> classMap \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.\u003C/span>\u003Cspan style=\"color:#A6E22E\">getCssClassMap\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">div\u003C/span>\u003Cspan style=\"color:#A6E22E\"> class\u003C/span>\u003Cspan style=\"color:#F92672\">={\u003C/span>\u003Cspan style=\"color:#F8F8F2\">classMap\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#A6E22E\"> role\u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"tab\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Tab 1&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#A6E22E\"> role\u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"tab\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Tab 2&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#A6E22E\"> role\u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"tab\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>Tab 3&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">div\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  private\u003C/span>\u003Cspan style=\"color:#A6E22E\"> getCssClassMap\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">CssClassMap\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6DB74\">      'tabs-list'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">true\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Let’s also get some very basic styling in place to our host component and \u003Ccode>.tabs-list\u003C/code> class. In our \u003Ccode>tabs.scss\u003C/code> file we’ll put in a few blocks:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"scss\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">@import\u003C/span>\u003Cspan style=\"color:#E6DB74\"> '../../styles/variables.scss'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">:host\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  display\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">block\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  box-sizing\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">border-box\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">.tabs-list\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  border-bottom\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">1\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#66D9EF\"> solid\u003C/span>\u003Cspan style=\"color:#AE81FF\"> #dddddd\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  padding\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">0\u003C/span>\u003Cspan style=\"color:#AE81FF\"> 5\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cimg src=\"/img/posts/stencil-decorators/ugly.png\" alt=\"ugly tabs\">\u003C/p>\n\u003Cp>This obviously looks really ugly and not at all like tabs, but it’s a start, and we simply need to style them to be a little nicer. Let’s add a few simple styles to make them look beautiful.\u003C/p>\n\u003Cp>Let’s give each button a \u003Ccode>.tab-button\u003C/code> class and an \u003Ccode>.active\u003C/code> class to the first one. Now for the class definition:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"scss\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">.tab-button\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  border\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">0\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  font-size\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">14\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  font-family\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: $font-family;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  padding\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">8\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">  outline\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">none\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  cursor\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#66D9EF\">pointer\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">:hover:not\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#A6E22E\">:disabled\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003Cspan style=\"color:#A6E22E\">:not\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#A6E22E\">.active\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    border-bottom\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">3\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#66D9EF\"> solid\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> $light-dark;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">:disabled\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    opacity\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">0.4\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  &#x26;\u003C/span>\u003Cspan style=\"color:#A6E22E\">.active\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    border-bottom\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">3\u003C/span>\u003Cspan style=\"color:#F92672\">px\u003C/span>\u003Cspan style=\"color:#66D9EF\"> solid\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> $blue-steel;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    font-weight\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">600\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We’re doing a couple things here that you can work out, but basically we’re removing the styling that buttons have, tweaking the font, and then adding a nice border at the bottom of the tab when it’s active. We’re also doing a fun little hover border with a light gray color when hovering over a tab that’s neither disabled nor currently active. We’re of course also defining what a disabled tab looks like.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/posts/stencil-decorators/beautiful.png\" alt=\"beautiful tabs\">\u003C/p>\n\u003Cp>Now our tabs look like actual tabs, but they’re also hardcoded. We want to be able to specify how many tabs we want, as well as customize their labels. Here’s where we get into the other decorators.\u003C/p>\n\u003Ch2 id=\"state-and-element-decorators\">State and Element Decorators\u003C/h2>\n\u003Cp>First let’s define the tabs and dynamically create them. These tabs define how we render our component, so we’re going to define them along with the \u003Ccode>@State()\u003C/code> decorator:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Tabs\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">State\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  tabs\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">HTMLMtnTabElement\u003C/span>\u003Cspan style=\"color:#F8F8F2\">[] \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  //...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The \u003Ccode>@State()\u003C/code> decorator is used to manage data that is internal to the component. Any changes to this property will cause the component to re-render, as the state has changed.\u003C/p>\n\u003Cp>You’ll also notice I’m using the \u003Ccode>HTMLMtnTabElement[]\u003C/code> type for the tabs. This is an interface that is created automatically by Stencil in your \u003Ccode>components.d.ts\u003C/code> file. It gives you some nice intellisense for your component, with the standard HTML element properties and methods, as well as those you define on your component.\u003C/p>\n\u003Cp>With our tabs, we want to use the following syntax to define them:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-tabs\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-tab\u003C/span>\u003Cspan style=\"color:#A6E22E\"> active\u003C/span>\u003Cspan style=\"color:#A6E22E\"> label\u003C/span>\u003Cspan style=\"color:#F8F8F2\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"Tab 1\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-tab\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-tab\u003C/span>\u003Cspan style=\"color:#A6E22E\"> label\u003C/span>\u003Cspan style=\"color:#F8F8F2\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"Tab 2\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-tab\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-tab\u003C/span>\u003Cspan style=\"color:#A6E22E\"> label\u003C/span>\u003Cspan style=\"color:#F8F8F2\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"Tab 3\"\u003C/span>\u003Cspan style=\"color:#A6E22E\"> disabled\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-tab\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-tab\u003C/span>\u003Cspan style=\"color:#A6E22E\"> label\u003C/span>\u003Cspan style=\"color:#F8F8F2\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"Tab 4\"\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-tab\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">mtn-tabs\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Let’s use the \u003Ccode>componentWillLoad()\u003C/code> lifecycle hook to grab the tabs we’ve specified and render them. We’re also going to have to use the \u003Ccode>@Element()\u003C/code> decorator so we can reference it in our method.\u003C/p>\n\u003Cp>The \u003Ccode>@Element()\u003C/code> method is pretty simple. It returns an instance of the host \u003Ccode>HTMLElement\u003C/code> of your component. We want to query elements within our own component, so we’re going to use that in our \u003Ccode>componentWillLoad()\u003C/code> method like so:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Tabs\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // Our host element\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">Element\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  el\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">HTMLElement\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">State\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  tabs\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">HTMLMtnTabElement\u003C/span>\u003Cspan style=\"color:#F8F8F2\">[] \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> [];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  componentWillLoad\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">    // Grab tabs from this component\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FD971F\">    this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.tabs \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> Array.\u003C/span>\u003Cspan style=\"color:#A6E22E\">from\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.el.\u003C/span>\u003Cspan style=\"color:#A6E22E\">querySelectorAll\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E6DB74\">'mtn-tab'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.tabs.length \u003C/span>\u003Cspan style=\"color:#F92672\">===\u003C/span>\u003Cspan style=\"color:#AE81FF\"> 0\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">      throw\u003C/span>\u003Cspan style=\"color:#F92672\"> new\u003C/span>\u003Cspan style=\"color:#A6E22E\"> Error\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E6DB74\">'[mtn-tabs] Must have at least one tab'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  //...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This snippet grabs all \u003Ccode>mtn-tab\u003C/code> elements and sticks them in our \u003Ccode>tabs\u003C/code> property. Let’s then adjust our \u003Ccode>render()\u003C/code> function to use the dynamically grabbed tabs.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Tabs\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  render\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> classMap \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.\u003C/span>\u003Cspan style=\"color:#A6E22E\">getCssClassMap\u003C/span>\u003Cspan style=\"color:#F8F8F2\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">div\u003C/span>\u003Cspan style=\"color:#A6E22E\"> class\u003C/span>\u003Cspan style=\"color:#F92672\">={\u003C/span>\u003Cspan style=\"color:#F8F8F2\">classMap\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">        {\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.tabs.\u003C/span>\u003Cspan style=\"color:#A6E22E\">map\u003C/span>\u003Cspan style=\"color:#F8F8F2\">((\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">tab\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">HTMLMtnTabElement\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">index\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> number\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) \u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\">=>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">          const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> tabClassMap\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">CssClassMap\u003C/span>\u003Cspan style=\"color:#F92672\"> =\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6DB74\">            'tab-button'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">: \u003C/span>\u003Cspan style=\"color:#AE81FF\">true\u003C/span>\u003Cspan style=\"color:#F8F8F2\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">            active: tab.active\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">          };\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">          return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">              role\u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#E6DB74\">\"tab\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">              disabled\u003C/span>\u003Cspan style=\"color:#F92672\">={\u003C/span>\u003Cspan style=\"color:#F8F8F2\">tab.disabled\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">              class\u003C/span>\u003Cspan style=\"color:#F92672\">={\u003C/span>\u003Cspan style=\"color:#F8F8F2\">tabClassMap\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">              onClick\u003C/span>\u003Cspan style=\"color:#F92672\">={\u003C/span>\u003Cspan style=\"color:#F8F8F2\">() \u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\">=>\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.\u003C/span>\u003Cspan style=\"color:#A6E22E\">openTab\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(index)\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">              {\u003C/span>\u003Cspan style=\"color:#F8F8F2\">tab.label\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">            &#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">button\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">          );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        })\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#F92672\">div\u003C/span>\u003Cspan style=\"color:#F8F8F2\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you’ve ever used React, you’ll recognize what we’re doing here. Remember that TSX is TypeScript, not actual HTML, so we can do things such as transform arrays into other rendered elements. We’re doing this in our function here. We’re taking \u003Ccode>this.tabs\u003C/code> and using the \u003Ccode>map()\u003C/code> function to transform those tabs into elements we want to render on screen. In this case we’re rendering our buttons with the \u003Ccode>.tab-button\u003C/code> class, and we’re conditionally applying the \u003Ccode>.active\u003C/code> class to the tab which is marked as active. We make sure to assign the disabled attribute conditionally to those tabs that we’ve marked as disabled. We also specified a click handler, \u003Ccode>onClick\u003C/code>, that we’ll implement now.\u003C/p>\n\u003Ch2 id=\"method-decorator\">Method Decorator\u003C/h2>\n\u003Cp>We want to implement our click handler on a tab so we can correctly change tabs when clicked on. For this we’re going to use the \u003Ccode>@Method()\u003C/code> decorator. This decorator exposes class methods on the public API for the component. In other words, you can call those methods simply by querying for the element and calling its method, like so:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> tabs \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> document.\u003C/span>\u003Cspan style=\"color:#A6E22E\">querySelector\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E6DB74\">'mtn-tabs'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">tabs.\u003C/span>\u003Cspan style=\"color:#A6E22E\">openTab\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#AE81FF\">2\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In order to keep methods internal to the component we want to simply omit the \u003Ccode>@Method()\u003C/code> decorator. By my judgement, methods should be kept internal unless there is a valid reason for them to be exposed. In the case of this \u003Ccode>openTab()\u003C/code> function, there is definitly a good reason to expose it, so let’s implement it now. According to the docs, \u003Ca href=\"https://stenciljs.com/docs/methods#public-methods-must-be-async\">public methods must be async\u003C/a> so we’re making sure to mark it as such.\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Tabs\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">Method\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">  async\u003C/span>\u003Cspan style=\"color:#A6E22E\"> openTab\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">index\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> number\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (index \u003C/span>\u003Cspan style=\"color:#F92672\">>=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.tabs.length) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">      throw\u003C/span>\u003Cspan style=\"color:#F92672\"> new\u003C/span>\u003Cspan style=\"color:#A6E22E\"> Error\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6DB74\">        `[mtn-tabs] Index \u003C/span>\u003Cspan style=\"color:#F92672\">${\u003C/span>\u003Cspan style=\"color:#F8F8F2\">index\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003Cspan style=\"color:#E6DB74\"> is out of bounds of tabs length`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003Cspan style=\"color:#F92672\">!\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.tabs[index].disabled) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FD971F\">      this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.tabs \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.tabs.\u003C/span>\u003Cspan style=\"color:#A6E22E\">map\u003C/span>\u003Cspan style=\"color:#F8F8F2\">((\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">tab\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">i\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) \u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\">=>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        tab.active \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> i \u003C/span>\u003Cspan style=\"color:#F92672\">===\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> index;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">        return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> tab;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We first make sure that the index requested exists. We can’t select a tab that doesn’t exist. We then check that the tab that has been clicked is not disabled. We don’t want a disabled tab to have any functionality. Otherwise we change the \u003Ccode>active\u003C/code> flag on each tab, depending on whether the index of the tab matches the index we passed into the method. If it matches, we set \u003Ccode>active\u003C/code> to \u003Ccode>true\u003C/code>, otherwise we set it to \u003Ccode>false\u003C/code>.\u003C/p>\n\u003Cp>If you save and check, your tabs now change when you click on them! They’re starting to work just how we want them to. There are a few more things, however, that we want to do before we finish up this component.\u003C/p>\n\u003Ch2 id=\"event-decorator\">Event Decorator\u003C/h2>\n\u003Cp>We exposed the \u003Ccode>openTab()\u003C/code> method on the public API of our component. This is obviously useful to be able to programatically change tabs. What about being able to determine when tabs have changed and react to that change? We would use custom Events with the \u003Ccode>@Event()\u003C/code> decorator.\u003C/p>\n\u003Cp>With our components, we can define an \u003Ccode>EventEmitter\u003C/code> to emit \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\">Custom DOM events\u003C/a>. This is really easy with Stencil. Let’s define ours now and emit the changed tab in our \u003Ccode>openTab()\u003C/code> method:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Tabs\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">Event\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({ eventName: \u003C/span>\u003Cspan style=\"color:#E6DB74\">'change'\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> })\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  onChange\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">EventEmitter\u003C/span>\u003Cspan style=\"color:#F8F8F2\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">Method\u003C/span>\u003Cspan style=\"color:#F8F8F2\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  openTab\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">index\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> number\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (index \u003C/span>\u003Cspan style=\"color:#F92672\">>=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.tabs.length) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">      throw\u003C/span>\u003Cspan style=\"color:#F92672\"> new\u003C/span>\u003Cspan style=\"color:#A6E22E\"> Error\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E6DB74\">        `[mtn-tabs] Index \u003C/span>\u003Cspan style=\"color:#F92672\">${\u003C/span>\u003Cspan style=\"color:#F8F8F2\">index\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003Cspan style=\"color:#E6DB74\"> is out of bounds of tabs length`\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">    if\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> (\u003C/span>\u003Cspan style=\"color:#F92672\">!\u003C/span>\u003Cspan style=\"color:#FD971F\">this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.tabs[index].disabled) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FD971F\">      this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.tabs \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#FD971F\"> this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.tabs.\u003C/span>\u003Cspan style=\"color:#A6E22E\">map\u003C/span>\u003Cspan style=\"color:#F8F8F2\">((\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">tab\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">i\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) \u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\">=>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">        tab.active \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> i \u003C/span>\u003Cspan style=\"color:#F92672\">===\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> index;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">        return\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> tab;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">      });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FD971F\">      this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.onChange.\u003C/span>\u003Cspan style=\"color:#A6E22E\">emit\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({ tabId: index });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We created our \u003Ccode>onChange\u003C/code> which is an \u003Ccode>EventEmitter\u003C/code> that we imported from Stencil. We also changed its name using the \u003Ccode>eventName\u003C/code> config property in the decorator. You can change this if you want or keep it the same, it’s up to your preference. The only suggestion is that you keep your naming consistent.\u003C/p>\n\u003Cp>We then call the \u003Ccode>emit()\u003C/code> function on the \u003Ccode>EventEmitter\u003C/code> and emit an object with a \u003Ccode>tabId\u003C/code> of the changed tab. We can now listen to this event outside of this component and react to it, like follows:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"ts\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> tabs \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> document.\u003C/span>\u003Cspan style=\"color:#A6E22E\">querySelector\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E6DB74\">'mtn-tabs'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">tabs.\u003C/span>\u003Cspan style=\"color:#A6E22E\">addEventListener\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E6DB74\">'change'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, \u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">event\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> =>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // You'll find your emitted object under event.detail\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  console.\u003C/span>\u003Cspan style=\"color:#A6E22E\">log\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E6DB74\">`CHANGED TABS TO INDEX \u003C/span>\u003Cspan style=\"color:#F92672\">${\u003C/span>\u003Cspan style=\"color:#F8F8F2\">event.detail.tabId\u003C/span>\u003Cspan style=\"color:#F92672\">}\u003C/span>\u003Cspan style=\"color:#E6DB74\">`\u003C/span>\u003Cspan style=\"color:#F8F8F2\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now you can do things such as swapping out views when the currently active tab changes! Events are super handy when it comes to any good component library. We could add all sorts of events to our components. In the case of our tabs, however, we’ll leave it with this one event.\u003C/p>\n\u003Ch2 id=\"listen-decorator\">Listen Decorator\u003C/h2>\n\u003Cp>The \u003Ccode>@Listen()\u003C/code> decorator is closely related to the \u003Ccode>@Event()\u003C/code> decorator. Basically it’s a shorthand way of listening and reacting to a DOM Event. You could either listen to your own component event you’ve defined, or you could listen to a standard event, such as the scroll event. It works like this:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">MyComponent\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">Listen\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E6DB74\">'body:scroll'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  handleScroll\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">ev\u003C/span>\u003Cspan style=\"color:#F8F8F2\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">    console.\u003C/span>\u003Cspan style=\"color:#A6E22E\">log\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E6DB74\">'The body was scrolled'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">, ev);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>We’re not using this decorator in our tabs component, but it’s very simple to use. Other use cases might be a \u003Ccode>keyup\u003C/code> listener which you could use to, for example, implement the \u003Ca href=\"https://en.wikipedia.org/wiki/Konami_Code\">Konami Code\u003C/a> on your component to unlock a fun easter egg.\u003C/p>\n\u003Ch2 id=\"watch-decorator\">Watch Decorator\u003C/h2>\n\u003Cp>There is one more main decorator in Stencil’s toolkit, and that’s the \u003Ccode>@Watch()\u003C/code> decorator. It is used to watch a specific property on the component class, and decorates a method which is called upon that property being changed. It calls the method with the \u003Ccode>oldValue\u003C/code> and \u003Ccode>newValue\u003C/code>, so you can react with either value in mind. We’re not going to use it in our tabs component, but we could if we wanted. Instead of emitting the new index in the \u003Ccode>openTab()\u003C/code> function, we could instead listen to the tabs property and emit the newly active tab from there, perhaps like this:\u003C/p>\n\u003Cpre class=\"astro-code monokai\" style=\"background-color:#272822;color:#F8F8F2; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F92672\">export\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> class\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">Tabs\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  @\u003C/span>\u003Cspan style=\"color:#A6E22E\">Watch\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#E6DB74\">'tabs'\u003C/span>\u003Cspan style=\"color:#F8F8F2\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#A6E22E\">  tabsChangeHandler\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">newValue\u003C/span>\u003Cspan style=\"color:#F92672\">:\u003C/span>\u003Cspan> \u003C/span>\u003Cspan style=\"color:#A6E22E;text-decoration:underline\">HTMLMtnTabElement\u003C/span>\u003Cspan style=\"color:#F8F8F2\">[]) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#66D9EF;font-style:italic\">    const\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> newIndex \u003C/span>\u003Cspan style=\"color:#F92672\">=\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> newValue.\u003C/span>\u003Cspan style=\"color:#A6E22E\">findIndex\u003C/span>\u003Cspan style=\"color:#F8F8F2\">(\u003C/span>\u003Cspan style=\"color:#FD971F;font-style:italic\">tab\u003C/span>\u003Cspan style=\"color:#66D9EF;font-style:italic\"> =>\u003C/span>\u003Cspan style=\"color:#F8F8F2\"> tab.active);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FD971F\">    this\u003C/span>\u003Cspan style=\"color:#F8F8F2\">.onChange.\u003C/span>\u003Cspan style=\"color:#A6E22E\">emit\u003C/span>\u003Cspan style=\"color:#F8F8F2\">({ tabId: newIndex });\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#88846F\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F8F8F2\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In that function we don’t care about the old value, we just want to return the new tab. This works identically to how we were doing it previously, it still emits the new tab when the tabs change. We’re not using this method in our component, however, because we have to search for the index of the new tab each time the tabs are updated, whereas we know for certain which tab is the new one in our \u003Ccode>openTab()\u003C/code> method, so we’ll stick with that. This is how you use the \u003Ccode>@Watch()\u003C/code> decorator though, and it’s useful for other situations and components, so it’s worth keeping around in your toolbox.\u003C/p>\n\u003Ch2 id=\"next-steps\">Next Steps\u003C/h2>\n\u003Cp>Congratulations! Your tabs component should be fully working now! We have a public API to change tabs, an event we can listen and react to, and internal state that helps us re-render appropriately when needed. The decorators we’ve gone over in this and previous posts form the foundation of building web components with Stencil. We’ve covered a ton of ground in this series, but there’s still more to be had! One of the most important aspects of developing software has been missing thus far, and that’s \u003Cstrong>testing your code\u003C/strong>. We’ll be going over that in the next post, coming soon!\u003C/p>\n\u003Cp>\u003Cem>Simply want to see the end result repo? Check it out \u003Ca href=\"https://github.com/johnbwoodruff/mountain-ui\">here\u003C/a>\u003C/em>\u003C/p>",{"headings":688,"localImagePaths":708,"remoteImagePaths":709,"frontmatter":710,"imagePaths":713},[689,692,695,698,701,704,707],{"depth":30,"slug":690,"text":691},"building-blocks","Building Blocks",{"depth":30,"slug":693,"text":694},"state-and-element-decorators","State and Element Decorators",{"depth":30,"slug":696,"text":697},"method-decorator","Method Decorator",{"depth":30,"slug":699,"text":700},"event-decorator","Event Decorator",{"depth":30,"slug":702,"text":703},"listen-decorator","Listen Decorator",{"depth":30,"slug":705,"text":706},"watch-decorator","Watch Decorator",{"depth":30,"slug":569,"text":570},[],[],{"title":678,"published":17,"description":679,"date":711,"series":554,"tags":712,"cover_image":552,"cover_image_alt":553},["Date","2018-11-18T00:00:00.000Z"],[550,551,506],[],"stencil-decorators.md"]